/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IImmutableSwapProxy {
  export type SecondaryFeeParamsStruct = {
    recipient: AddressLike;
    feeBasisPoints: BigNumberish;
  };

  export type SecondaryFeeParamsStructOutput = [
    recipient: string,
    feeBasisPoints: bigint
  ] & { recipient: string; feeBasisPoints: bigint };
}

export declare namespace IV3SwapRouter {
  export type ExactInputSingleParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    fee: BigNumberish;
    recipient: AddressLike;
    amountIn: BigNumberish;
    amountOutMinimum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactInputSingleParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    fee: bigint,
    recipient: string,
    amountIn: bigint,
    amountOutMinimum: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: bigint;
    recipient: string;
    amountIn: bigint;
    amountOutMinimum: bigint;
    sqrtPriceLimitX96: bigint;
  };

  export type ExactInputParamsStruct = {
    path: BytesLike;
    recipient: AddressLike;
    amountIn: BigNumberish;
    amountOutMinimum: BigNumberish;
  };

  export type ExactInputParamsStructOutput = [
    path: string,
    recipient: string,
    amountIn: bigint,
    amountOutMinimum: bigint
  ] & {
    path: string;
    recipient: string;
    amountIn: bigint;
    amountOutMinimum: bigint;
  };

  export type ExactOutputSingleParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    fee: BigNumberish;
    recipient: AddressLike;
    amountOut: BigNumberish;
    amountInMaximum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactOutputSingleParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    fee: bigint,
    recipient: string,
    amountOut: bigint,
    amountInMaximum: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: bigint;
    recipient: string;
    amountOut: bigint;
    amountInMaximum: bigint;
    sqrtPriceLimitX96: bigint;
  };

  export type ExactOutputParamsStruct = {
    path: BytesLike;
    recipient: AddressLike;
    amountOut: BigNumberish;
    amountInMaximum: BigNumberish;
  };

  export type ExactOutputParamsStructOutput = [
    path: string,
    recipient: string,
    amountOut: bigint,
    amountInMaximum: bigint
  ] & {
    path: string;
    recipient: string;
    amountOut: bigint;
    amountInMaximum: bigint;
  };
}

export interface ImmutableSwapProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "exactInputSingleWithSecondaryFee"
      | "exactInputWithSecondaryFee"
      | "exactOutputSingleWithSecondaryFee"
      | "exactOutputWithSecondaryFee"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "multicall(uint256,bytes[])"
      | "multicall(bytes[])"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "unpause"
      | "unwrapNativeToken"
      | "withdrawFunds(address,address)"
      | "withdrawFunds(address)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeTaken(address,address,address,uint256)"
      | "FeeTaken(address,address,uint256)"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingleWithSecondaryFee",
    values: [
      IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      IV3SwapRouter.ExactInputSingleParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputWithSecondaryFee",
    values: [
      IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      IV3SwapRouter.ExactInputParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutputSingleWithSecondaryFee",
    values: [
      IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      IV3SwapRouter.ExactOutputSingleParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutputWithSecondaryFee",
    values: [
      IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      IV3SwapRouter.ExactOutputParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall(uint256,bytes[])",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall(bytes[])",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unwrapNativeToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds(address)",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingleWithSecondaryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputWithSecondaryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutputSingleWithSecondaryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutputWithSecondaryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multicall(uint256,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicall(bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwrapNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds(address)",
    data: BytesLike
  ): Result;
}

export namespace FeeTaken_address_address_address_uint256_Event {
  export type InputTuple = [
    feeToken: AddressLike,
    feePayer: AddressLike,
    feeRecipient: AddressLike,
    feeAmount: BigNumberish
  ];
  export type OutputTuple = [
    feeToken: string,
    feePayer: string,
    feeRecipient: string,
    feeAmount: bigint
  ];
  export interface OutputObject {
    feeToken: string;
    feePayer: string;
    feeRecipient: string;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeTaken_address_address_uint256_Event {
  export type InputTuple = [
    feePayer: AddressLike,
    feeRecipient: AddressLike,
    feeAmount: BigNumberish
  ];
  export type OutputTuple = [
    feePayer: string,
    feeRecipient: string,
    feeAmount: bigint
  ];
  export interface OutputObject {
    feePayer: string;
    feeRecipient: string;
    feeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ImmutableSwapProxy extends BaseContract {
  connect(runner?: ContractRunner | null): ImmutableSwapProxy;
  waitForDeployment(): Promise<this>;

  interface: ImmutableSwapProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  exactInputSingleWithSecondaryFee: TypedContractMethod<
    [
      secondaryFees: IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      swapParams: IV3SwapRouter.ExactInputSingleParamsStruct
    ],
    [bigint],
    "payable"
  >;

  exactInputWithSecondaryFee: TypedContractMethod<
    [
      secondaryFees: IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      swapParams: IV3SwapRouter.ExactInputParamsStruct
    ],
    [bigint],
    "payable"
  >;

  exactOutputSingleWithSecondaryFee: TypedContractMethod<
    [
      secondaryFees: IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      swapParams: IV3SwapRouter.ExactOutputSingleParamsStruct
    ],
    [bigint],
    "payable"
  >;

  exactOutputWithSecondaryFee: TypedContractMethod<
    [
      secondaryFees: IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      swapParams: IV3SwapRouter.ExactOutputParamsStruct
    ],
    [bigint],
    "payable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  "multicall(uint256,bytes[])": TypedContractMethod<
    [deadline: BigNumberish, data: BytesLike[]],
    [string[]],
    "payable"
  >;

  "multicall(bytes[])": TypedContractMethod<
    [data: BytesLike[]],
    [string[]],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unwrapNativeToken: TypedContractMethod<
    [amountMinimum: BigNumberish],
    [void],
    "payable"
  >;

  "withdrawFunds(address,address)": TypedContractMethod<
    [to: AddressLike, erc20: AddressLike],
    [void],
    "nonpayable"
  >;

  "withdrawFunds(address)": TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "exactInputSingleWithSecondaryFee"
  ): TypedContractMethod<
    [
      secondaryFees: IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      swapParams: IV3SwapRouter.ExactInputSingleParamsStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exactInputWithSecondaryFee"
  ): TypedContractMethod<
    [
      secondaryFees: IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      swapParams: IV3SwapRouter.ExactInputParamsStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exactOutputSingleWithSecondaryFee"
  ): TypedContractMethod<
    [
      secondaryFees: IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      swapParams: IV3SwapRouter.ExactOutputSingleParamsStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exactOutputWithSecondaryFee"
  ): TypedContractMethod<
    [
      secondaryFees: IImmutableSwapProxy.SecondaryFeeParamsStruct[],
      swapParams: IV3SwapRouter.ExactOutputParamsStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "multicall(uint256,bytes[])"
  ): TypedContractMethod<
    [deadline: BigNumberish, data: BytesLike[]],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multicall(bytes[])"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unwrapNativeToken"
  ): TypedContractMethod<[amountMinimum: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "withdrawFunds(address,address)"
  ): TypedContractMethod<
    [to: AddressLike, erc20: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds(address)"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FeeTaken(address,address,address,uint256)"
  ): TypedContractEvent<
    FeeTaken_address_address_address_uint256_Event.InputTuple,
    FeeTaken_address_address_address_uint256_Event.OutputTuple,
    FeeTaken_address_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "FeeTaken(address,address,uint256)"
  ): TypedContractEvent<
    FeeTaken_address_address_uint256_Event.InputTuple,
    FeeTaken_address_address_uint256_Event.OutputTuple,
    FeeTaken_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "FeeTaken(address,address,address,uint256)": TypedContractEvent<
      FeeTaken_address_address_address_uint256_Event.InputTuple,
      FeeTaken_address_address_address_uint256_Event.OutputTuple,
      FeeTaken_address_address_address_uint256_Event.OutputObject
    >;
    "FeeTaken(address,address,uint256)": TypedContractEvent<
      FeeTaken_address_address_uint256_Event.InputTuple,
      FeeTaken_address_address_uint256_Event.OutputTuple,
      FeeTaken_address_address_uint256_Event.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
