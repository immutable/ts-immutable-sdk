/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ISecondaryFee {
  export type ServiceFeeParamsStruct = {
    recipient: PromiseOrValue<string>;
    feePrcntBasisPoints: PromiseOrValue<BigNumberish>;
  };

  export type ServiceFeeParamsStructOutput = [string, number] & {
    recipient: string;
    feePrcntBasisPoints: number;
  };
}

export declare namespace IV3SwapRouter {
  export type ExactInputSingleParamsStruct = {
    tokenIn: PromiseOrValue<string>;
    tokenOut: PromiseOrValue<string>;
    fee: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    amountIn: PromiseOrValue<BigNumberish>;
    amountOutMinimum: PromiseOrValue<BigNumberish>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
  };

  export type ExactInputSingleParamsStructOutput = [
    string,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: number;
    recipient: string;
    amountIn: BigNumber;
    amountOutMinimum: BigNumber;
    sqrtPriceLimitX96: BigNumber;
  };

  export type ExactInputParamsStruct = {
    path: PromiseOrValue<BytesLike>;
    recipient: PromiseOrValue<string>;
    amountIn: PromiseOrValue<BigNumberish>;
    amountOutMinimum: PromiseOrValue<BigNumberish>;
  };

  export type ExactInputParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    path: string;
    recipient: string;
    amountIn: BigNumber;
    amountOutMinimum: BigNumber;
  };

  export type ExactOutputSingleParamsStruct = {
    tokenIn: PromiseOrValue<string>;
    tokenOut: PromiseOrValue<string>;
    fee: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    amountOut: PromiseOrValue<BigNumberish>;
    amountInMaximum: PromiseOrValue<BigNumberish>;
    sqrtPriceLimitX96: PromiseOrValue<BigNumberish>;
  };

  export type ExactOutputSingleParamsStructOutput = [
    string,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: number;
    recipient: string;
    amountOut: BigNumber;
    amountInMaximum: BigNumber;
    sqrtPriceLimitX96: BigNumber;
  };

  export type ExactOutputParamsStruct = {
    path: PromiseOrValue<BytesLike>;
    recipient: PromiseOrValue<string>;
    amountOut: PromiseOrValue<BigNumberish>;
    amountInMaximum: PromiseOrValue<BigNumberish>;
  };

  export type ExactOutputParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    path: string;
    recipient: string;
    amountOut: BigNumber;
    amountInMaximum: BigNumber;
  };
}

export interface SecondaryFeeInterface extends utils.Interface {
  functions: {
    "BASIS_POINT_PRECISION()": FunctionFragment;
    "MAX_SERVICE_FEE()": FunctionFragment;
    "exactInputSingleWithServiceFee((address,uint16)[],(address,address,uint24,address,uint256,uint256,uint160))": FunctionFragment;
    "exactInputWithServiceFee((address,uint16)[],(bytes,address,uint256,uint256))": FunctionFragment;
    "exactOutputSingleWithServiceFee((address,uint16)[],(address,address,uint24,address,uint256,uint256,uint160))": FunctionFragment;
    "exactOutputWithServiceFee((address,uint16)[],(bytes,address,uint256,uint256))": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapRouter()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINT_PRECISION"
      | "MAX_SERVICE_FEE"
      | "exactInputSingleWithServiceFee"
      | "exactInputWithServiceFee"
      | "exactOutputSingleWithServiceFee"
      | "exactOutputWithServiceFee"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "transferOwnership"
      | "uniswapRouter"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINT_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SERVICE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingleWithServiceFee",
    values: [
      ISecondaryFee.ServiceFeeParamsStruct[],
      IV3SwapRouter.ExactInputSingleParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputWithServiceFee",
    values: [
      ISecondaryFee.ServiceFeeParamsStruct[],
      IV3SwapRouter.ExactInputParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutputSingleWithServiceFee",
    values: [
      ISecondaryFee.ServiceFeeParamsStruct[],
      IV3SwapRouter.ExactOutputSingleParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactOutputWithServiceFee",
    values: [
      ISecondaryFee.ServiceFeeParamsStruct[],
      IV3SwapRouter.ExactOutputParamsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINT_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SERVICE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingleWithServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputWithServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutputSingleWithServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactOutputWithServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "FeeTaken(address,address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface FeeTakenEventObject {
  feeToken: string;
  feePayer: string;
  feeRecipient: string;
  feeAmount: BigNumber;
}
export type FeeTakenEvent = TypedEvent<
  [string, string, string, BigNumber],
  FeeTakenEventObject
>;

export type FeeTakenEventFilter = TypedEventFilter<FeeTakenEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface SecondaryFee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SecondaryFeeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINT_PRECISION(overrides?: CallOverrides): Promise<[number]>;

    MAX_SERVICE_FEE(overrides?: CallOverrides): Promise<[number]>;

    exactInputSingleWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactInputWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactOutputSingleWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactOutputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactOutputWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactOutputParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINT_PRECISION(overrides?: CallOverrides): Promise<number>;

  MAX_SERVICE_FEE(overrides?: CallOverrides): Promise<number>;

  exactInputSingleWithServiceFee(
    serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
    params: IV3SwapRouter.ExactInputSingleParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactInputWithServiceFee(
    serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
    params: IV3SwapRouter.ExactInputParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactOutputSingleWithServiceFee(
    serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
    params: IV3SwapRouter.ExactOutputSingleParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactOutputWithServiceFee(
    serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
    params: IV3SwapRouter.ExactOutputParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINT_PRECISION(overrides?: CallOverrides): Promise<number>;

    MAX_SERVICE_FEE(overrides?: CallOverrides): Promise<number>;

    exactInputSingleWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactInputSingleParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactInputParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactOutputSingleWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactOutputSingleParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactOutputWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactOutputParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FeeTaken(address,address,address,uint256)"(
      feeToken?: PromiseOrValue<string> | null,
      feePayer?: PromiseOrValue<string> | null,
      feeRecipient?: PromiseOrValue<string> | null,
      feeAmount?: null
    ): FeeTakenEventFilter;
    FeeTaken(
      feeToken?: PromiseOrValue<string> | null,
      feePayer?: PromiseOrValue<string> | null,
      feeRecipient?: PromiseOrValue<string> | null,
      feeAmount?: null
    ): FeeTakenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    BASIS_POINT_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SERVICE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    exactInputSingleWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactInputWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactOutputSingleWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactOutputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactOutputWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactOutputParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINT_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SERVICE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exactInputSingleWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactInputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactInputWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactInputParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactOutputSingleWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactOutputSingleParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactOutputWithServiceFee(
      serviceFee: ISecondaryFee.ServiceFeeParamsStruct[],
      params: IV3SwapRouter.ExactOutputParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
