/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace UniswapInterfaceMulticall {
  export type CallStruct = {
    target: AddressLike;
    gasLimit: BigNumberish;
    callData: BytesLike;
  };

  export type CallStructOutput = [
    target: string,
    gasLimit: bigint,
    callData: string
  ] & { target: string; gasLimit: bigint; callData: string };

  export type ResultStruct = {
    success: boolean;
    gasUsed: BigNumberish;
    returnData: BytesLike;
  };

  export type ResultStructOutput = [
    success: boolean,
    gasUsed: bigint,
    returnData: string
  ] & { success: boolean; gasUsed: bigint; returnData: string };
}

export interface MulticallInterface extends Interface {
  getFunction(
    nameOrSignature: "getCurrentBlockTimestamp" | "getEthBalance" | "multicall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCurrentBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [UniswapInterfaceMulticall.CallStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
}

export interface Multicall extends BaseContract {
  connect(runner?: ContractRunner | null): Multicall;
  waitForDeployment(): Promise<this>;

  interface: MulticallInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCurrentBlockTimestamp: TypedContractMethod<[], [bigint], "view">;

  getEthBalance: TypedContractMethod<[addr: AddressLike], [bigint], "view">;

  multicall: TypedContractMethod<
    [calls: UniswapInterfaceMulticall.CallStruct[]],
    [
      [bigint, UniswapInterfaceMulticall.ResultStructOutput[]] & {
        blockNumber: bigint;
        returnData: UniswapInterfaceMulticall.ResultStructOutput[];
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCurrentBlockTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEthBalance"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<
    [calls: UniswapInterfaceMulticall.CallStruct[]],
    [
      [bigint, UniswapInterfaceMulticall.ResultStructOutput[]] & {
        blockNumber: bigint;
        returnData: UniswapInterfaceMulticall.ResultStructOutput[];
      }
    ],
    "nonpayable"
  >;

  filters: {};
}
