/* tslint:disable */
/* eslint-disable */
/**
 * Immutable X API
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateOrderRequestBody } from '../models';
// @ts-ignore
import { Order } from '../models';
// @ts-ignore
import { Orders } from '../models';
/**
 * OrderBookApi - axios parameter creator
 * @export
 */
export const OrderBookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a listing on a specific chain
         * @summary create_order order_book
         * @param {string} chainId Chain identifier using the CAIP-2 blockchain id spec
         * @param {CreateOrderRequestBody} createOrderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderBookCreateOrder: async (chainId: string, createOrderRequestBody: CreateOrderRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('orderBookCreateOrder', 'chainId', chainId)
            // verify required parameter 'createOrderRequestBody' is not null or undefined
            assertParamExists('orderBookCreateOrder', 'createOrderRequestBody', createOrderRequestBody)
            const localVarPath = `/v1/chains/{chain_id}/orders`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single order from a given chain
         * @summary getorder order_book
         * @param {string} chainId Chain identifier using the CAIP-2 blockchain id spec
         * @param {string} orderId Global Order identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderBookGetOrder: async (chainId: string, orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('orderBookGetOrder', 'chainId', chainId)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('orderBookGetOrder', 'orderId', orderId)
            const localVarPath = `/v1/chains/{chain_id}/orders/{order_id}`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of orders from a given chain
         * @summary listorder order_book
         * @param {string} chainId Chain identifier using the CAIP-2 blockchain id spec
         * @param {string} [pageSize] Number of orders to return per page
         * @param {string} [sortBy] Order field to sort by
         * @param {'asc' | 'desc'} [sortDirection] Ascending or descending direction for sort
         * @param {string} [pageCursor] Cursor for specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderBookListOrder: async (chainId: string, pageSize?: string, sortBy?: string, sortDirection?: 'asc' | 'desc', pageCursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainId' is not null or undefined
            assertParamExists('orderBookListOrder', 'chainId', chainId)
            const localVarPath = `/v1/chains/{chain_id}/orders`
                .replace(`{${"chain_id"}}`, encodeURIComponent(String(chainId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sort_direction'] = sortDirection;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['page_cursor'] = pageCursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderBookApi - functional programming interface
 * @export
 */
export const OrderBookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderBookApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a listing on a specific chain
         * @summary create_order order_book
         * @param {string} chainId Chain identifier using the CAIP-2 blockchain id spec
         * @param {CreateOrderRequestBody} createOrderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderBookCreateOrder(chainId: string, createOrderRequestBody: CreateOrderRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderBookCreateOrder(chainId, createOrderRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single order from a given chain
         * @summary getorder order_book
         * @param {string} chainId Chain identifier using the CAIP-2 blockchain id spec
         * @param {string} orderId Global Order identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderBookGetOrder(chainId: string, orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderBookGetOrder(chainId, orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of orders from a given chain
         * @summary listorder order_book
         * @param {string} chainId Chain identifier using the CAIP-2 blockchain id spec
         * @param {string} [pageSize] Number of orders to return per page
         * @param {string} [sortBy] Order field to sort by
         * @param {'asc' | 'desc'} [sortDirection] Ascending or descending direction for sort
         * @param {string} [pageCursor] Cursor for specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderBookListOrder(chainId: string, pageSize?: string, sortBy?: string, sortDirection?: 'asc' | 'desc', pageCursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Orders>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderBookListOrder(chainId, pageSize, sortBy, sortDirection, pageCursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderBookApi - factory interface
 * @export
 */
export const OrderBookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderBookApiFp(configuration)
    return {
        /**
         * Create a listing on a specific chain
         * @summary create_order order_book
         * @param {string} chainId Chain identifier using the CAIP-2 blockchain id spec
         * @param {CreateOrderRequestBody} createOrderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderBookCreateOrder(chainId: string, createOrderRequestBody: CreateOrderRequestBody, options?: any): AxiosPromise<Order> {
            return localVarFp.orderBookCreateOrder(chainId, createOrderRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single order from a given chain
         * @summary getorder order_book
         * @param {string} chainId Chain identifier using the CAIP-2 blockchain id spec
         * @param {string} orderId Global Order identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderBookGetOrder(chainId: string, orderId: string, options?: any): AxiosPromise<Order> {
            return localVarFp.orderBookGetOrder(chainId, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of orders from a given chain
         * @summary listorder order_book
         * @param {string} chainId Chain identifier using the CAIP-2 blockchain id spec
         * @param {string} [pageSize] Number of orders to return per page
         * @param {string} [sortBy] Order field to sort by
         * @param {'asc' | 'desc'} [sortDirection] Ascending or descending direction for sort
         * @param {string} [pageCursor] Cursor for specific page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderBookListOrder(chainId: string, pageSize?: string, sortBy?: string, sortDirection?: 'asc' | 'desc', pageCursor?: string, options?: any): AxiosPromise<Orders> {
            return localVarFp.orderBookListOrder(chainId, pageSize, sortBy, sortDirection, pageCursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for orderBookCreateOrder operation in OrderBookApi.
 * @export
 * @interface OrderBookApiOrderBookCreateOrderRequest
 */
export interface OrderBookApiOrderBookCreateOrderRequest {
    /**
     * Chain identifier using the CAIP-2 blockchain id spec
     * @type {string}
     * @memberof OrderBookApiOrderBookCreateOrder
     */
    readonly chainId: string

    /**
     * 
     * @type {CreateOrderRequestBody}
     * @memberof OrderBookApiOrderBookCreateOrder
     */
    readonly createOrderRequestBody: CreateOrderRequestBody
}

/**
 * Request parameters for orderBookGetOrder operation in OrderBookApi.
 * @export
 * @interface OrderBookApiOrderBookGetOrderRequest
 */
export interface OrderBookApiOrderBookGetOrderRequest {
    /**
     * Chain identifier using the CAIP-2 blockchain id spec
     * @type {string}
     * @memberof OrderBookApiOrderBookGetOrder
     */
    readonly chainId: string

    /**
     * Global Order identifier
     * @type {string}
     * @memberof OrderBookApiOrderBookGetOrder
     */
    readonly orderId: string
}

/**
 * Request parameters for orderBookListOrder operation in OrderBookApi.
 * @export
 * @interface OrderBookApiOrderBookListOrderRequest
 */
export interface OrderBookApiOrderBookListOrderRequest {
    /**
     * Chain identifier using the CAIP-2 blockchain id spec
     * @type {string}
     * @memberof OrderBookApiOrderBookListOrder
     */
    readonly chainId: string

    /**
     * Number of orders to return per page
     * @type {string}
     * @memberof OrderBookApiOrderBookListOrder
     */
    readonly pageSize?: string

    /**
     * Order field to sort by
     * @type {string}
     * @memberof OrderBookApiOrderBookListOrder
     */
    readonly sortBy?: string

    /**
     * Ascending or descending direction for sort
     * @type {'asc' | 'desc'}
     * @memberof OrderBookApiOrderBookListOrder
     */
    readonly sortDirection?: 'asc' | 'desc'

    /**
     * Cursor for specific page
     * @type {string}
     * @memberof OrderBookApiOrderBookListOrder
     */
    readonly pageCursor?: string
}

/**
 * OrderBookApi - object-oriented interface
 * @export
 * @class OrderBookApi
 * @extends {BaseAPI}
 */
export class OrderBookApi extends BaseAPI {
    /**
     * Create a listing on a specific chain
     * @summary create_order order_book
     * @param {OrderBookApiOrderBookCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderBookApi
     */
    public orderBookCreateOrder(requestParameters: OrderBookApiOrderBookCreateOrderRequest, options?: AxiosRequestConfig) {
        return OrderBookApiFp(this.configuration).orderBookCreateOrder(requestParameters.chainId, requestParameters.createOrderRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single order from a given chain
     * @summary getorder order_book
     * @param {OrderBookApiOrderBookGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderBookApi
     */
    public orderBookGetOrder(requestParameters: OrderBookApiOrderBookGetOrderRequest, options?: AxiosRequestConfig) {
        return OrderBookApiFp(this.configuration).orderBookGetOrder(requestParameters.chainId, requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of orders from a given chain
     * @summary listorder order_book
     * @param {OrderBookApiOrderBookListOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderBookApi
     */
    public orderBookListOrder(requestParameters: OrderBookApiOrderBookListOrderRequest, options?: AxiosRequestConfig) {
        return OrderBookApiFp(this.configuration).orderBookListOrder(requestParameters.chainId, requestParameters.pageSize, requestParameters.sortBy, requestParameters.sortDirection, requestParameters.pageCursor, options).then((request) => request(this.axios, this.basePath));
    }
}
