{
  "openapi": "3.0.3",
  "info": {
    "title": "Immutable zkEVM API",
    "version": "1.0.0",
    "description": "Immutable Multi Rollup API",
    "contact": {
      "name": "Immutable API Support",
      "email": "support@immutable.com",
      "url": "https://support.immutable.com"
    }
  },
  "servers": [
    {
      "url": "https://api.sandbox.immutable.com"
    }
  ],
  "tags": [
    {
      "name": "activities",
      "description": "Activities Endpoints"
    },
    {
      "name": "chains",
      "description": "Chains Endpoints"
    },
    {
      "name": "collections",
      "description": "Collections Endpoints"
    },
    {
      "name": "nfts",
      "description": "NFTs Endpoints"
    },
    {
      "name": "nft owners",
      "description": "NFT Owner Endpoints"
    },
    {
      "name": "metadata",
      "description": "NFT Metadata Endpoints"
    },
    {
      "name": "tokens",
      "description": "ERC20 Token Endpoints"
    },
    {
      "name": "demopage",
      "description": "Temporary HTML endpoint for demo purposes"
    }
  ],
  "paths": {
    "/v1/chains/{chain_name}/activity-history": {
      "get": {
        "tags": [
          "activities"
        ],
        "operationId": "ListActivityHistory",
        "summary": "List history of activities",
        "description": "List activities sorted by updated_at timestamp ascending, useful for time based data replication",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "in": "path",
            "required": true,
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "From indexed at including given date",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "to_updated_at",
            "in": "query",
            "required": false,
            "description": "To indexed at including given date",
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "contract_address",
            "in": "query",
            "description": "The contract address of the collection",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "activity_type",
            "in": "query",
            "description": "The activity type",
            "required": false,
            "example": "burn",
            "schema": {
              "$ref": "#/components/schemas/ActivityType"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActivitiesResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/activities": {
      "get": {
        "tags": [
          "activities"
        ],
        "operationId": "ListActivities",
        "summary": "List all activities",
        "description": "List all activities",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "in": "path",
            "required": true,
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "query",
            "description": "The contract address of NFT or ERC20 Token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "token_id",
            "in": "query",
            "description": "An `uint256` token id as string",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "1"
          },
          {
            "name": "account_address",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3",
            "description": "The account address activity contains"
          },
          {
            "name": "activity_type",
            "in": "query",
            "description": "The activity type",
            "required": false,
            "example": "burn",
            "schema": {
              "$ref": "#/components/schemas/ActivityType"
            }
          },
          {
            "name": "transaction_hash",
            "in": "query",
            "description": "The transaction hash of activity",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x68d9eac5e3b3c3580404989a4030c948a78e1b07b2b5ea5688d8c38a6c61c93e"
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActivitiesResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/activities/{activity_id}": {
      "get": {
        "tags": [
          "activities"
        ],
        "operationId": "GetActivity",
        "summary": "Get a single activity by ID",
        "description": "Get a single activity by ID",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "in": "path",
            "required": true,
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "activity_id",
            "description": "The id of activity",
            "schema": {
              "$ref": "#/components/schemas/ActivityID"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActivityResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections": {
      "get": {
        "description": "List all collections",
        "tags": [
          "collections"
        ],
        "operationId": "ListCollections",
        "summary": "List all collections",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "description": "The name of chain",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "query",
            "required": false,
            "description": "List of contract addresses to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
              }
            }
          },
          {
            "name": "verification_status",
            "in": "query",
            "required": false,
            "description": "List of verification status to filter by",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AssetVerificationStatus"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}": {
      "get": {
        "description": "Get collection by contract address",
        "tags": [
          "collections"
        ],
        "operationId": "GetCollection",
        "summary": "Get collection by contract address",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCollectionResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/refresh-metadata": {
      "post": {
        "description": "Refresh collection metadata",
        "summary": "Refresh collection metadata",
        "tags": [
          "collections"
        ],
        "operationId": "RefreshCollectionMetadata",
        "security": [
          {
            "ImmutableApiKey": [
              "refresh:metadata"
            ]
          },
          {
            "BearerAuth": [
              "refresh:metadata"
            ]
          }
        ],
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshCollectionMetadataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshCollectionMetadataResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/accounts/{account_address}/collections": {
      "get": {
        "description": "List collections by NFT owner account address",
        "tags": [
          "collections"
        ],
        "operationId": "ListCollectionsByNFTOwner",
        "summary": "List collections by NFT owner",
        "parameters": [
          {
            "name": "account_address",
            "in": "path",
            "description": "Account address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts/{token_id}": {
      "get": {
        "description": "Get NFT by token ID",
        "tags": [
          "nfts"
        ],
        "summary": "Get NFT by token ID",
        "operationId": "GetNFT",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The address of NFT contract",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "token_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "An `uint256` token id as string",
            "example": "1"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNFTResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/metadata/{metadata_id}": {
      "get": {
        "description": "Get metadata by ID",
        "tags": [
          "metadata"
        ],
        "summary": "Get metadata by ID",
        "operationId": "GetMetadata",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The address of metadata contract",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MetadataID"
            },
            "description": "The id of the metadata"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMetadataResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/metadata": {
      "get": {
        "description": "Get a list of metadata from the given contract",
        "tags": [
          "metadata"
        ],
        "summary": "Get a list of metadata from the given contract",
        "operationId": "ListMetadata",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The address of metadata contract",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMetadataResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/metadata": {
      "get": {
        "description": "Get a list of metadata from the given chain",
        "tags": [
          "metadata"
        ],
        "summary": "Get a list of metadata from the given chain",
        "operationId": "ListMetadataForChain",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMetadataResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/metadata/refresh-metadata": {
      "post": {
        "x-go-name": "RefreshMetadataByID",
        "operationId": "RefreshMetadataByID",
        "description": "Refresh stacked metadata",
        "summary": "Refresh stacked metadata",
        "tags": [
          "metadata"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ChainName"
          },
          {
            "$ref": "#/components/parameters/ContractAddress"
          }
        ],
        "security": [
          {
            "ImmutableApiKey": [
              "refresh:metadata"
            ]
          }
        ],
        "requestBody": {
          "description": "NFT Metadata Refresh Request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshMetadataByIDRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "imx-refreshes-limit": {
                "$ref": "#/components/headers/MetadataRefreshLimit"
              },
              "imx-refresh-limit-reset": {
                "$ref": "#/components/headers/MetadataRefreshLimitReset"
              },
              "imx-remaining-refreshes": {
                "$ref": "#/components/headers/MetadataRefreshLimitRemaining"
              },
              "retry-after": {
                "$ref": "#/components/headers/MetadataRefreshRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataRefreshRateLimitResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyMetadataRefreshes"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts": {
      "get": {
        "description": "List NFTs by contract address",
        "tags": [
          "nfts"
        ],
        "summary": "List NFTs by contract address",
        "operationId": "ListNFTs",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "required": true,
            "description": "Contract address",
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "token_id",
            "in": "query",
            "required": false,
            "description": "List of token IDs to filter by",
            "schema": {
              "type": "array",
              "maxItems": 30,
              "items": {
                "type": "string",
                "example": "1"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/accounts/{account_address}/nfts": {
      "get": {
        "description": "List NFTs by account address",
        "tags": [
          "nfts"
        ],
        "operationId": "ListNFTsByAccountAddress",
        "summary": "List NFTs by account address",
        "parameters": [
          {
            "name": "account_address",
            "in": "path",
            "description": "Account address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "query",
            "description": "The address of contract",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "token_id",
            "in": "query",
            "required": false,
            "description": "List of token IDs to filter by",
            "schema": {
              "type": "array",
              "maxItems": 30,
              "items": {
                "type": "string",
                "example": "1"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTsByOwnerResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts/{token_id}/owners": {
      "get": {
        "description": "List NFT owners by token ID",
        "tags": [
          "nft owners"
        ],
        "operationId": "ListNFTOwners",
        "summary": "List NFT owners by token ID",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "token_id",
            "in": "path",
            "description": "An `uint256` token id as string",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTOwnersResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/nfts": {
      "get": {
        "description": "List all NFTs on a chain",
        "tags": [
          "nfts"
        ],
        "operationId": "ListAllNFTs",
        "summary": "List all NFTs",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/nft-owners": {
      "get": {
        "description": "List all NFT owners on a chain",
        "tags": [
          "nft owners"
        ],
        "operationId": "ListAllNFTOwners",
        "summary": "List all NFT owners",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTOwnersResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/owners": {
      "get": {
        "description": "List owners by contract address",
        "tags": [
          "nft owners"
        ],
        "operationId": "ListOwnersByContractAddress",
        "summary": "List owners by contract address",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "account_address",
            "in": "query",
            "required": false,
            "description": "List of account addresses to filter by",
            "schema": {
              "type": "array",
              "maxItems": 30,
              "items": {
                "type": "string",
                "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionOwnersResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/tokens": {
      "get": {
        "description": "List ERC20 tokens",
        "tags": [
          "tokens"
        ],
        "operationId": "ListERC20Tokens",
        "summary": "List ERC20 tokens",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "verification_status",
            "in": "query",
            "required": false,
            "description": "List of verification status to filter by",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AssetVerificationStatus"
              }
            }
          },
          {
            "name": "is_canonical",
            "in": "query",
            "required": false,
            "description": "[Experimental - Canonical token data may be updated] Filter by canonical or non-canonical tokens.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTokensResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/tokens/{contract_address}": {
      "get": {
        "description": "Get single ERC20 token",
        "tags": [
          "tokens"
        ],
        "operationId": "GetERC20Token",
        "summary": "Get single ERC20 token",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTokenResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains": {
      "get": {
        "description": "List supported chains",
        "summary": "List supported chains",
        "tags": [
          "chains"
        ],
        "operationId": "ListChains",
        "parameters": [
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListChainsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts/refresh-metadata": {
      "post": {
        "description": "Refresh NFT metadata",
        "summary": "Refresh NFT metadata",
        "tags": [
          "metadata"
        ],
        "operationId": "RefreshNFTMetadataByTokenID",
        "security": [
          {
            "ImmutableApiKey": [
              "refresh:metadata"
            ]
          }
        ],
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "requestBody": {
          "description": "the request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshNFTMetadataByTokenIDRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "imx-refreshes-limit": {
                "$ref": "#/components/headers/MetadataRefreshLimit"
              },
              "imx-refresh-limit-reset": {
                "$ref": "#/components/headers/MetadataRefreshLimitReset"
              },
              "imx-remaining-refreshes": {
                "$ref": "#/components/headers/MetadataRefreshLimitRemaining"
              },
              "retry-after": {
                "$ref": "#/components/headers/MetadataRefreshRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataRefreshRateLimitResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyMetadataRefreshes"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts/mint-requests": {
      "post": {
        "description": "Create a mint request to mint a set of NFTs for a given collection",
        "summary": "Mint NFTs",
        "security": [
          {
            "ImmutableApiKey": [
              "write:mint-request"
            ]
          }
        ],
        "tags": [
          "nfts"
        ],
        "operationId": "CreateMintRequest",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "requestBody": {
          "description": "Create Mint Request Body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMintRequestRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "imx-mint-requests-limit": {
                "$ref": "#/components/headers/MintRequestsLimit"
              },
              "imx-mint-requests-limit-reset": {
                "$ref": "#/components/headers/MintRequestsLimitReset"
              },
              "imx-remaining-mint-requests": {
                "$ref": "#/components/headers/MintRequestsLimitRemaining"
              },
              "imx-mint-requests-retry-after": {
                "$ref": "#/components/headers/MintRequestsRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateMintRequestResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "429": {
            "$ref": "#/components/responses/TooManyMintRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "description": "Retrieve the status of all mints for a given contract address",
        "summary": "List mint requests",
        "security": [
          {
            "ImmutableApiKey": [
              "write:mint-request"
            ]
          }
        ],
        "tags": [
          "nfts"
        ],
        "operationId": "ListMintRequests",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          },
          {
            "name": "status",
            "description": "The status of the mint request",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/MintRequestStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMintRequestsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts/mint-requests/{reference_id}": {
      "get": {
        "description": "Retrieve the status of a mint request identified by its reference_id",
        "summary": "Get mint request by reference ID",
        "security": [
          {
            "ImmutableApiKey": [
              "write:mint-request"
            ]
          }
        ],
        "tags": [
          "nfts"
        ],
        "operationId": "GetMintRequest",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "reference_id",
            "description": "The id of the mint request",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "67f7d464-b8f0-4f6a-9a3b-8d3cb4a21af0"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMintRequestsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/crafting/sign": {
      "post": {
        "description": "Sign a crafting payload",
        "tags": [
          "crafting"
        ],
        "operationId": "SignCraftingPayload",
        "summary": "Sign a crafting payload",
        "security": [
          {
            "ImmutableApiKey": [
              "create:collections"
            ]
          }
        ],
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignCraftingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignCraftingResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "ImmutableApiKey": {
        "x-go-name": "ImmutableApiKey",
        "type": "apiKey",
        "in": "header",
        "name": "x-immutable-api-key"
      }
    },
    "parameters": {
      "ChainName": {
        "name": "chain_name",
        "description": "The name of chain",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ChainName"
        },
        "examples": {
          "testnet": {
            "value": "imtbl-zkevm-testnet",
            "summary": "Immutable zkEVM Public Testnet"
          }
        }
      },
      "ContractAddress": {
        "name": "contract_address",
        "in": "path",
        "required": true,
        "description": "Contract address",
        "schema": {
          "$ref": "#/components/schemas/Address"
        }
      }
    },
    "responses": {
      "NotFound": {
        "description": "The specified resource was not found (404)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError404"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request (400)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError400"
            }
          }
        }
      },
      "UnauthorisedRequest": {
        "description": "Unauthorised Request (401)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError401"
            }
          }
        }
      },
      "ForbiddenRequest": {
        "description": "Forbidden Request (403)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError403"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict (409)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError409"
            }
          }
        }
      },
      "TooManyMetadataRefreshes": {
        "description": "Too Many Metadata refreshes (429)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError429"
            }
          }
        },
        "headers": {
          "imx-refreshes-limit": {
            "$ref": "#/components/headers/MetadataRefreshLimit"
          },
          "imx-refresh-limit-reset": {
            "$ref": "#/components/headers/MetadataRefreshLimitReset"
          },
          "imx-remaining-refreshes": {
            "$ref": "#/components/headers/MetadataRefreshLimitRemaining"
          },
          "Retry-After": {
            "$ref": "#/components/headers/MetadataRefreshRetryAfter"
          }
        }
      },
      "TooManyMintRequests": {
        "description": "Too Many mint requests (429)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError429"
            }
          }
        },
        "headers": {
          "imx-mint-requests-limit": {
            "$ref": "#/components/headers/MintRequestsLimit"
          },
          "imx-mint-requests-limit-reset": {
            "$ref": "#/components/headers/MintRequestsLimitReset"
          },
          "imx-remaining-mint-requests": {
            "$ref": "#/components/headers/MintRequestsLimitRemaining"
          },
          "imx-mint-requests-retry-after": {
            "$ref": "#/components/headers/MintRequestsRetryAfter"
          },
          "Retry-After": {
            "$ref": "#/components/headers/MintRequestsRetryAfter"
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error (500)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError500"
            }
          }
        }
      }
    },
    "headers": {
      "MetadataRefreshLimit": {
        "description": "The refresh request limit available to the project for each one-hour window.",
        "schema": {
          "type": "string"
        }
      },
      "MetadataRefreshLimitReset": {
        "description": "The expiry date of the current one-hour window.",
        "schema": {
          "type": "string"
        }
      },
      "MetadataRefreshLimitRemaining": {
        "description": "The number of refresh requests remaining in the current window.",
        "schema": {
          "type": "string"
        }
      },
      "MetadataRefreshRetryAfter": {
        "description": "The number of seconds until the next refresh request can be made.",
        "schema": {
          "type": "string"
        }
      },
      "MintRequestsLimit": {
        "description": "The mint requests limit available to the project for each time window.",
        "schema": {
          "type": "string"
        }
      },
      "MintRequestsLimitReset": {
        "description": "The expiry date of the current time window.",
        "schema": {
          "type": "string"
        }
      },
      "MintRequestsLimitRemaining": {
        "description": "The number of mint requests remaining in the current window.",
        "schema": {
          "type": "string"
        }
      },
      "MintRequestsRetryAfter": {
        "description": "The number of seconds until the next refresh request can be made.",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "PageSize": {
        "type": "integer",
        "format": "int32",
        "description": "Maximum number of items to return",
        "minimum": 1,
        "default": 100,
        "maximum": 200,
        "example": 10
      },
      "PageCursor": {
        "type": "string",
        "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
        "example": "ewogICJ0eXBlIjogInByZXYiLAogICJpdGVtIjogewogICAgImlkIjogNjI3NTEzMCwKICAgICJjcmVhdGVkX2F0IjogIjIwMjItMDktMTNUMTc6MDQ6MTIuMDI0MTI2WiIKICB9Cn0="
      },
      "Page": {
        "type": "object",
        "description": "Pagination properties",
        "properties": {
          "previous_cursor": {
            "type": "string",
            "nullable": true,
            "description": "First item as an encoded string",
            "example": "ewogICJ0eXBlIjogInByZXYiLAogICJpdGVtIjogewogICAgImlkIjogNjI3NTEzMCwKICAgICJjcmVhdGVkX2F0IjogIjIwMjItMDktMTNUMTc6MDQ6MTIuMDI0MTI2WiIKICB9Cn0="
          },
          "next_cursor": {
            "type": "string",
            "nullable": true,
            "description": "Last item as an encoded string",
            "example": "ewogICJ0eXBlIjogInByZXYiLAogICJpdGVtIjogewogICAgImlkIjogNjI3NTEzMCwKICAgICJjcmVhdGVkX2F0IjogIjIwMjItMDktMTNUMTc6MDQ6MTIuMDI0MTI2WiIKICB9Cn0="
          }
        },
        "required": [
          "previous_cursor",
          "next_cursor"
        ]
      },
      "ActivityType": {
        "description": "The activity type",
        "example": "mint",
        "type": "string",
        "enum": [
          "mint",
          "burn",
          "transfer",
          "sale",
          "deposit",
          "withdrawal"
        ]
      },
      "ActivityNFT": {
        "type": "object",
        "properties": {
          "contract_type": {
            "$ref": "#/components/schemas/NFTContractType"
          },
          "contract_address": {
            "description": "The token contract address",
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "token_id": {
            "description": "An `uint256` token id as string",
            "type": "string",
            "example": "1"
          },
          "amount": {
            "description": "(deprecated - will never be filled, use amount on Activity instead) The amount of tokens exchanged",
            "type": "string",
            "example": "1",
            "deprecated": true
          }
        },
        "required": [
          "contract_type",
          "contract_address",
          "token_id",
          "amount"
        ]
      },
      "ActivityToken": {
        "type": "object",
        "properties": {
          "contract_type": {
            "$ref": "#/components/schemas/TokenContractType"
          },
          "contract_address": {
            "description": "The contract address",
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          }
        },
        "required": [
          "contract_type",
          "contract_address"
        ]
      },
      "ActivityAsset": {
        "description": "The contract and asset details for this activity",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ActivityNFT"
          },
          {
            "$ref": "#/components/schemas/ActivityToken"
          }
        ],
        "discriminator": {
          "propertyName": "contract_type"
        }
      },
      "Address": {
        "x-go-type": "common.Address",
        "x-go-type-import": {
          "path": "github.com/ethereum/go-ethereum/common",
          "name": "common"
        },
        "description": "An Ethereum address",
        "type": "string",
        "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3",
        "pattern": "^0x[a-fA-F0-9]{40}$"
      },
      "Mint": {
        "type": "object",
        "description": "The mint activity details",
        "properties": {
          "to": {
            "description": "The account address the asset was minted to",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The minted amount",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "to",
          "amount",
          "asset"
        ]
      },
      "Deposit": {
        "type": "object",
        "description": "The deposit activity details",
        "properties": {
          "to": {
            "description": "The account address the asset was deposited to",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The deposited amount",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "to",
          "amount",
          "asset"
        ]
      },
      "Burn": {
        "description": "The burn activity details",
        "type": "object",
        "properties": {
          "from": {
            "description": "The account address the asset was transferred from",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The amount of assets burnt",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "from",
          "amount",
          "asset"
        ]
      },
      "Withdrawal": {
        "description": "The withdrawal activity details",
        "type": "object",
        "properties": {
          "from": {
            "description": "The account address the asset was withdrawn from",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The amount of assets withdrawn",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "from",
          "amount",
          "asset"
        ]
      },
      "Transfer": {
        "type": "object",
        "description": "The transfer activity details",
        "properties": {
          "from": {
            "description": "The account address the asset was transferred from",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "to": {
            "description": "The account address the asset was transferred to",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The amount of assets transferred",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "activity_type",
          "from",
          "to",
          "amount",
          "asset"
        ]
      },
      "ActivityNativeToken": {
        "type": "object",
        "properties": {
          "symbol": {
            "description": "The token symbol",
            "type": "string",
            "example": "ETH"
          }
        },
        "required": [
          "symbol"
        ]
      },
      "SalePayment": {
        "type": "object",
        "properties": {
          "token": {
            "description": "The type of payment token",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ActivityToken"
              },
              {
                "$ref": "#/components/schemas/ActivityNativeToken"
              }
            ]
          },
          "price_excluding_fees": {
            "description": "The base price of the sale not including any fees",
            "type": "string",
            "example": "180"
          },
          "price_including_fees": {
            "description": "The total price of the sale. Includes the sum of all fees",
            "type": "string",
            "example": "200"
          },
          "fees": {
            "description": "The fees associated with this sale",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleFee"
            },
            "example": [
              {
                "address": "0xB0F3749458169B7Ad51B5503CC3649DE55c2D0D2",
                "amount": "20",
                "type": "ROYALTY"
              }
            ],
            "minItems": 0
          }
        },
        "required": [
          "token",
          "price_excluding_fees",
          "price_including_fees",
          "fees"
        ]
      },
      "SaleFee": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Fee payable to recipient upon settlement",
            "example": "200"
          },
          "type": {
            "type": "string",
            "description": "Fee type",
            "example": "ROYALTY",
            "enum": [
              "ROYALTY"
            ]
          },
          "recipient": {
            "type": "string",
            "description": "Wallet address of fee recipient",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233"
          }
        }
      },
      "NFTSale": {
        "description": "The NFT Sale activity details",
        "type": "object",
        "properties": {
          "order_id": {
            "description": "The id of order",
            "type": "string",
            "example": "ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "to": {
            "description": "The account address of buyer",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "from": {
            "description": "The account address of seller",
            "type": "string",
            "example": "0xbD6cFcf93474De653d7B42b346c7c25d1F9c559C"
          },
          "asset": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityNFT"
            }
          },
          "payment": {
            "$ref": "#/components/schemas/SalePayment"
          }
        },
        "required": [
          "order_id",
          "to",
          "from",
          "asset",
          "payment"
        ]
      },
      "ActivityDetails": {
        "description": "The activity details",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Mint"
          },
          {
            "$ref": "#/components/schemas/Burn"
          },
          {
            "$ref": "#/components/schemas/Transfer"
          },
          {
            "$ref": "#/components/schemas/NFTSale"
          },
          {
            "$ref": "#/components/schemas/Deposit"
          },
          {
            "$ref": "#/components/schemas/Withdrawal"
          }
        ]
      },
      "BlockchainMetadata": {
        "description": "The metadata related to blockchain transaction",
        "nullable": true,
        "type": "object",
        "properties": {
          "transaction_hash": {
            "type": "string",
            "description": "The transaction hash of the activity",
            "example": "0x68d9eac5e3b3c3580404989a4030c948a78e1b07b2b5ea5688d8c38a6c61c93e"
          },
          "block_number": {
            "description": "EVM block number (uint64 as string)",
            "type": "string",
            "example": "1"
          },
          "transaction_index": {
            "description": "Transaction index in a block (uint32 as string)",
            "type": "string",
            "example": "1"
          },
          "log_index": {
            "description": "The log index of activity in a block (uint32 as string)",
            "type": "string",
            "nullable": true,
            "example": "1"
          }
        },
        "required": [
          "transaction_hash",
          "block_number",
          "transaction_index",
          "log_index"
        ]
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ActivityID"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "type": {
            "$ref": "#/components/schemas/ActivityType"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetails"
          },
          "updated_at": {
            "type": "string",
            "description": "The time activity was updated at",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "indexed_at": {
            "type": "string",
            "description": "The time activity was indexed",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "blockchain_metadata": {
            "$ref": "#/components/schemas/BlockchainMetadata"
          }
        },
        "required": [
          "id",
          "chain",
          "type",
          "details",
          "indexed_at",
          "updated_at",
          "blockchain_metadata"
        ]
      },
      "ListActivitiesResult": {
        "type": "object",
        "description": "List activities response",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of activities",
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "GetActivityResult": {
        "type": "object",
        "description": "Single activity",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Activity"
          }
        },
        "required": [
          "result"
        ]
      },
      "Collection": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the collection",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "symbol": {
            "type": "string",
            "nullable": true,
            "description": "The symbol of contract",
            "example": "BASP"
          },
          "contract_type": {
            "$ref": "#/components/schemas/CollectionContractType"
          },
          "contract_address": {
            "type": "string",
            "description": "The address of the contract",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of collection",
            "example": "Some description"
          },
          "image": {
            "type": "string",
            "description": "The url of the collection image",
            "example": "https://some-url",
            "nullable": true
          },
          "external_link": {
            "type": "string",
            "description": "The url of external link",
            "example": "https://some-url",
            "nullable": true
          },
          "contract_uri": {
            "type": "string",
            "description": "The uri for the metadata of the collection",
            "example": "https://some-url",
            "nullable": true
          },
          "base_uri": {
            "type": "string",
            "nullable": true,
            "description": "The metadata uri for nft",
            "example": "https://some-url"
          },
          "verification_status": {
            "$ref": "#/components/schemas/AssetVerificationStatus"
          },
          "indexed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection was first indexed"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection was last updated"
          },
          "metadata_synced_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection metadata was last synced"
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "contract_type",
          "contract_address",
          "description",
          "image",
          "external_link",
          "base_uri",
          "metadata_uri",
          "indexed_at",
          "updated_at",
          "metadata_synced_at",
          "verification_status"
        ]
      },
      "ListCollectionsResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of collections",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collection"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "GetCollectionResult": {
        "type": "object",
        "description": "Single Collection",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Collection"
          }
        },
        "required": [
          "result"
        ]
      },
      "GetMetadataResult": {
        "type": "object",
        "description": "Single metadata",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "required": [
          "result"
        ]
      },
      "ListMetadataResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of metadata",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/MetadataID"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "contract_address": {
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e",
            "description": "The contract address of the metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the metadata was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the metadata was last updated",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Sword",
            "description": "The name of the NFT"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "The description of the NFT"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "description": "The image url of the NFT",
            "example": "https://some-url"
          },
          "external_url": {
            "type": "string",
            "nullable": true,
            "description": "The external website link of NFT",
            "example": "https://some-url"
          },
          "animation_url": {
            "type": "string",
            "nullable": true,
            "description": "The animation url of the NFT",
            "example": "https://some-url"
          },
          "youtube_url": {
            "type": "string",
            "nullable": true,
            "description": "The youtube URL of NFT",
            "example": "https://some-url"
          },
          "attributes": {
            "type": "array",
            "description": "List of Metadata attributes",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NFTMetadataAttribute"
            }
          }
        },
        "required": [
          "id",
          "chain",
          "contract_address",
          "created_at",
          "updated_at",
          "name",
          "description",
          "image",
          "external_link",
          "animation_url",
          "youtube_url",
          "attributes"
        ]
      },
      "RefreshMetadataByIDRequest": {
        "type": "object",
        "description": "Request body for refreshing metadata by id. Total size of this list should not exceed 228 KiB",
        "properties": {
          "metadata": {
            "type": "array",
            "maxItems": 10,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/RefreshMetadataByID"
            }
          }
        },
        "required": [
          "metadata"
        ]
      },
      "NFT": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_id": {
            "type": "string",
            "example": "1",
            "description": "An `uint256` token id as string"
          },
          "contract_address": {
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e",
            "description": "The contract address of the NFT"
          },
          "contract_type": {
            "$ref": "#/components/schemas/NFTContractType"
          },
          "indexed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT was first indexed"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT owner was last updated"
          },
          "metadata_synced_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When NFT metadata was last synced",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "metadata_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "The id of the metadata of this NFT",
            "example": "ae83bc80-4dd5-11ee-be56-0242ac120002"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Sword",
            "description": "The name of the NFT"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "The description of the NFT"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "description": "The image url of the NFT",
            "example": "https://some-url"
          },
          "external_link": {
            "deprecated": true,
            "type": "string",
            "nullable": true,
            "description": "(deprecated - use external_url instead) The external website link of NFT",
            "example": "https://some-url"
          },
          "external_url": {
            "type": "string",
            "nullable": true,
            "description": "The external website link of NFT",
            "example": "https://some-url"
          },
          "animation_url": {
            "type": "string",
            "nullable": true,
            "description": "The animation url of the NFT",
            "example": "https://some-url"
          },
          "youtube_url": {
            "type": "string",
            "nullable": true,
            "description": "The youtube URL of NFT",
            "example": "https://some-url"
          },
          "attributes": {
            "type": "array",
            "description": "List of NFT Metadata attributes",
            "items": {
              "$ref": "#/components/schemas/NFTMetadataAttribute"
            }
          },
          "total_supply": {
            "type": "string",
            "nullable": true,
            "description": "The total supply of NFT",
            "example": "100"
          }
        },
        "required": [
          "chain",
          "token_id",
          "contract_address",
          "indexed_at",
          "updated_at",
          "metadata_synced_at",
          "name",
          "description",
          "image",
          "external_link",
          "external_url",
          "animation_url",
          "youtube_url",
          "attributes",
          "contract_type"
        ]
      },
      "NFTWithBalance": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_id": {
            "type": "string",
            "example": "1",
            "description": "An `uint256` token id as string"
          },
          "contract_address": {
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e",
            "description": "The contract address of the NFT"
          },
          "contract_type": {
            "$ref": "#/components/schemas/NFTContractType"
          },
          "indexed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT was first indexed"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT owner was last updated"
          },
          "metadata_synced_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When NFT metadata was last synced",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "metadata_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "The id of the metadata of this NFT",
            "example": "ae83bc80-4dd5-11ee-be56-0242ac120002"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the NFT",
            "example": "Sword"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of the NFT",
            "example": "This is a super awesome sword"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "description": "The image url of the NFT",
            "example": "https://some-url"
          },
          "external_link": {
            "type": "string",
            "nullable": true,
            "description": "The external website link of NFT",
            "example": "https://some-url"
          },
          "animation_url": {
            "type": "string",
            "nullable": true,
            "description": "The animation url of the NFT",
            "example": "https://some-url"
          },
          "youtube_url": {
            "type": "string",
            "nullable": true,
            "description": "The youtube URL of NFT",
            "example": "https://some-url"
          },
          "attributes": {
            "type": "array",
            "description": "List of Metadata attributes",
            "nullable": false,
            "items": {
              "$ref": "#/components/schemas/NFTMetadataAttribute"
            }
          },
          "balance": {
            "type": "string",
            "nullable": false,
            "description": "The amount of this NFT this account owns",
            "example": "11"
          }
        },
        "required": [
          "chain",
          "token_id",
          "contract_address",
          "indexed_at",
          "updated_at",
          "metadata_synced_at",
          "name",
          "description",
          "image",
          "external_link",
          "animation_url",
          "youtube_url",
          "balance",
          "contract_type",
          "attributes"
        ]
      },
      "NFTMetadataAttribute": {
        "type": "object",
        "properties": {
          "display_type": {
            "description": "Display type for this attribute",
            "nullable": true,
            "type": "string",
            "enum": [
              "number",
              "boost_percentage",
              "boost_number",
              "date"
            ],
            "example": "number"
          },
          "trait_type": {
            "description": "The metadata trait type",
            "type": "string",
            "example": "Aqua Power"
          },
          "value": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "The metadata trait value",
            "example": "Happy"
          }
        },
        "required": [
          "trait_type",
          "value"
        ]
      },
      "ChainName": {
        "type": "string",
        "description": "The name of chain",
        "example": "imtbl-zkevm-testnet"
      },
      "ActivityID": {
        "description": "Activity id in UUIDv4 format",
        "type": "string",
        "format": "uuid",
        "example": "4e28df8d-f65c-4c11-ba04-6a9dd47b179b"
      },
      "MetadataID": {
        "description": "Metadata id in UUIDv4 format",
        "type": "string",
        "format": "uuid",
        "example": "4e28df8d-f65c-4c11-ba04-6a9dd47b179b"
      },
      "CollectionContractType": {
        "description": "The collection contract type",
        "type": "string",
        "enum": [
          "ERC721",
          "ERC1155"
        ]
      },
      "NFTContractType": {
        "description": "The contract type for an NFT",
        "type": "string",
        "enum": [
          "ERC721",
          "ERC1155"
        ]
      },
      "TokenContractType": {
        "description": "The contract type for a token",
        "type": "string",
        "enum": [
          "ERC20"
        ]
      },
      "AssetVerificationStatus": {
        "description": "The verification status for a given contract",
        "type": "string",
        "enum": [
          "verified",
          "unverified",
          "spam",
          "inactive"
        ]
      },
      "GetNFTResult": {
        "type": "object",
        "description": "Single NFT",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/NFT"
          }
        },
        "required": [
          "result"
        ]
      },
      "ListNFTsResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of NFTs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFT"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "ListNFTsByOwnerResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of NFTs by owner",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFTWithBalance"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "NFTOwner": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "contract_address": {
            "type": "string",
            "description": "The address of NFT contract",
            "example": "0x5a019874f4fae314b0eaa4606be746366e661306"
          },
          "token_id": {
            "type": "string",
            "description": "An `uint256` token id as string",
            "example": "1"
          },
          "account_address": {
            "type": "string",
            "description": "The account address of the owner of the NFT",
            "example": "0x5a019874f4fae314b0eaa4606be746366e661306"
          },
          "balance": {
            "type": "string",
            "description": "The amount of owned tokens (uint256 as string)",
            "example": "1"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT owner was last updated"
          }
        },
        "required": [
          "chain",
          "contract_address",
          "token_id",
          "account_address",
          "balance"
        ]
      },
      "NFTWithOwner": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "contract_address": {
            "type": "string",
            "description": "The address of NFT contract",
            "example": "0x5a019874f4fae314b0eaa4606be746366e661306"
          },
          "token_id": {
            "type": "string",
            "description": "An `uint256` token id as string",
            "example": "1"
          },
          "account_address": {
            "type": "string",
            "description": "The account address of the owner of the NFT",
            "example": "0x5a019874f4fae314b0eaa4606be746366e661306"
          },
          "balance": {
            "type": "string",
            "description": "The amount of owned tokens (uint256 as string)",
            "example": "1"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the owner last changed for the given NFT"
          }
        },
        "required": [
          "chain",
          "contract_address",
          "token_id",
          "account_address",
          "balance",
          "updated_at"
        ]
      },
      "GetTokenResult": {
        "type": "object",
        "description": "Single Token",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "required": [
          "result"
        ]
      },
      "ListNFTOwnersResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of nft owners",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFTOwner"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "ListCollectionOwnersResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of NFT owners",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFTWithOwner"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "ChainWithDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Chain"
          },
          {
            "type": "object",
            "properties": {
              "rpc_url": {
                "type": "string",
                "nullable": true,
                "description": "URL for RPC node"
              }
            },
            "required": [
              "rpc_url"
            ]
          }
        ]
      },
      "Chain": {
        "type": "object",
        "description": "The chain details",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of chain",
            "example": "eip155:13372"
          },
          "name": {
            "type": "string",
            "description": "The name of chain",
            "example": "imtbl-zkevm-testnet"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ListChainsResult": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of chains",
            "items": {
              "$ref": "#/components/schemas/ChainWithDetails"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "ListTokensResult": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of tokens",
            "items": {
              "$ref": "#/components/schemas/Token"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "RefreshMetadataByID": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RefreshableNFTAttributes"
          },
          {
            "type": "object",
            "properties": {
              "metadata_id": {
                "$ref": "#/components/schemas/MetadataID"
              }
            },
            "required": [
              "metadata_id"
            ]
          }
        ]
      },
      "RefreshMetadataByTokenID": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RefreshableNFTAttributes"
          },
          {
            "type": "object",
            "properties": {
              "token_id": {
                "type": "string",
                "description": "An `uint256` token id as string",
                "example": "1"
              }
            },
            "required": [
              "token_id"
            ]
          }
        ]
      },
      "RefreshableNFTAttributes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NFTMetadataRequest"
          }
        ],
        "required": [
          "name",
          "description",
          "image",
          "external_url",
          "animation_url",
          "youtube_url",
          "attributes"
        ]
      },
      "NFTMetadataRequest": {
        "type": "object",
        "description": "The NFT metadata. Total size of this object should not exceed 16 KiB",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Sword",
            "description": "The name of the NFT"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "The description of the NFT"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "description": "The image url of the NFT",
            "example": "https://some-url"
          },
          "external_url": {
            "type": "string",
            "nullable": true,
            "description": "The external link of the NFT",
            "example": "https://some-url"
          },
          "animation_url": {
            "type": "string",
            "nullable": true,
            "description": "The animation url of the NFT",
            "example": "https://some-url"
          },
          "youtube_url": {
            "type": "string",
            "nullable": true,
            "description": "The youtube link of the NFT",
            "example": "https://some-url"
          },
          "attributes": {
            "type": "array",
            "description": "List of Metadata attributes",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NFTMetadataAttribute"
            }
          }
        }
      },
      "RefreshNFTMetadataByTokenIDRequest": {
        "type": "object",
        "properties": {
          "nft_metadata": {
            "type": "array",
            "description": "List of nft metadata to be refreshed. Total size of the list should not exceed 228 KiB",
            "maxItems": 250,
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/RefreshMetadataByTokenID"
            }
          }
        },
        "required": [
          "nft_metadata"
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "contract_address": {
            "type": "string",
            "description": "The address of token contract",
            "example": "0xc344c05eef8876e517072f879dae8905aa2b956b"
          },
          "root_contract_address": {
            "type": "string",
            "description": "The address of root token contract",
            "example": "0x43e60b30d5bec48c0f5890e3d1e9f1b1296bb4aa",
            "nullable": true
          },
          "root_chain_id": {
            "type": "string",
            "description": "The id of the root chain for a bridged token",
            "example": "eip155:1",
            "nullable": true
          },
          "bridge_used": {
            "type": "string",
            "description": "The name of the bridge, for bridged tokens only",
            "example": "axelar",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of token",
            "example": "AAA",
            "nullable": true
          },
          "decimals": {
            "type": "integer",
            "description": "The decimals of token",
            "example": 18,
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "description": "The image url of token",
            "example": "https://some-url",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of token",
            "example": "Token A",
            "nullable": true
          },
          "verification_status": {
            "$ref": "#/components/schemas/AssetVerificationStatus"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection was last updated"
          },
          "is_canonical": {
            "type": "boolean",
            "example": true,
            "description": "Indicates whether the token is canonical or not"
          }
        },
        "required": [
          "chain",
          "contract_address",
          "root_contract_address",
          "symbol",
          "decimals",
          "image_url",
          "name",
          "updated_at",
          "verification_status",
          "is_canonical"
        ]
      },
      "CollectionMetadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the collection",
            "example": "Gigantic Lizards"
          },
          "symbol": {
            "type": "string",
            "nullable": true,
            "description": "The symbol of contract",
            "example": "GLZ"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of collection",
            "example": "This is the Gigantic Lizards collection"
          },
          "image": {
            "type": "string",
            "description": "The url of the collection image",
            "example": "https://some-url",
            "nullable": true
          },
          "external_link": {
            "type": "string",
            "description": "The url of external link",
            "example": "https://some-url",
            "nullable": true
          },
          "contract_uri": {
            "type": "string",
            "description": "The uri for the metadata of the collection",
            "example": "https://some-url",
            "nullable": true
          },
          "base_uri": {
            "type": "string",
            "nullable": true,
            "description": "The metadata uri for nft",
            "example": "https://some-url"
          }
        },
        "required": [
          "name",
          "image",
          "symbol",
          "description",
          "base_uri",
          "external_link",
          "contract_uri"
        ]
      },
      "RefreshCollectionMetadataRequest": {
        "type": "object",
        "properties": {
          "collection_metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          }
        },
        "required": [
          "collection_metadata"
        ]
      },
      "RefreshCollectionMetadataResult": {
        "type": "object",
        "properties": {
          "contract_address": {
            "type": "string"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "collection_metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          }
        },
        "required": [
          "contract_address",
          "chain",
          "collection_metadata"
        ]
      },
      "MetadataRefreshRateLimitResult": {
        "type": "object",
        "properties": {
          "imx_refreshes_limit": {
            "type": "string"
          },
          "imx_refresh_limit_reset": {
            "type": "string"
          },
          "imx_remaining_refreshes": {
            "type": "string"
          },
          "retry_after": {
            "type": "string"
          }
        },
        "required": [
          "imx_refreshes_limit",
          "imx_refresh_limit_reset",
          "imx_remaining_refreshes",
          "retry_after"
        ]
      },
      "CreateMintRequestRequest": {
        "type": "object",
        "properties": {
          "assets": {
            "type": "array",
            "maxItems": 100,
            "minItems": 1,
            "description": "List of nft to be minted",
            "items": {
              "$ref": "#/components/schemas/MintAsset"
            }
          }
        },
        "required": [
          "assets"
        ]
      },
      "MintAsset": {
        "type": "object",
        "properties": {
          "reference_id": {
            "type": "string",
            "description": "The id of this asset in the system that originates the mint request",
            "example": "67f7d464-b8f0-4f6a-9a3b-8d3cb4a21af0"
          },
          "owner_address": {
            "type": "string",
            "description": "The address of the receiver",
            "example": "0xc344c05eef8876e517072f879dae8905aa2b956b"
          },
          "token_id": {
            "type": "string",
            "description": "An optional `uint256` token id as string. Required for ERC1155 collections.",
            "example": "1",
            "nullable": true
          },
          "amount": {
            "type": "string",
            "description": "Optional mount of tokens to mint. Required for ERC1155 collections. ERC712 collections can omit this field or set it to 1",
            "example": "1",
            "nullable": true,
            "minLength": 1
          },
          "metadata": {
            "$ref": "#/components/schemas/NFTMetadataRequest"
          }
        },
        "required": [
          "reference_id",
          "owner_address"
        ]
      },
      "CreateMintRequestResult": {
        "type": "object",
        "properties": {
          "imx_mint_requests_limit": {
            "type": "string"
          },
          "imx_mint_requests_limit_reset": {
            "type": "string"
          },
          "imx_remaining_mint_requests": {
            "type": "string"
          },
          "imx_mint_requests_retry_after": {
            "type": "string"
          }
        },
        "required": [
          "imx_mint_requests_limit",
          "imx_mint_requests_limit_reset",
          "imx_remaining_mint_requests",
          "imx_mint_requests_retry_after"
        ]
      },
      "ListMintRequestsResult": {
        "type": "object",
        "description": "List mint requests",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of mint requests",
            "items": {
              "$ref": "#/components/schemas/GetMintRequestResult"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "GetMintRequestResult": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "collection_address": {
            "type": "string",
            "description": "The address of the contract",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "reference_id": {
            "type": "string",
            "description": "The reference id of this mint request"
          },
          "owner_address": {
            "type": "string",
            "description": "The address of the owner of the NFT"
          },
          "token_id": {
            "type": "string",
            "example": "1",
            "nullable": true,
            "description": "An `uint256` token id as string. Only available when the mint request succeeds"
          },
          "amount": {
            "type": "string",
            "example": "1",
            "nullable": true,
            "description": "An `uint256` amount as string. Only relevant for mint requests on ERC1155 contracts"
          },
          "activity_id": {
            "type": "string",
            "format": "uuid",
            "example": "4e28df8d-f65c-4c11-ba04-6a9dd47b179b",
            "nullable": true,
            "description": "The id of the mint activity associated with this mint request"
          },
          "transaction_hash": {
            "type": "string",
            "nullable": true,
            "description": "The transaction hash of the activity",
            "example": "0x68d9eac5e3b3c3580404989a4030c948a78e1b07b2b5ea5688d8c38a6c61c93e"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the mint request was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the mint request was last updated",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "error": {
            "$ref": "#/components/schemas/MintRequestErrorMessage"
          },
          "status": {
            "$ref": "#/components/schemas/MintRequestStatus"
          }
        },
        "required": [
          "chain",
          "collection_address",
          "reference_id",
          "owner_address",
          "status",
          "token_id",
          "transaction_hash",
          "error",
          "created_at",
          "updated_at"
        ]
      },
      "MintRequestErrorMessage": {
        "type": "object",
        "description": "The error details in case the mint request fails",
        "nullable": true,
        "properties": {
          "message": {
            "description": "An error message in case the mint request fails",
            "type": "string"
          }
        }
      },
      "MintRequestStatus": {
        "description": "The status of the mint request",
        "example": "pending",
        "type": "string",
        "enum": [
          "pending",
          "succeeded",
          "failed"
        ]
      },
      "Call": {
        "type": "object",
        "properties": {
          "target_address": {
            "$ref": "#/components/schemas/Address"
          },
          "function_signature": {
            "type": "string",
            "description": "The function signature",
            "example": "mint(address,uint256)"
          },
          "function_args": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The function arguments",
            "example": [
              "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e",
              "1"
            ]
          }
        },
        "required": [
          "target_address",
          "function_signature",
          "function_args"
        ]
      },
      "SignCraftingRequest": {
        "type": "object",
        "properties": {
          "multi_caller": {
            "type": "object",
            "properties": {
              "address": {
                "$ref": "#/components/schemas/Address"
              },
              "name": {
                "type": "string",
                "description": "The name of the multicaller contract",
                "example": "Multicaller"
              },
              "version": {
                "type": "string",
                "description": "The version of the multicaller contract",
                "example": "1"
              }
            },
            "required": [
              "address",
              "name",
              "version"
            ]
          },
          "reference_id": {
            "type": "string",
            "description": "The id of this request in the system that originates the crafting request, specified as a 32 byte hex string",
            "example": "67f7d464b8f04f6a9a3b8d3cb4a21af0"
          },
          "calls": {
            "type": "array",
            "description": "The calls to be signed",
            "items": {
              "$ref": "#/components/schemas/Call"
            },
            "minLength": 1,
            "maxLength": 100
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration time of the request",
            "example": "2022-08-16T17:43:26.991388Z"
          }
        },
        "required": [
          "multi_caller",
          "reference_id",
          "calls",
          "expires_at"
        ]
      },
      "SignCraftingResult": {
        "type": "object",
        "properties": {
          "signer_address": {
            "$ref": "#/components/schemas/Address"
          },
          "signature": {
            "type": "string",
            "description": "The signature of the request",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          }
        },
        "required": [
          "signer_address",
          "signature"
        ]
      },
      "BasicAPIError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error Message",
            "example": "all fields must be provided"
          },
          "link": {
            "type": "string",
            "description": "Link to IMX documentation that can help resolve this error",
            "example": "https://docs.x.immutable.com/reference/#/"
          },
          "trace_id": {
            "type": "string",
            "description": "Trace ID of the initial request",
            "example": "e47634b79a5cd6894ddc9639ec4aad26"
          }
        },
        "required": [
          "message",
          "link",
          "trace_id"
        ]
      },
      "APIError400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "VALIDATION_ERROR"
                ],
                "example": "VALIDATION_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "RESOURCE_NOT_FOUND"
                ],
                "example": "RESOURCE_NOT_FOUND"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "INTERNAL_SERVER_ERROR"
                ],
                "example": "INTERNAL_SERVER_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError401": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "UNAUTHORISED_REQUEST"
                ],
                "example": "UNAUTHORISED_REQUEST"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "AUTHENTICATION_ERROR"
                ],
                "example": "AUTHENTICATION_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError429": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "TOO_MANY_REQUESTS_ERROR"
                ],
                "example": "TOO_MANY_REQUESTS_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError409": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "CONFLICT_ERROR"
                ],
                "example": "CONFLICT_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error",
                "additionalProperties": true
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      }
    }
  }
}
