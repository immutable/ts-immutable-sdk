/* tslint:disable */
/* eslint-disable */
/**
 * TEE Express
 *  TEE Express is a service that simplifies wallet management for developers. Unlike traditional wallet solutions that require complex key management, TEE Express handles all key management internally, providing a streamlined API for wallet operations. TEE Express leverages secure enclave technology to ensure that private keys never leave the secure environment. All wallet operations, including creation, signing, and key management, are performed within a trusted execution environment (TEE). This provides enterprise-grade security while maintaining the simplicity of a REST API.  The service supports Ethereum wallets and provides endpoints for wallet creation, transaction signing, and message signing. All operations are authenticated using JWT tokens passed in the Authorization header, ensuring secure access to user wallets.  **Migration Notice:** If you\'re an existing customer, your users\' wallets have been automatically migrated to TEE Express. There\'s no action required on your part - all existing wallets are now accessible through the TEE Express API using the same JWT tokens you currently use for authentication.  Simply update your API calls to use the TEE Express endpoints, and pass your existing JWT token in the Authorization header for all requests.  **Authentication:** - An API key via the `X-Magic-API-Key` header or a secret key via the `X-Magic-Secret-Key` header. - The OIDC provider ID via the `X-OIDC-Provider-ID` header. - Bearer token in the `Authorization` header.  **Data Hashing for Signing:**  For signing messages, encode your data as base64:  ```typescript const message = Buffer.from(data, \'utf-8\').toString(\'base64\'); ```  For signing transaction data or other structured data, provide a keccak256 hash:  ```typescript import {   MessageTypes,   SignTypedDataVersion,   TypedDataUtils,   TypedDataV1,   TypedMessage,   typedSignatureHash, } from \'@metamask/eth-sig-util\'; import { resolveProperties, Signature, Transaction, TransactionLike, TransactionRequest } from \'ethers\';  const computeEip712Hash = (   data: TypedMessage<MessageTypes>,   version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4, ): string => {   const hashBuffer = TypedDataUtils.eip712Hash(data, version);   return \'0x\' + hashBuffer.toString(\'hex\'); };  const personalSign = async (data: string) => {   const message = Buffer.from(data, \'utf-8\').toString(\'base64\');   const body = { message_base64: message, chain: \'ETH\' };   return await fetch(\'/v1/wallet/sign/message\', { method: \'POST\', body: JSON.stringify(body) }); };  const signTypedDataV1 = async (data: TypedDataV1) => {   const rawDataHash = typedSignatureHash(data);   const body = { raw_data_hash: rawDataHash, chain: \'ETH\' };   return await fetch(\'/v1/wallet/sign/data\', { method: \'POST\', body: JSON.stringify(body) }); };  const signTypedDataV3 = async (data: TypedMessage<MessageTypes>) => {   const rawDataHash = computeEip712Hash(data, SignTypedDataVersion.V3);   const body = { raw_data_hash: rawDataHash, chain: \'ETH\' };   return await fetch(\'/v1/wallet/sign/data\', { method: \'POST\', body: JSON.stringify(body) }); };  const signTypedDataV4 = async (data: TypedMessage<MessageTypes>) => {   const rawDataHash = computeEip712Hash(data, SignTypedDataVersion.V4);   const body = { raw_data_hash: rawDataHash, chain: \'ETH\' };   return await fetch(\'/v1/wallet/sign/data\', { method: \'POST\', body: JSON.stringify(body) }); };  const signTransaction = async (tx: TransactionRequest) => {   const resolvedTx = await resolveProperties(tx);   const txForSigning = { ...resolvedTx };   delete txForSigning.from;    const btx = Transaction.from(txForSigning as TransactionLike);    const body = { raw_data_hash: btx.unsignedHash, chain: \'ETH\' };   const res = await fetch(\'/v1/wallet/sign/data\', { method: \'POST\', body: JSON.stringify(body) });   const { r, s, v } = res.json();   btx.signature = Signature.from({ r, s, v });   return btx.serialized; }; ``` 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Chain } from '../models';
// @ts-ignore
import { CreateWalletRequestModel } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { WalletResponseModel } from '../models';
/**
 * WalletApi - axios parameter creator
 * @export
 */
export const WalletApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new wallet for the given chain and returns its public address.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\"   }\' ```  **Example Response:** ```json {   \"public_address\": \"0x6b422EefBFBc47a6900A1fc5454Ef4b940B7e36e\" } ```
         * @summary Create a new wallet.
         * @param {CreateWalletRequestModel} createWalletRequestModel 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWalletV1WalletPost: async (createWalletRequestModel: CreateWalletRequestModel, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWalletRequestModel' is not null or undefined
            assertParamExists('createWalletV1WalletPost', 'createWalletRequestModel', createWalletRequestModel)
            const localVarPath = `/v1/wallet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xMagicAPIKey != null) {
                localVarHeaderParameter['X-Magic-API-Key'] = String(xMagicAPIKey);
            }

            if (xMagicSecretKey != null) {
                localVarHeaderParameter['X-Magic-Secret-Key'] = String(xMagicSecretKey);
            }

            if (xOIDCProviderID != null) {
                localVarHeaderParameter['X-OIDC-Provider-ID'] = String(xOIDCProviderID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWalletRequestModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the wallet\'s public address for the given chain.  **Example cURL:** ```bash curl -X GET \'https://tee.express.magiclabs.com/v1/wallet?chain=ETH\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' ```  **Example Response:** ```json {   \"public_address\": \"0x6b422EefBFBc47a6900A1fc5454Ef4b940B7e36e\" } ```
         * @summary Get wallet details.
         * @param {Chain} chain 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWalletV1WalletGet: async (chain: Chain, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chain' is not null or undefined
            assertParamExists('getWalletV1WalletGet', 'chain', chain)
            const localVarPath = `/v1/wallet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chain !== undefined) {
                localVarQueryParameter['chain'] = chain;
            }

            if (xMagicAPIKey != null) {
                localVarHeaderParameter['X-Magic-API-Key'] = String(xMagicAPIKey);
            }

            if (xMagicSecretKey != null) {
                localVarHeaderParameter['X-Magic-Secret-Key'] = String(xMagicSecretKey);
            }

            if (xOIDCProviderID != null) {
                localVarHeaderParameter['X-OIDC-Provider-ID'] = String(xOIDCProviderID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WalletApi - functional programming interface
 * @export
 */
export const WalletApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WalletApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new wallet for the given chain and returns its public address.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\"   }\' ```  **Example Response:** ```json {   \"public_address\": \"0x6b422EefBFBc47a6900A1fc5454Ef4b940B7e36e\" } ```
         * @summary Create a new wallet.
         * @param {CreateWalletRequestModel} createWalletRequestModel 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWalletV1WalletPost(createWalletRequestModel: CreateWalletRequestModel, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWalletV1WalletPost(createWalletRequestModel, xMagicAPIKey, xMagicSecretKey, xOIDCProviderID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the wallet\'s public address for the given chain.  **Example cURL:** ```bash curl -X GET \'https://tee.express.magiclabs.com/v1/wallet?chain=ETH\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' ```  **Example Response:** ```json {   \"public_address\": \"0x6b422EefBFBc47a6900A1fc5454Ef4b940B7e36e\" } ```
         * @summary Get wallet details.
         * @param {Chain} chain 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWalletV1WalletGet(chain: Chain, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWalletV1WalletGet(chain, xMagicAPIKey, xMagicSecretKey, xOIDCProviderID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WalletApi - factory interface
 * @export
 */
export const WalletApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WalletApiFp(configuration)
    return {
        /**
         * Creates a new wallet for the given chain and returns its public address.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\"   }\' ```  **Example Response:** ```json {   \"public_address\": \"0x6b422EefBFBc47a6900A1fc5454Ef4b940B7e36e\" } ```
         * @summary Create a new wallet.
         * @param {WalletApiCreateWalletV1WalletPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWalletV1WalletPost(requestParameters: WalletApiCreateWalletV1WalletPostRequest, options?: AxiosRequestConfig): AxiosPromise<WalletResponseModel> {
            return localVarFp.createWalletV1WalletPost(requestParameters.createWalletRequestModel, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the wallet\'s public address for the given chain.  **Example cURL:** ```bash curl -X GET \'https://tee.express.magiclabs.com/v1/wallet?chain=ETH\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' ```  **Example Response:** ```json {   \"public_address\": \"0x6b422EefBFBc47a6900A1fc5454Ef4b940B7e36e\" } ```
         * @summary Get wallet details.
         * @param {WalletApiGetWalletV1WalletGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWalletV1WalletGet(requestParameters: WalletApiGetWalletV1WalletGetRequest, options?: AxiosRequestConfig): AxiosPromise<WalletResponseModel> {
            return localVarFp.getWalletV1WalletGet(requestParameters.chain, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createWalletV1WalletPost operation in WalletApi.
 * @export
 * @interface WalletApiCreateWalletV1WalletPostRequest
 */
export interface WalletApiCreateWalletV1WalletPostRequest {
    /**
     * 
     * @type {CreateWalletRequestModel}
     * @memberof WalletApiCreateWalletV1WalletPost
     */
    readonly createWalletRequestModel: CreateWalletRequestModel

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateWalletV1WalletPost
     */
    readonly xMagicAPIKey?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateWalletV1WalletPost
     */
    readonly xMagicSecretKey?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiCreateWalletV1WalletPost
     */
    readonly xOIDCProviderID?: string
}

/**
 * Request parameters for getWalletV1WalletGet operation in WalletApi.
 * @export
 * @interface WalletApiGetWalletV1WalletGetRequest
 */
export interface WalletApiGetWalletV1WalletGetRequest {
    /**
     * 
     * @type {Chain}
     * @memberof WalletApiGetWalletV1WalletGet
     */
    readonly chain: Chain

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetWalletV1WalletGet
     */
    readonly xMagicAPIKey?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetWalletV1WalletGet
     */
    readonly xMagicSecretKey?: string

    /**
     * 
     * @type {string}
     * @memberof WalletApiGetWalletV1WalletGet
     */
    readonly xOIDCProviderID?: string
}

/**
 * WalletApi - object-oriented interface
 * @export
 * @class WalletApi
 * @extends {BaseAPI}
 */
export class WalletApi extends BaseAPI {
    /**
     * Creates a new wallet for the given chain and returns its public address.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\"   }\' ```  **Example Response:** ```json {   \"public_address\": \"0x6b422EefBFBc47a6900A1fc5454Ef4b940B7e36e\" } ```
     * @summary Create a new wallet.
     * @param {WalletApiCreateWalletV1WalletPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public createWalletV1WalletPost(requestParameters: WalletApiCreateWalletV1WalletPostRequest, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).createWalletV1WalletPost(requestParameters.createWalletRequestModel, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the wallet\'s public address for the given chain.  **Example cURL:** ```bash curl -X GET \'https://tee.express.magiclabs.com/v1/wallet?chain=ETH\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' ```  **Example Response:** ```json {   \"public_address\": \"0x6b422EefBFBc47a6900A1fc5454Ef4b940B7e36e\" } ```
     * @summary Get wallet details.
     * @param {WalletApiGetWalletV1WalletGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletApi
     */
    public getWalletV1WalletGet(requestParameters: WalletApiGetWalletV1WalletGetRequest, options?: AxiosRequestConfig) {
        return WalletApiFp(this.configuration).getWalletV1WalletGet(requestParameters.chain, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(this.axios, this.basePath));
    }
}

