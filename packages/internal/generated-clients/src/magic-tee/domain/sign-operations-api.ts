/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { SignDataRequest } from '../models';
// @ts-ignore
import { SignDataResponse } from '../models';
// @ts-ignore
import { SignMessageRequest } from '../models';
// @ts-ignore
import { SignMessageResponse } from '../models';
/**
 * SignOperationsApi - axios parameter creator
 * @export
 */
export const SignOperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Sign Data
         * @param {string} xMagicChain 
         * @param {SignDataRequest} signDataRequest 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signDataV1WalletSignDataPost: async (xMagicChain: string, signDataRequest: SignDataRequest, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xMagicChain' is not null or undefined
            assertParamExists('signDataV1WalletSignDataPost', 'xMagicChain', xMagicChain)
            // verify required parameter 'signDataRequest' is not null or undefined
            assertParamExists('signDataV1WalletSignDataPost', 'signDataRequest', signDataRequest)
            const localVarPath = `/v1/wallet/sign/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xMagicChain != null) {
                localVarHeaderParameter['X-Magic-Chain'] = String(xMagicChain);
            }

            if (xMagicAPIKey != null) {
                localVarHeaderParameter['X-Magic-API-Key'] = String(xMagicAPIKey);
            }

            if (xMagicSecretKey != null) {
                localVarHeaderParameter['X-Magic-Secret-Key'] = String(xMagicSecretKey);
            }

            if (xOIDCProviderID != null) {
                localVarHeaderParameter['X-OIDC-Provider-ID'] = String(xOIDCProviderID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign Message
         * @param {string} xMagicChain 
         * @param {SignMessageRequest} signMessageRequest 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signMessageV1WalletSignMessagePost: async (xMagicChain: string, signMessageRequest: SignMessageRequest, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xMagicChain' is not null or undefined
            assertParamExists('signMessageV1WalletSignMessagePost', 'xMagicChain', xMagicChain)
            // verify required parameter 'signMessageRequest' is not null or undefined
            assertParamExists('signMessageV1WalletSignMessagePost', 'signMessageRequest', signMessageRequest)
            const localVarPath = `/v1/wallet/sign/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xMagicChain != null) {
                localVarHeaderParameter['X-Magic-Chain'] = String(xMagicChain);
            }

            if (xMagicAPIKey != null) {
                localVarHeaderParameter['X-Magic-API-Key'] = String(xMagicAPIKey);
            }

            if (xMagicSecretKey != null) {
                localVarHeaderParameter['X-Magic-Secret-Key'] = String(xMagicSecretKey);
            }

            if (xOIDCProviderID != null) {
                localVarHeaderParameter['X-OIDC-Provider-ID'] = String(xOIDCProviderID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignOperationsApi - functional programming interface
 * @export
 */
export const SignOperationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignOperationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Sign Data
         * @param {string} xMagicChain 
         * @param {SignDataRequest} signDataRequest 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signDataV1WalletSignDataPost(xMagicChain: string, signDataRequest: SignDataRequest, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signDataV1WalletSignDataPost(xMagicChain, signDataRequest, xMagicAPIKey, xMagicSecretKey, xOIDCProviderID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign Message
         * @param {string} xMagicChain 
         * @param {SignMessageRequest} signMessageRequest 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signMessageV1WalletSignMessagePost(xMagicChain: string, signMessageRequest: SignMessageRequest, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signMessageV1WalletSignMessagePost(xMagicChain, signMessageRequest, xMagicAPIKey, xMagicSecretKey, xOIDCProviderID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignOperationsApi - factory interface
 * @export
 */
export const SignOperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignOperationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Sign Data
         * @param {SignOperationsApiSignDataV1WalletSignDataPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signDataV1WalletSignDataPost(requestParameters: SignOperationsApiSignDataV1WalletSignDataPostRequest, options?: AxiosRequestConfig): AxiosPromise<SignDataResponse> {
            return localVarFp.signDataV1WalletSignDataPost(requestParameters.xMagicChain, requestParameters.signDataRequest, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign Message
         * @param {SignOperationsApiSignMessageV1WalletSignMessagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signMessageV1WalletSignMessagePost(requestParameters: SignOperationsApiSignMessageV1WalletSignMessagePostRequest, options?: AxiosRequestConfig): AxiosPromise<SignMessageResponse> {
            return localVarFp.signMessageV1WalletSignMessagePost(requestParameters.xMagicChain, requestParameters.signMessageRequest, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for signDataV1WalletSignDataPost operation in SignOperationsApi.
 * @export
 * @interface SignOperationsApiSignDataV1WalletSignDataPostRequest
 */
export interface SignOperationsApiSignDataV1WalletSignDataPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignDataV1WalletSignDataPost
     */
    readonly xMagicChain: string

    /**
     * 
     * @type {SignDataRequest}
     * @memberof SignOperationsApiSignDataV1WalletSignDataPost
     */
    readonly signDataRequest: SignDataRequest

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignDataV1WalletSignDataPost
     */
    readonly xMagicAPIKey?: string

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignDataV1WalletSignDataPost
     */
    readonly xMagicSecretKey?: string

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignDataV1WalletSignDataPost
     */
    readonly xOIDCProviderID?: string
}

/**
 * Request parameters for signMessageV1WalletSignMessagePost operation in SignOperationsApi.
 * @export
 * @interface SignOperationsApiSignMessageV1WalletSignMessagePostRequest
 */
export interface SignOperationsApiSignMessageV1WalletSignMessagePostRequest {
    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignMessageV1WalletSignMessagePost
     */
    readonly xMagicChain: string

    /**
     * 
     * @type {SignMessageRequest}
     * @memberof SignOperationsApiSignMessageV1WalletSignMessagePost
     */
    readonly signMessageRequest: SignMessageRequest

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignMessageV1WalletSignMessagePost
     */
    readonly xMagicAPIKey?: string

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignMessageV1WalletSignMessagePost
     */
    readonly xMagicSecretKey?: string

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignMessageV1WalletSignMessagePost
     */
    readonly xOIDCProviderID?: string
}

/**
 * SignOperationsApi - object-oriented interface
 * @export
 * @class SignOperationsApi
 * @extends {BaseAPI}
 */
export class SignOperationsApi extends BaseAPI {
    /**
     * 
     * @summary Sign Data
     * @param {SignOperationsApiSignDataV1WalletSignDataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignOperationsApi
     */
    public signDataV1WalletSignDataPost(requestParameters: SignOperationsApiSignDataV1WalletSignDataPostRequest, options?: AxiosRequestConfig) {
        return SignOperationsApiFp(this.configuration).signDataV1WalletSignDataPost(requestParameters.xMagicChain, requestParameters.signDataRequest, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign Message
     * @param {SignOperationsApiSignMessageV1WalletSignMessagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignOperationsApi
     */
    public signMessageV1WalletSignMessagePost(requestParameters: SignOperationsApiSignMessageV1WalletSignMessagePostRequest, options?: AxiosRequestConfig) {
        return SignOperationsApiFp(this.configuration).signMessageV1WalletSignMessagePost(requestParameters.xMagicChain, requestParameters.signMessageRequest, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(this.axios, this.basePath));
    }
}

