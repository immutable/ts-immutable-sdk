/* tslint:disable */
/* eslint-disable */
/**
 * TEE Express
 *  TEE Express is a service that simplifies wallet management for developers. Unlike traditional wallet solutions that require complex key management, TEE Express handles all key management internally, providing a streamlined API for wallet operations. TEE Express leverages secure enclave technology to ensure that private keys never leave the secure environment. All wallet operations, including creation, signing, and key management, are performed within a trusted execution environment (TEE). This provides enterprise-grade security while maintaining the simplicity of a REST API.  The service supports Ethereum wallets and provides endpoints for wallet creation, transaction signing, and message signing. All operations are authenticated using JWT tokens passed in the Authorization header, ensuring secure access to user wallets.  **Migration Notice:** If you\'re an existing customer, your users\' wallets have been automatically migrated to TEE Express. There\'s no action required on your part - all existing wallets are now accessible through the TEE Express API using the same JWT tokens you currently use for authentication.  Simply update your API calls to use the TEE Express endpoints, and pass your existing JWT token in the Authorization header for all requests.  **Authentication:** - An API key via the `X-Magic-API-Key` header or a secret key via the `X-Magic-Secret-Key` header. - The OIDC provider ID via the `X-OIDC-Provider-ID` header. - Bearer token in the `Authorization` header.  **Data Hashing for Signing:**  For signing messages, encode your data as base64:  ```typescript const message = Buffer.from(data, \'utf-8\').toString(\'base64\'); ```  For signing transaction data or other structured data, provide a keccak256 hash:  ```typescript import {   MessageTypes,   SignTypedDataVersion,   TypedDataUtils,   TypedDataV1,   TypedMessage,   typedSignatureHash, } from \'@metamask/eth-sig-util\'; import { resolveProperties, Signature, Transaction, TransactionLike, TransactionRequest } from \'ethers\';  const computeEip712Hash = (   data: TypedMessage<MessageTypes>,   version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4, ): string => {   const hashBuffer = TypedDataUtils.eip712Hash(data, version);   return \'0x\' + hashBuffer.toString(\'hex\'); };  const personalSign = async (data: string) => {   const message = Buffer.from(data, \'utf-8\').toString(\'base64\');   const body = { message_base64: message, chain: \'ETH\' };   return await fetch(\'/v1/wallet/sign/message\', { method: \'POST\', body: JSON.stringify(body) }); };  const signTypedDataV1 = async (data: TypedDataV1) => {   const rawDataHash = typedSignatureHash(data);   const body = { raw_data_hash: rawDataHash, chain: \'ETH\' };   return await fetch(\'/v1/wallet/sign/data\', { method: \'POST\', body: JSON.stringify(body) }); };  const signTypedDataV3 = async (data: TypedMessage<MessageTypes>) => {   const rawDataHash = computeEip712Hash(data, SignTypedDataVersion.V3);   const body = { raw_data_hash: rawDataHash, chain: \'ETH\' };   return await fetch(\'/v1/wallet/sign/data\', { method: \'POST\', body: JSON.stringify(body) }); };  const signTypedDataV4 = async (data: TypedMessage<MessageTypes>) => {   const rawDataHash = computeEip712Hash(data, SignTypedDataVersion.V4);   const body = { raw_data_hash: rawDataHash, chain: \'ETH\' };   return await fetch(\'/v1/wallet/sign/data\', { method: \'POST\', body: JSON.stringify(body) }); };  const signTransaction = async (tx: TransactionRequest) => {   const resolvedTx = await resolveProperties(tx);   const txForSigning = { ...resolvedTx };   delete txForSigning.from;    const btx = Transaction.from(txForSigning as TransactionLike);    const body = { raw_data_hash: btx.unsignedHash, chain: \'ETH\' };   const res = await fetch(\'/v1/wallet/sign/data\', { method: \'POST\', body: JSON.stringify(body) });   const { r, s, v } = res.json();   btx.signature = Signature.from({ r, s, v });   return btx.serialized; }; ``` 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { SignDataRequest } from '../models';
// @ts-ignore
import { SignDataResponse } from '../models';
// @ts-ignore
import { SignMessageRequest } from '../models';
// @ts-ignore
import { SignMessageResponse } from '../models';
/**
 * SignOperationsApi - axios parameter creator
 * @export
 */
export const SignOperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Signs a hash of arbitrary data using the wallet\'s private key.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet/sign/data\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\",     \"raw_data_hash\": \"0xabc123def4567890abc123def4567890abc123def4567890abc123def4567890\"   }\' ```  **Example Response:** ```json {   \"message_hash\": \"0xabc123def4567890abc123def4567890abc123def4567890abc123def4567890\",   \"signature\": \"0x8e7d6c5b4a3928172635445566778899aabbccddeeff00112233445566778899\",   \"r\": \"0x3d4e5f678901234567890abcdef1234567890abcdef1234567890abcdef1234\",   \"s\": \"0x4e5f678901234567890abcdef1234567890abcdef1234567890abcdef123456\",   \"v\": \"27\" } ```
         * @summary Sign data using the wallet\'s private key.
         * @param {SignDataRequest} signDataRequest 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signDataV1WalletSignDataPost: async (signDataRequest: SignDataRequest, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signDataRequest' is not null or undefined
            assertParamExists('signDataV1WalletSignDataPost', 'signDataRequest', signDataRequest)
            const localVarPath = `/v1/wallet/sign/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xMagicAPIKey != null) {
                localVarHeaderParameter['X-Magic-API-Key'] = String(xMagicAPIKey);
            }

            if (xMagicSecretKey != null) {
                localVarHeaderParameter['X-Magic-Secret-Key'] = String(xMagicSecretKey);
            }

            if (xOIDCProviderID != null) {
                localVarHeaderParameter['X-OIDC-Provider-ID'] = String(xOIDCProviderID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Signs an arbitrary message using the wallet\'s private key. Useful for authentication and off-chain verification.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet/sign/message\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\",     \"message_base64\": \"bm9uZQ==\"   }\' ```  **Example Response:** ```json {   \"signature\": \"0x0cebb670d8375ac74122b46c44def7e1ce593e80434a3e6557108ae124f8b44f3c5068fc104279fe7f51918cbe4c249d707bc1c0ce2ffb6d201d3cf4e2fdee8d1b\",   \"r\": \"0x0cebb670d8375ac74122b46c44def7e1ce593e80434a3e6557108ae124f8b44f\",   \"s\": \"0x3c5068fc104279fe7f51918cbe4c249d707bc1c0ce2ffb6d201d3cf4e2fdee8d\",   \"v\": \"27\" } ```
         * @summary Sign a message using the wallet\'s private key.
         * @param {SignMessageRequest} signMessageRequest 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signMessageV1WalletSignMessagePost: async (signMessageRequest: SignMessageRequest, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signMessageRequest' is not null or undefined
            assertParamExists('signMessageV1WalletSignMessagePost', 'signMessageRequest', signMessageRequest)
            const localVarPath = `/v1/wallet/sign/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (xMagicAPIKey != null) {
                localVarHeaderParameter['X-Magic-API-Key'] = String(xMagicAPIKey);
            }

            if (xMagicSecretKey != null) {
                localVarHeaderParameter['X-Magic-Secret-Key'] = String(xMagicSecretKey);
            }

            if (xOIDCProviderID != null) {
                localVarHeaderParameter['X-OIDC-Provider-ID'] = String(xOIDCProviderID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signMessageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignOperationsApi - functional programming interface
 * @export
 */
export const SignOperationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignOperationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Signs a hash of arbitrary data using the wallet\'s private key.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet/sign/data\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\",     \"raw_data_hash\": \"0xabc123def4567890abc123def4567890abc123def4567890abc123def4567890\"   }\' ```  **Example Response:** ```json {   \"message_hash\": \"0xabc123def4567890abc123def4567890abc123def4567890abc123def4567890\",   \"signature\": \"0x8e7d6c5b4a3928172635445566778899aabbccddeeff00112233445566778899\",   \"r\": \"0x3d4e5f678901234567890abcdef1234567890abcdef1234567890abcdef1234\",   \"s\": \"0x4e5f678901234567890abcdef1234567890abcdef1234567890abcdef123456\",   \"v\": \"27\" } ```
         * @summary Sign data using the wallet\'s private key.
         * @param {SignDataRequest} signDataRequest 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signDataV1WalletSignDataPost(signDataRequest: SignDataRequest, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signDataV1WalletSignDataPost(signDataRequest, xMagicAPIKey, xMagicSecretKey, xOIDCProviderID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Signs an arbitrary message using the wallet\'s private key. Useful for authentication and off-chain verification.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet/sign/message\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\",     \"message_base64\": \"bm9uZQ==\"   }\' ```  **Example Response:** ```json {   \"signature\": \"0x0cebb670d8375ac74122b46c44def7e1ce593e80434a3e6557108ae124f8b44f3c5068fc104279fe7f51918cbe4c249d707bc1c0ce2ffb6d201d3cf4e2fdee8d1b\",   \"r\": \"0x0cebb670d8375ac74122b46c44def7e1ce593e80434a3e6557108ae124f8b44f\",   \"s\": \"0x3c5068fc104279fe7f51918cbe4c249d707bc1c0ce2ffb6d201d3cf4e2fdee8d\",   \"v\": \"27\" } ```
         * @summary Sign a message using the wallet\'s private key.
         * @param {SignMessageRequest} signMessageRequest 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {string} [xOIDCProviderID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signMessageV1WalletSignMessagePost(signMessageRequest: SignMessageRequest, xMagicAPIKey?: string, xMagicSecretKey?: string, xOIDCProviderID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignMessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signMessageV1WalletSignMessagePost(signMessageRequest, xMagicAPIKey, xMagicSecretKey, xOIDCProviderID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignOperationsApi - factory interface
 * @export
 */
export const SignOperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignOperationsApiFp(configuration)
    return {
        /**
         * Signs a hash of arbitrary data using the wallet\'s private key.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet/sign/data\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\",     \"raw_data_hash\": \"0xabc123def4567890abc123def4567890abc123def4567890abc123def4567890\"   }\' ```  **Example Response:** ```json {   \"message_hash\": \"0xabc123def4567890abc123def4567890abc123def4567890abc123def4567890\",   \"signature\": \"0x8e7d6c5b4a3928172635445566778899aabbccddeeff00112233445566778899\",   \"r\": \"0x3d4e5f678901234567890abcdef1234567890abcdef1234567890abcdef1234\",   \"s\": \"0x4e5f678901234567890abcdef1234567890abcdef1234567890abcdef123456\",   \"v\": \"27\" } ```
         * @summary Sign data using the wallet\'s private key.
         * @param {SignOperationsApiSignDataV1WalletSignDataPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signDataV1WalletSignDataPost(requestParameters: SignOperationsApiSignDataV1WalletSignDataPostRequest, options?: AxiosRequestConfig): AxiosPromise<SignDataResponse> {
            return localVarFp.signDataV1WalletSignDataPost(requestParameters.signDataRequest, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(axios, basePath));
        },
        /**
         * Signs an arbitrary message using the wallet\'s private key. Useful for authentication and off-chain verification.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet/sign/message\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\",     \"message_base64\": \"bm9uZQ==\"   }\' ```  **Example Response:** ```json {   \"signature\": \"0x0cebb670d8375ac74122b46c44def7e1ce593e80434a3e6557108ae124f8b44f3c5068fc104279fe7f51918cbe4c249d707bc1c0ce2ffb6d201d3cf4e2fdee8d1b\",   \"r\": \"0x0cebb670d8375ac74122b46c44def7e1ce593e80434a3e6557108ae124f8b44f\",   \"s\": \"0x3c5068fc104279fe7f51918cbe4c249d707bc1c0ce2ffb6d201d3cf4e2fdee8d\",   \"v\": \"27\" } ```
         * @summary Sign a message using the wallet\'s private key.
         * @param {SignOperationsApiSignMessageV1WalletSignMessagePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signMessageV1WalletSignMessagePost(requestParameters: SignOperationsApiSignMessageV1WalletSignMessagePostRequest, options?: AxiosRequestConfig): AxiosPromise<SignMessageResponse> {
            return localVarFp.signMessageV1WalletSignMessagePost(requestParameters.signMessageRequest, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for signDataV1WalletSignDataPost operation in SignOperationsApi.
 * @export
 * @interface SignOperationsApiSignDataV1WalletSignDataPostRequest
 */
export interface SignOperationsApiSignDataV1WalletSignDataPostRequest {
    /**
     * 
     * @type {SignDataRequest}
     * @memberof SignOperationsApiSignDataV1WalletSignDataPost
     */
    readonly signDataRequest: SignDataRequest

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignDataV1WalletSignDataPost
     */
    readonly xMagicAPIKey?: string

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignDataV1WalletSignDataPost
     */
    readonly xMagicSecretKey?: string

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignDataV1WalletSignDataPost
     */
    readonly xOIDCProviderID?: string
}

/**
 * Request parameters for signMessageV1WalletSignMessagePost operation in SignOperationsApi.
 * @export
 * @interface SignOperationsApiSignMessageV1WalletSignMessagePostRequest
 */
export interface SignOperationsApiSignMessageV1WalletSignMessagePostRequest {
    /**
     * 
     * @type {SignMessageRequest}
     * @memberof SignOperationsApiSignMessageV1WalletSignMessagePost
     */
    readonly signMessageRequest: SignMessageRequest

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignMessageV1WalletSignMessagePost
     */
    readonly xMagicAPIKey?: string

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignMessageV1WalletSignMessagePost
     */
    readonly xMagicSecretKey?: string

    /**
     * 
     * @type {string}
     * @memberof SignOperationsApiSignMessageV1WalletSignMessagePost
     */
    readonly xOIDCProviderID?: string
}

/**
 * SignOperationsApi - object-oriented interface
 * @export
 * @class SignOperationsApi
 * @extends {BaseAPI}
 */
export class SignOperationsApi extends BaseAPI {
    /**
     * Signs a hash of arbitrary data using the wallet\'s private key.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet/sign/data\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\",     \"raw_data_hash\": \"0xabc123def4567890abc123def4567890abc123def4567890abc123def4567890\"   }\' ```  **Example Response:** ```json {   \"message_hash\": \"0xabc123def4567890abc123def4567890abc123def4567890abc123def4567890\",   \"signature\": \"0x8e7d6c5b4a3928172635445566778899aabbccddeeff00112233445566778899\",   \"r\": \"0x3d4e5f678901234567890abcdef1234567890abcdef1234567890abcdef1234\",   \"s\": \"0x4e5f678901234567890abcdef1234567890abcdef1234567890abcdef123456\",   \"v\": \"27\" } ```
     * @summary Sign data using the wallet\'s private key.
     * @param {SignOperationsApiSignDataV1WalletSignDataPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignOperationsApi
     */
    public signDataV1WalletSignDataPost(requestParameters: SignOperationsApiSignDataV1WalletSignDataPostRequest, options?: AxiosRequestConfig) {
        return SignOperationsApiFp(this.configuration).signDataV1WalletSignDataPost(requestParameters.signDataRequest, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Signs an arbitrary message using the wallet\'s private key. Useful for authentication and off-chain verification.  **Example cURL:** ```bash curl -X POST \'https://tee.express.magiclabs.com/v1/wallet/sign/message\' \\   -H \'Content-Type: application/json\' \\   -H \'Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjNhYVl5dGR3d2UwMzJzMXIzVElyOSJ9...\' \\   -H \'X-Magic-API-Key: your-magic-api-key\' \\   -H \'X-OIDC-Provider-ID: your-oidc-provider-id\' \\   -d \'{     \"chain\": \"ETH\",     \"message_base64\": \"bm9uZQ==\"   }\' ```  **Example Response:** ```json {   \"signature\": \"0x0cebb670d8375ac74122b46c44def7e1ce593e80434a3e6557108ae124f8b44f3c5068fc104279fe7f51918cbe4c249d707bc1c0ce2ffb6d201d3cf4e2fdee8d1b\",   \"r\": \"0x0cebb670d8375ac74122b46c44def7e1ce593e80434a3e6557108ae124f8b44f\",   \"s\": \"0x3c5068fc104279fe7f51918cbe4c249d707bc1c0ce2ffb6d201d3cf4e2fdee8d\",   \"v\": \"27\" } ```
     * @summary Sign a message using the wallet\'s private key.
     * @param {SignOperationsApiSignMessageV1WalletSignMessagePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignOperationsApi
     */
    public signMessageV1WalletSignMessagePost(requestParameters: SignOperationsApiSignMessageV1WalletSignMessagePostRequest, options?: AxiosRequestConfig) {
        return SignOperationsApiFp(this.configuration).signMessageV1WalletSignMessagePost(requestParameters.signMessageRequest, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, requestParameters.xOIDCProviderID, options).then((request) => request(this.axios, this.basePath));
    }
}

