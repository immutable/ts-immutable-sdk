/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { IdentityProviderCreateSchema } from '../models';
// @ts-ignore
import { IdentityProviderModel } from '../models';
// @ts-ignore
import { IdentityProviderUpdateSchema } from '../models';
/**
 * IdentityProviderApi - axios parameter creator
 * @export
 */
export const IdentityProviderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Identity Provider
         * @param {IdentityProviderCreateSchema} identityProviderCreateSchema 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIdentityProviderV1IdentityProviderPost: async (identityProviderCreateSchema: IdentityProviderCreateSchema, xMagicAPIKey?: string, xMagicSecretKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityProviderCreateSchema' is not null or undefined
            assertParamExists('createIdentityProviderV1IdentityProviderPost', 'identityProviderCreateSchema', identityProviderCreateSchema)
            const localVarPath = `/v1/identity/provider`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xMagicAPIKey != null) {
                localVarHeaderParameter['X-Magic-API-Key'] = String(xMagicAPIKey);
            }

            if (xMagicSecretKey != null) {
                localVarHeaderParameter['X-Magic-Secret-Key'] = String(xMagicSecretKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identityProviderCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Identity Provider
         * @param {string} id 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityProviderV1IdentityProviderIdDelete: async (id: string, xMagicAPIKey?: string, xMagicSecretKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIdentityProviderV1IdentityProviderIdDelete', 'id', id)
            const localVarPath = `/v1/identity/provider/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xMagicAPIKey != null) {
                localVarHeaderParameter['X-Magic-API-Key'] = String(xMagicAPIKey);
            }

            if (xMagicSecretKey != null) {
                localVarHeaderParameter['X-Magic-Secret-Key'] = String(xMagicSecretKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Identity Providers
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProvidersV1IdentityProviderGet: async (xMagicAPIKey?: string, xMagicSecretKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/identity/provider`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xMagicAPIKey != null) {
                localVarHeaderParameter['X-Magic-API-Key'] = String(xMagicAPIKey);
            }

            if (xMagicSecretKey != null) {
                localVarHeaderParameter['X-Magic-Secret-Key'] = String(xMagicSecretKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Identity Provider
         * @param {string} id 
         * @param {IdentityProviderUpdateSchema} identityProviderUpdateSchema 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentityProviderV1IdentityProviderIdPatch: async (id: string, identityProviderUpdateSchema: IdentityProviderUpdateSchema, xMagicAPIKey?: string, xMagicSecretKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateIdentityProviderV1IdentityProviderIdPatch', 'id', id)
            // verify required parameter 'identityProviderUpdateSchema' is not null or undefined
            assertParamExists('updateIdentityProviderV1IdentityProviderIdPatch', 'identityProviderUpdateSchema', identityProviderUpdateSchema)
            const localVarPath = `/v1/identity/provider/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xMagicAPIKey != null) {
                localVarHeaderParameter['X-Magic-API-Key'] = String(xMagicAPIKey);
            }

            if (xMagicSecretKey != null) {
                localVarHeaderParameter['X-Magic-Secret-Key'] = String(xMagicSecretKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(identityProviderUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentityProviderApi - functional programming interface
 * @export
 */
export const IdentityProviderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentityProviderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Identity Provider
         * @param {IdentityProviderCreateSchema} identityProviderCreateSchema 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIdentityProviderV1IdentityProviderPost(identityProviderCreateSchema: IdentityProviderCreateSchema, xMagicAPIKey?: string, xMagicSecretKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProviderModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIdentityProviderV1IdentityProviderPost(identityProviderCreateSchema, xMagicAPIKey, xMagicSecretKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Identity Provider
         * @param {string} id 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIdentityProviderV1IdentityProviderIdDelete(id: string, xMagicAPIKey?: string, xMagicSecretKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIdentityProviderV1IdentityProviderIdDelete(id, xMagicAPIKey, xMagicSecretKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Identity Providers
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIdentityProvidersV1IdentityProviderGet(xMagicAPIKey?: string, xMagicSecretKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IdentityProviderModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIdentityProvidersV1IdentityProviderGet(xMagicAPIKey, xMagicSecretKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Identity Provider
         * @param {string} id 
         * @param {IdentityProviderUpdateSchema} identityProviderUpdateSchema 
         * @param {string} [xMagicAPIKey] 
         * @param {string} [xMagicSecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIdentityProviderV1IdentityProviderIdPatch(id: string, identityProviderUpdateSchema: IdentityProviderUpdateSchema, xMagicAPIKey?: string, xMagicSecretKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentityProviderModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIdentityProviderV1IdentityProviderIdPatch(id, identityProviderUpdateSchema, xMagicAPIKey, xMagicSecretKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdentityProviderApi - factory interface
 * @export
 */
export const IdentityProviderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentityProviderApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Identity Provider
         * @param {IdentityProviderApiCreateIdentityProviderV1IdentityProviderPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIdentityProviderV1IdentityProviderPost(requestParameters: IdentityProviderApiCreateIdentityProviderV1IdentityProviderPostRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityProviderModel> {
            return localVarFp.createIdentityProviderV1IdentityProviderPost(requestParameters.identityProviderCreateSchema, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Identity Provider
         * @param {IdentityProviderApiDeleteIdentityProviderV1IdentityProviderIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIdentityProviderV1IdentityProviderIdDelete(requestParameters: IdentityProviderApiDeleteIdentityProviderV1IdentityProviderIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteIdentityProviderV1IdentityProviderIdDelete(requestParameters.id, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Identity Providers
         * @param {IdentityProviderApiGetIdentityProvidersV1IdentityProviderGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIdentityProvidersV1IdentityProviderGet(requestParameters: IdentityProviderApiGetIdentityProvidersV1IdentityProviderGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<IdentityProviderModel>> {
            return localVarFp.getIdentityProvidersV1IdentityProviderGet(requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Identity Provider
         * @param {IdentityProviderApiUpdateIdentityProviderV1IdentityProviderIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIdentityProviderV1IdentityProviderIdPatch(requestParameters: IdentityProviderApiUpdateIdentityProviderV1IdentityProviderIdPatchRequest, options?: AxiosRequestConfig): AxiosPromise<IdentityProviderModel> {
            return localVarFp.updateIdentityProviderV1IdentityProviderIdPatch(requestParameters.id, requestParameters.identityProviderUpdateSchema, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createIdentityProviderV1IdentityProviderPost operation in IdentityProviderApi.
 * @export
 * @interface IdentityProviderApiCreateIdentityProviderV1IdentityProviderPostRequest
 */
export interface IdentityProviderApiCreateIdentityProviderV1IdentityProviderPostRequest {
    /**
     * 
     * @type {IdentityProviderCreateSchema}
     * @memberof IdentityProviderApiCreateIdentityProviderV1IdentityProviderPost
     */
    readonly identityProviderCreateSchema: IdentityProviderCreateSchema

    /**
     * 
     * @type {string}
     * @memberof IdentityProviderApiCreateIdentityProviderV1IdentityProviderPost
     */
    readonly xMagicAPIKey?: string

    /**
     * 
     * @type {string}
     * @memberof IdentityProviderApiCreateIdentityProviderV1IdentityProviderPost
     */
    readonly xMagicSecretKey?: string
}

/**
 * Request parameters for deleteIdentityProviderV1IdentityProviderIdDelete operation in IdentityProviderApi.
 * @export
 * @interface IdentityProviderApiDeleteIdentityProviderV1IdentityProviderIdDeleteRequest
 */
export interface IdentityProviderApiDeleteIdentityProviderV1IdentityProviderIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderApiDeleteIdentityProviderV1IdentityProviderIdDelete
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof IdentityProviderApiDeleteIdentityProviderV1IdentityProviderIdDelete
     */
    readonly xMagicAPIKey?: string

    /**
     * 
     * @type {string}
     * @memberof IdentityProviderApiDeleteIdentityProviderV1IdentityProviderIdDelete
     */
    readonly xMagicSecretKey?: string
}

/**
 * Request parameters for getIdentityProvidersV1IdentityProviderGet operation in IdentityProviderApi.
 * @export
 * @interface IdentityProviderApiGetIdentityProvidersV1IdentityProviderGetRequest
 */
export interface IdentityProviderApiGetIdentityProvidersV1IdentityProviderGetRequest {
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderApiGetIdentityProvidersV1IdentityProviderGet
     */
    readonly xMagicAPIKey?: string

    /**
     * 
     * @type {string}
     * @memberof IdentityProviderApiGetIdentityProvidersV1IdentityProviderGet
     */
    readonly xMagicSecretKey?: string
}

/**
 * Request parameters for updateIdentityProviderV1IdentityProviderIdPatch operation in IdentityProviderApi.
 * @export
 * @interface IdentityProviderApiUpdateIdentityProviderV1IdentityProviderIdPatchRequest
 */
export interface IdentityProviderApiUpdateIdentityProviderV1IdentityProviderIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof IdentityProviderApiUpdateIdentityProviderV1IdentityProviderIdPatch
     */
    readonly id: string

    /**
     * 
     * @type {IdentityProviderUpdateSchema}
     * @memberof IdentityProviderApiUpdateIdentityProviderV1IdentityProviderIdPatch
     */
    readonly identityProviderUpdateSchema: IdentityProviderUpdateSchema

    /**
     * 
     * @type {string}
     * @memberof IdentityProviderApiUpdateIdentityProviderV1IdentityProviderIdPatch
     */
    readonly xMagicAPIKey?: string

    /**
     * 
     * @type {string}
     * @memberof IdentityProviderApiUpdateIdentityProviderV1IdentityProviderIdPatch
     */
    readonly xMagicSecretKey?: string
}

/**
 * IdentityProviderApi - object-oriented interface
 * @export
 * @class IdentityProviderApi
 * @extends {BaseAPI}
 */
export class IdentityProviderApi extends BaseAPI {
    /**
     * 
     * @summary Create Identity Provider
     * @param {IdentityProviderApiCreateIdentityProviderV1IdentityProviderPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProviderApi
     */
    public createIdentityProviderV1IdentityProviderPost(requestParameters: IdentityProviderApiCreateIdentityProviderV1IdentityProviderPostRequest, options?: AxiosRequestConfig) {
        return IdentityProviderApiFp(this.configuration).createIdentityProviderV1IdentityProviderPost(requestParameters.identityProviderCreateSchema, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Identity Provider
     * @param {IdentityProviderApiDeleteIdentityProviderV1IdentityProviderIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProviderApi
     */
    public deleteIdentityProviderV1IdentityProviderIdDelete(requestParameters: IdentityProviderApiDeleteIdentityProviderV1IdentityProviderIdDeleteRequest, options?: AxiosRequestConfig) {
        return IdentityProviderApiFp(this.configuration).deleteIdentityProviderV1IdentityProviderIdDelete(requestParameters.id, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Identity Providers
     * @param {IdentityProviderApiGetIdentityProvidersV1IdentityProviderGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProviderApi
     */
    public getIdentityProvidersV1IdentityProviderGet(requestParameters: IdentityProviderApiGetIdentityProvidersV1IdentityProviderGetRequest = {}, options?: AxiosRequestConfig) {
        return IdentityProviderApiFp(this.configuration).getIdentityProvidersV1IdentityProviderGet(requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Identity Provider
     * @param {IdentityProviderApiUpdateIdentityProviderV1IdentityProviderIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentityProviderApi
     */
    public updateIdentityProviderV1IdentityProviderIdPatch(requestParameters: IdentityProviderApiUpdateIdentityProviderV1IdentityProviderIdPatchRequest, options?: AxiosRequestConfig) {
        return IdentityProviderApiFp(this.configuration).updateIdentityProviderV1IdentityProviderIdPatch(requestParameters.id, requestParameters.identityProviderUpdateSchema, requestParameters.xMagicAPIKey, requestParameters.xMagicSecretKey, options).then((request) => request(this.axios, this.basePath));
    }
}

