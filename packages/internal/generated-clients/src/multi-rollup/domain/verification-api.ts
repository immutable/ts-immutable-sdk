/* tslint:disable */
/* eslint-disable */
/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIError400 } from '../models';
// @ts-ignore
import { APIError401 } from '../models';
// @ts-ignore
import { APIError403 } from '../models';
// @ts-ignore
import { APIError404 } from '../models';
// @ts-ignore
import { APIError500 } from '../models';
// @ts-ignore
import { CreateVerificationRequest } from '../models';
// @ts-ignore
import { CreateVerificationResult } from '../models';
// @ts-ignore
import { ListVerificationRequestResult } from '../models';
// @ts-ignore
import { VerificationRequestStatus } from '../models';
/**
 * VerificationApi - axios parameter creator
 * @export
 */
export const VerificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a verification request for a given contract
         * @summary Creates a verification request for a given contract
         * @param {string} chainName The name of chain
         * @param {CreateVerificationRequest} createVerificationRequest The request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVerificationRequest: async (chainName: string, createVerificationRequest: CreateVerificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainName' is not null or undefined
            assertParamExists('createVerificationRequest', 'chainName', chainName)
            // verify required parameter 'createVerificationRequest' is not null or undefined
            assertParamExists('createVerificationRequest', 'createVerificationRequest', createVerificationRequest)
            const localVarPath = `/v1/internal/chains/{chain_name}/verification-requests`
                .replace(`{${"chain_name"}}`, encodeURIComponent(String(chainName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createVerificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all verification requests
         * @summary List all verification requests
         * @param {string} chainName The name of chain
         * @param {Array<string>} [contractAddress] List of contract addresses to filter by
         * @param {Array<VerificationRequestStatus>} [verificationRequestStatus] List of verification request status to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVerificationRequests: async (chainName: string, contractAddress?: Array<string>, verificationRequestStatus?: Array<VerificationRequestStatus>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainName' is not null or undefined
            assertParamExists('listVerificationRequests', 'chainName', chainName)
            const localVarPath = `/v1/internal/chains/{chain_name}/verification-requests`
                .replace(`{${"chain_name"}}`, encodeURIComponent(String(chainName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ImmutableApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-immutable-api-key", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (contractAddress) {
                localVarQueryParameter['contract_address'] = contractAddress;
            }

            if (verificationRequestStatus) {
                localVarQueryParameter['verification_request_status'] = verificationRequestStatus;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationApi - functional programming interface
 * @export
 */
export const VerificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a verification request for a given contract
         * @summary Creates a verification request for a given contract
         * @param {string} chainName The name of chain
         * @param {CreateVerificationRequest} createVerificationRequest The request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVerificationRequest(chainName: string, createVerificationRequest: CreateVerificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVerificationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVerificationRequest(chainName, createVerificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all verification requests
         * @summary List all verification requests
         * @param {string} chainName The name of chain
         * @param {Array<string>} [contractAddress] List of contract addresses to filter by
         * @param {Array<VerificationRequestStatus>} [verificationRequestStatus] List of verification request status to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVerificationRequests(chainName: string, contractAddress?: Array<string>, verificationRequestStatus?: Array<VerificationRequestStatus>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListVerificationRequestResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVerificationRequests(chainName, contractAddress, verificationRequestStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerificationApi - factory interface
 * @export
 */
export const VerificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationApiFp(configuration)
    return {
        /**
         * Creates a verification request for a given contract
         * @summary Creates a verification request for a given contract
         * @param {VerificationApiCreateVerificationRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVerificationRequest(requestParameters: VerificationApiCreateVerificationRequestRequest, options?: AxiosRequestConfig): AxiosPromise<CreateVerificationResult> {
            return localVarFp.createVerificationRequest(requestParameters.chainName, requestParameters.createVerificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all verification requests
         * @summary List all verification requests
         * @param {VerificationApiListVerificationRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVerificationRequests(requestParameters: VerificationApiListVerificationRequestsRequest, options?: AxiosRequestConfig): AxiosPromise<ListVerificationRequestResult> {
            return localVarFp.listVerificationRequests(requestParameters.chainName, requestParameters.contractAddress, requestParameters.verificationRequestStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createVerificationRequest operation in VerificationApi.
 * @export
 * @interface VerificationApiCreateVerificationRequestRequest
 */
export interface VerificationApiCreateVerificationRequestRequest {
    /**
     * The name of chain
     * @type {string}
     * @memberof VerificationApiCreateVerificationRequest
     */
    readonly chainName: string

    /**
     * The request body
     * @type {CreateVerificationRequest}
     * @memberof VerificationApiCreateVerificationRequest
     */
    readonly createVerificationRequest: CreateVerificationRequest
}

/**
 * Request parameters for listVerificationRequests operation in VerificationApi.
 * @export
 * @interface VerificationApiListVerificationRequestsRequest
 */
export interface VerificationApiListVerificationRequestsRequest {
    /**
     * The name of chain
     * @type {string}
     * @memberof VerificationApiListVerificationRequests
     */
    readonly chainName: string

    /**
     * List of contract addresses to filter by
     * @type {Array<string>}
     * @memberof VerificationApiListVerificationRequests
     */
    readonly contractAddress?: Array<string>

    /**
     * List of verification request status to filter by
     * @type {Array<VerificationRequestStatus>}
     * @memberof VerificationApiListVerificationRequests
     */
    readonly verificationRequestStatus?: Array<VerificationRequestStatus>
}

/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export class VerificationApi extends BaseAPI {
    /**
     * Creates a verification request for a given contract
     * @summary Creates a verification request for a given contract
     * @param {VerificationApiCreateVerificationRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public createVerificationRequest(requestParameters: VerificationApiCreateVerificationRequestRequest, options?: AxiosRequestConfig) {
        return VerificationApiFp(this.configuration).createVerificationRequest(requestParameters.chainName, requestParameters.createVerificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all verification requests
     * @summary List all verification requests
     * @param {VerificationApiListVerificationRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    public listVerificationRequests(requestParameters: VerificationApiListVerificationRequestsRequest, options?: AxiosRequestConfig) {
        return VerificationApiFp(this.configuration).listVerificationRequests(requestParameters.chainName, requestParameters.contractAddress, requestParameters.verificationRequestStatus, options).then((request) => request(this.axios, this.basePath));
    }
}

