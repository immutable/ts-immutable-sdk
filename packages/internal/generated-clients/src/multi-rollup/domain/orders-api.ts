/* tslint:disable */
/* eslint-disable */
/**
 * Immutable X API
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIError400 } from '../models';
// @ts-ignore
import { APIError404 } from '../models';
// @ts-ignore
import { APIError500 } from '../models';
// @ts-ignore
import { CreateOrderRequestBody } from '../models';
// @ts-ignore
import { ListOrdersResult } from '../models';
// @ts-ignore
import { OrderResult } from '../models';
// @ts-ignore
import { OrderStatus } from '../models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an order
         * @summary Create an order
         * @param {string} chainName 
         * @param {CreateOrderRequestBody} createOrderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (chainName: string, createOrderRequestBody: CreateOrderRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainName' is not null or undefined
            assertParamExists('createOrder', 'chainName', chainName)
            // verify required parameter 'createOrderRequestBody' is not null or undefined
            assertParamExists('createOrder', 'createOrderRequestBody', createOrderRequestBody)
            const localVarPath = `/v1/chains/{chain_name}/orders`
                .replace(`{${"chain_name"}}`, encodeURIComponent(String(chainName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single order by ID
         * @summary Get a single order by ID
         * @param {string} chainName 
         * @param {string} orderId Global Order identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (chainName: string, orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainName' is not null or undefined
            assertParamExists('getOrder', 'chainName', chainName)
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrder', 'orderId', orderId)
            const localVarPath = `/v1/chains/{chain_name}/orders/{order_id}`
                .replace(`{${"chain_name"}}`, encodeURIComponent(String(chainName)))
                .replace(`{${"order_id"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all orders
         * @summary List all orders
         * @param {string} chainName 
         * @param {OrderStatus} [status] Order status to filter by
         * @param {string} [sellItemContractAddress] Sell item contract address to filter by
         * @param {string} [sellItemTokenId] Sell item token identifier to filter by
         * @param {number} [pageSize] Maximum number of orders to return per page
         * @param {'created_at' | 'updated_at' | 'buy_item_amount'} [sortBy] Order field to sort by
         * @param {'asc' | 'desc'} [sortDirection] Ascending or descending direction for sort
         * @param {string} [pageCursor] Page cursor to retrieve previous or next page. Use the value returned in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: async (chainName: string, status?: OrderStatus, sellItemContractAddress?: string, sellItemTokenId?: string, pageSize?: number, sortBy?: 'created_at' | 'updated_at' | 'buy_item_amount', sortDirection?: 'asc' | 'desc', pageCursor?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainName' is not null or undefined
            assertParamExists('listOrders', 'chainName', chainName)
            const localVarPath = `/v1/chains/{chain_name}/orders`
                .replace(`{${"chain_name"}}`, encodeURIComponent(String(chainName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (sellItemContractAddress !== undefined) {
                localVarQueryParameter['sell_item_contract_address'] = sellItemContractAddress;
            }

            if (sellItemTokenId !== undefined) {
                localVarQueryParameter['sell_item_token_id'] = sellItemTokenId;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sort_direction'] = sortDirection;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['page_cursor'] = pageCursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an order
         * @summary Create an order
         * @param {string} chainName 
         * @param {CreateOrderRequestBody} createOrderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(chainName: string, createOrderRequestBody: CreateOrderRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(chainName, createOrderRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single order by ID
         * @summary Get a single order by ID
         * @param {string} chainName 
         * @param {string} orderId Global Order identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(chainName: string, orderId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(chainName, orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all orders
         * @summary List all orders
         * @param {string} chainName 
         * @param {OrderStatus} [status] Order status to filter by
         * @param {string} [sellItemContractAddress] Sell item contract address to filter by
         * @param {string} [sellItemTokenId] Sell item token identifier to filter by
         * @param {number} [pageSize] Maximum number of orders to return per page
         * @param {'created_at' | 'updated_at' | 'buy_item_amount'} [sortBy] Order field to sort by
         * @param {'asc' | 'desc'} [sortDirection] Ascending or descending direction for sort
         * @param {string} [pageCursor] Page cursor to retrieve previous or next page. Use the value returned in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrders(chainName: string, status?: OrderStatus, sellItemContractAddress?: string, sellItemTokenId?: string, pageSize?: number, sortBy?: 'created_at' | 'updated_at' | 'buy_item_amount', sortDirection?: 'asc' | 'desc', pageCursor?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOrdersResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrders(chainName, status, sellItemContractAddress, sellItemTokenId, pageSize, sortBy, sortDirection, pageCursor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * Create an order
         * @summary Create an order
         * @param {string} chainName 
         * @param {CreateOrderRequestBody} createOrderRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(chainName: string, createOrderRequestBody: CreateOrderRequestBody, options?: any): AxiosPromise<OrderResult> {
            return localVarFp.createOrder(chainName, createOrderRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single order by ID
         * @summary Get a single order by ID
         * @param {string} chainName 
         * @param {string} orderId Global Order identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(chainName: string, orderId: string, options?: any): AxiosPromise<OrderResult> {
            return localVarFp.getOrder(chainName, orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all orders
         * @summary List all orders
         * @param {string} chainName 
         * @param {OrderStatus} [status] Order status to filter by
         * @param {string} [sellItemContractAddress] Sell item contract address to filter by
         * @param {string} [sellItemTokenId] Sell item token identifier to filter by
         * @param {number} [pageSize] Maximum number of orders to return per page
         * @param {'created_at' | 'updated_at' | 'buy_item_amount'} [sortBy] Order field to sort by
         * @param {'asc' | 'desc'} [sortDirection] Ascending or descending direction for sort
         * @param {string} [pageCursor] Page cursor to retrieve previous or next page. Use the value returned in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(chainName: string, status?: OrderStatus, sellItemContractAddress?: string, sellItemTokenId?: string, pageSize?: number, sortBy?: 'created_at' | 'updated_at' | 'buy_item_amount', sortDirection?: 'asc' | 'desc', pageCursor?: string, options?: any): AxiosPromise<ListOrdersResult> {
            return localVarFp.listOrders(chainName, status, sellItemContractAddress, sellItemTokenId, pageSize, sortBy, sortDirection, pageCursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiCreateOrderRequest
 */
export interface OrdersApiCreateOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiCreateOrder
     */
    readonly chainName: string

    /**
     * 
     * @type {CreateOrderRequestBody}
     * @memberof OrdersApiCreateOrder
     */
    readonly createOrderRequestBody: CreateOrderRequestBody
}

/**
 * Request parameters for getOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderRequest
 */
export interface OrdersApiGetOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly chainName: string

    /**
     * Global Order identifier
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly orderId: string
}

/**
 * Request parameters for listOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiListOrdersRequest
 */
export interface OrdersApiListOrdersRequest {
    /**
     * 
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly chainName: string

    /**
     * Order status to filter by
     * @type {OrderStatus}
     * @memberof OrdersApiListOrders
     */
    readonly status?: OrderStatus

    /**
     * Sell item contract address to filter by
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellItemContractAddress?: string

    /**
     * Sell item token identifier to filter by
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly sellItemTokenId?: string

    /**
     * Maximum number of orders to return per page
     * @type {number}
     * @memberof OrdersApiListOrders
     */
    readonly pageSize?: number

    /**
     * Order field to sort by
     * @type {'created_at' | 'updated_at' | 'buy_item_amount'}
     * @memberof OrdersApiListOrders
     */
    readonly sortBy?: 'created_at' | 'updated_at' | 'buy_item_amount'

    /**
     * Ascending or descending direction for sort
     * @type {'asc' | 'desc'}
     * @memberof OrdersApiListOrders
     */
    readonly sortDirection?: 'asc' | 'desc'

    /**
     * Page cursor to retrieve previous or next page. Use the value returned in the response.
     * @type {string}
     * @memberof OrdersApiListOrders
     */
    readonly pageCursor?: string
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * Create an order
     * @summary Create an order
     * @param {OrdersApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public createOrder(requestParameters: OrdersApiCreateOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).createOrder(requestParameters.chainName, requestParameters.createOrderRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single order by ID
     * @summary Get a single order by ID
     * @param {OrdersApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrder(requestParameters: OrdersApiGetOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrder(requestParameters.chainName, requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all orders
     * @summary List all orders
     * @param {OrdersApiListOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public listOrders(requestParameters: OrdersApiListOrdersRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).listOrders(requestParameters.chainName, requestParameters.status, requestParameters.sellItemContractAddress, requestParameters.sellItemTokenId, requestParameters.pageSize, requestParameters.sortBy, requestParameters.sortDirection, requestParameters.pageCursor, options).then((request) => request(this.axios, this.basePath));
    }
}
