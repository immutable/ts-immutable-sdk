/* tslint:disable */
/* eslint-disable */
/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIError400 } from '../models';
// @ts-ignore
import { APIError401 } from '../models';
// @ts-ignore
import { APIError403 } from '../models';
// @ts-ignore
import { APIError404 } from '../models';
// @ts-ignore
import { APIError500 } from '../models';
// @ts-ignore
import { SignCraftingRequest } from '../models';
// @ts-ignore
import { SignCraftingResult } from '../models';
/**
 * CraftingApi - axios parameter creator
 * @export
 */
export const CraftingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sign a crafting payload
         * @summary Sign a crafting payload
         * @param {string} chainName The name of chain
         * @param {SignCraftingRequest} signCraftingRequest The request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signCraftingPayload: async (chainName: string, signCraftingRequest: SignCraftingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'chainName' is not null or undefined
            assertParamExists('signCraftingPayload', 'chainName', chainName)
            // verify required parameter 'signCraftingRequest' is not null or undefined
            assertParamExists('signCraftingPayload', 'signCraftingRequest', signCraftingRequest)
            const localVarPath = `/v1/chains/{chain_name}/crafting/sign`
                .replace(`{${"chain_name"}}`, encodeURIComponent(String(chainName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ImmutableApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "x-immutable-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signCraftingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CraftingApi - functional programming interface
 * @export
 */
export const CraftingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CraftingApiAxiosParamCreator(configuration)
    return {
        /**
         * Sign a crafting payload
         * @summary Sign a crafting payload
         * @param {string} chainName The name of chain
         * @param {SignCraftingRequest} signCraftingRequest The request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signCraftingPayload(chainName: string, signCraftingRequest: SignCraftingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignCraftingResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signCraftingPayload(chainName, signCraftingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CraftingApi - factory interface
 * @export
 */
export const CraftingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CraftingApiFp(configuration)
    return {
        /**
         * Sign a crafting payload
         * @summary Sign a crafting payload
         * @param {CraftingApiSignCraftingPayloadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signCraftingPayload(requestParameters: CraftingApiSignCraftingPayloadRequest, options?: AxiosRequestConfig): AxiosPromise<SignCraftingResult> {
            return localVarFp.signCraftingPayload(requestParameters.chainName, requestParameters.signCraftingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for signCraftingPayload operation in CraftingApi.
 * @export
 * @interface CraftingApiSignCraftingPayloadRequest
 */
export interface CraftingApiSignCraftingPayloadRequest {
    /**
     * The name of chain
     * @type {string}
     * @memberof CraftingApiSignCraftingPayload
     */
    readonly chainName: string

    /**
     * The request body
     * @type {SignCraftingRequest}
     * @memberof CraftingApiSignCraftingPayload
     */
    readonly signCraftingRequest: SignCraftingRequest
}

/**
 * CraftingApi - object-oriented interface
 * @export
 * @class CraftingApi
 * @extends {BaseAPI}
 */
export class CraftingApi extends BaseAPI {
    /**
     * Sign a crafting payload
     * @summary Sign a crafting payload
     * @param {CraftingApiSignCraftingPayloadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CraftingApi
     */
    public signCraftingPayload(requestParameters: CraftingApiSignCraftingPayloadRequest, options?: AxiosRequestConfig) {
        return CraftingApiFp(this.configuration).signCraftingPayload(requestParameters.chainName, requestParameters.signCraftingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

