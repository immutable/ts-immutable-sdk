/* tslint:disable */
/* eslint-disable */
/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { APIError400 } from '../models';
// @ts-ignore
import { APIError403 } from '../models';
// @ts-ignore
import { APIError404 } from '../models';
// @ts-ignore
import { APIError409 } from '../models';
// @ts-ignore
import { APIError500 } from '../models';
// @ts-ignore
import { BasicAPIError } from '../models';
// @ts-ignore
import { ERC191MessageEvaluationRequest } from '../models';
// @ts-ignore
import { EVMMessage } from '../models';
// @ts-ignore
import { Erc191MessageResponse } from '../models';
// @ts-ignore
import { MessageEvaluationRequest } from '../models';
// @ts-ignore
import { MessageEvaluationResponse } from '../models';
// @ts-ignore
import { Transaction } from '../models';
// @ts-ignore
import { TransactionApprovalRequest } from '../models';
// @ts-ignore
import { TransactionEvaluationRequest } from '../models';
// @ts-ignore
import { TransactionEvaluationResponse } from '../models';
/**
 * GuardianApi - axios parameter creator
 * @export
 */
export const GuardianApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Approve a pending erc191 message
         * @summary Approve a pending erc191 message
         * @param {string} messageID id for the message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvePendingERC191Message: async (messageID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageID' is not null or undefined
            assertParamExists('approvePendingERC191Message', 'messageID', messageID)
            const localVarPath = `/guardian/v1/erc191-messages/{messageID}/approve`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Approve a pending evm message
         * @summary Approve a pending evm message
         * @param {string} messageID id for the message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvePendingMessage: async (messageID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageID' is not null or undefined
            assertParamExists('approvePendingMessage', 'messageID', messageID)
            const localVarPath = `/guardian/v1/messages/{messageID}/approve`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Approve a pending transaction
         * @summary Approve a pending transaction given chain
         * @param {string} payloadHash Hash for the payload
         * @param {TransactionApprovalRequest} transactionApprovalRequest request body for approving a pending transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvePendingTransaction: async (payloadHash: string, transactionApprovalRequest: TransactionApprovalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payloadHash' is not null or undefined
            assertParamExists('approvePendingTransaction', 'payloadHash', payloadHash)
            // verify required parameter 'transactionApprovalRequest' is not null or undefined
            assertParamExists('approvePendingTransaction', 'transactionApprovalRequest', transactionApprovalRequest)
            const localVarPath = `/guardian/v1/transactions/{payloadHash}/approve`
                .replace(`{${"payloadHash"}}`, encodeURIComponent(String(payloadHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionApprovalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if a given erc191 message is valid
         * @summary Evaluate an erc191 message to sign
         * @param {ERC191MessageEvaluationRequest} eRC191MessageEvaluationRequest Specifies the kind of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateErc191Message: async (eRC191MessageEvaluationRequest: ERC191MessageEvaluationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eRC191MessageEvaluationRequest' is not null or undefined
            assertParamExists('evaluateErc191Message', 'eRC191MessageEvaluationRequest', eRC191MessageEvaluationRequest)
            const localVarPath = `/guardian/v1/erc191-messages/evaluate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eRC191MessageEvaluationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if a given message is valid  for EVM
         * @summary Evaluate an evm message to sign
         * @param {MessageEvaluationRequest} messageEvaluationRequest Specifies the kind of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateMessage: async (messageEvaluationRequest: MessageEvaluationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageEvaluationRequest' is not null or undefined
            assertParamExists('evaluateMessage', 'messageEvaluationRequest', messageEvaluationRequest)
            const localVarPath = `/guardian/v1/messages/evaluate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageEvaluationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if the transaction is valid by transaction ID for both StarkEx and EVM
         * @summary Evaluate a transaction
         * @param {string} id Transaction identifier: payloadHash on StarkEx or EVM ID
         * @param {TransactionEvaluationRequest} transactionEvaluationRequest Specifies the kind of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateTransaction: async (id: string, transactionEvaluationRequest: TransactionEvaluationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('evaluateTransaction', 'id', id)
            // verify required parameter 'transactionEvaluationRequest' is not null or undefined
            assertParamExists('evaluateTransaction', 'transactionEvaluationRequest', transactionEvaluationRequest)
            const localVarPath = `/guardian/v1/transactions/{id}/evaluate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transactionEvaluationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an erc191 message by id
         * @summary Info for a specific erc191 message
         * @param {string} messageID The id of the erc191 message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErc191MessageByID: async (messageID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageID' is not null or undefined
            assertParamExists('getErc191MessageByID', 'messageID', messageID)
            const localVarPath = `/guardian/v1/erc191-messages/{messageID}`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an evm message by id
         * @summary Info for a specific evm message
         * @param {string} messageID The id of the evm message
         * @param {boolean} [includeSimulation] Include simulation results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageByID: async (messageID: string, includeSimulation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageID' is not null or undefined
            assertParamExists('getMessageByID', 'messageID', messageID)
            const localVarPath = `/guardian/v1/messages/{messageID}`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (includeSimulation !== undefined) {
                localVarQueryParameter['includeSimulation'] = includeSimulation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a transaction by payload hash
         * @summary Info for a specific transaction
         * @param {string} transactionID The id of the starkex transaction to retrieve
         * @param {GetTransactionByIDChainTypeEnum} chainType roll up type
         * @param {string} [chainID] ID of evm chain
         * @param {boolean} [includeSimulation] Include simulation results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionByID: async (transactionID: string, chainType: GetTransactionByIDChainTypeEnum, chainID?: string, includeSimulation?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('getTransactionByID', 'transactionID', transactionID)
            // verify required parameter 'chainType' is not null or undefined
            assertParamExists('getTransactionByID', 'chainType', chainType)
            const localVarPath = `/guardian/v1/transactions/{transactionID}`
                .replace(`{${"transactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chainType !== undefined) {
                localVarQueryParameter['chainType'] = chainType;
            }

            if (chainID !== undefined) {
                localVarQueryParameter['chainID'] = chainID;
            }

            if (includeSimulation !== undefined) {
                localVarQueryParameter['includeSimulation'] = includeSimulation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GuardianApi - functional programming interface
 * @export
 */
export const GuardianApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GuardianApiAxiosParamCreator(configuration)
    return {
        /**
         * Approve a pending erc191 message
         * @summary Approve a pending erc191 message
         * @param {string} messageID id for the message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvePendingERC191Message(messageID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvePendingERC191Message(messageID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Approve a pending evm message
         * @summary Approve a pending evm message
         * @param {string} messageID id for the message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvePendingMessage(messageID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvePendingMessage(messageID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Approve a pending transaction
         * @summary Approve a pending transaction given chain
         * @param {string} payloadHash Hash for the payload
         * @param {TransactionApprovalRequest} transactionApprovalRequest request body for approving a pending transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approvePendingTransaction(payloadHash: string, transactionApprovalRequest: TransactionApprovalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approvePendingTransaction(payloadHash, transactionApprovalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if a given erc191 message is valid
         * @summary Evaluate an erc191 message to sign
         * @param {ERC191MessageEvaluationRequest} eRC191MessageEvaluationRequest Specifies the kind of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateErc191Message(eRC191MessageEvaluationRequest: ERC191MessageEvaluationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageEvaluationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateErc191Message(eRC191MessageEvaluationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if a given message is valid  for EVM
         * @summary Evaluate an evm message to sign
         * @param {MessageEvaluationRequest} messageEvaluationRequest Specifies the kind of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateMessage(messageEvaluationRequest: MessageEvaluationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageEvaluationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateMessage(messageEvaluationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Check if the transaction is valid by transaction ID for both StarkEx and EVM
         * @summary Evaluate a transaction
         * @param {string} id Transaction identifier: payloadHash on StarkEx or EVM ID
         * @param {TransactionEvaluationRequest} transactionEvaluationRequest Specifies the kind of transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluateTransaction(id: string, transactionEvaluationRequest: TransactionEvaluationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionEvaluationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluateTransaction(id, transactionEvaluationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an erc191 message by id
         * @summary Info for a specific erc191 message
         * @param {string} messageID The id of the erc191 message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getErc191MessageByID(messageID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Erc191MessageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getErc191MessageByID(messageID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an evm message by id
         * @summary Info for a specific evm message
         * @param {string} messageID The id of the evm message
         * @param {boolean} [includeSimulation] Include simulation results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageByID(messageID: string, includeSimulation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EVMMessage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageByID(messageID, includeSimulation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a transaction by payload hash
         * @summary Info for a specific transaction
         * @param {string} transactionID The id of the starkex transaction to retrieve
         * @param {GetTransactionByIDChainTypeEnum} chainType roll up type
         * @param {string} [chainID] ID of evm chain
         * @param {boolean} [includeSimulation] Include simulation results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionByID(transactionID: string, chainType: GetTransactionByIDChainTypeEnum, chainID?: string, includeSimulation?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionByID(transactionID, chainType, chainID, includeSimulation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GuardianApi - factory interface
 * @export
 */
export const GuardianApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GuardianApiFp(configuration)
    return {
        /**
         * Approve a pending erc191 message
         * @summary Approve a pending erc191 message
         * @param {GuardianApiApprovePendingERC191MessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvePendingERC191Message(requestParameters: GuardianApiApprovePendingERC191MessageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approvePendingERC191Message(requestParameters.messageID, options).then((request) => request(axios, basePath));
        },
        /**
         * Approve a pending evm message
         * @summary Approve a pending evm message
         * @param {GuardianApiApprovePendingMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvePendingMessage(requestParameters: GuardianApiApprovePendingMessageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approvePendingMessage(requestParameters.messageID, options).then((request) => request(axios, basePath));
        },
        /**
         * Approve a pending transaction
         * @summary Approve a pending transaction given chain
         * @param {GuardianApiApprovePendingTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approvePendingTransaction(requestParameters: GuardianApiApprovePendingTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approvePendingTransaction(requestParameters.payloadHash, requestParameters.transactionApprovalRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if a given erc191 message is valid
         * @summary Evaluate an erc191 message to sign
         * @param {GuardianApiEvaluateErc191MessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateErc191Message(requestParameters: GuardianApiEvaluateErc191MessageRequest, options?: AxiosRequestConfig): AxiosPromise<MessageEvaluationResponse> {
            return localVarFp.evaluateErc191Message(requestParameters.eRC191MessageEvaluationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if a given message is valid  for EVM
         * @summary Evaluate an evm message to sign
         * @param {GuardianApiEvaluateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateMessage(requestParameters: GuardianApiEvaluateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<MessageEvaluationResponse> {
            return localVarFp.evaluateMessage(requestParameters.messageEvaluationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if the transaction is valid by transaction ID for both StarkEx and EVM
         * @summary Evaluate a transaction
         * @param {GuardianApiEvaluateTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluateTransaction(requestParameters: GuardianApiEvaluateTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<TransactionEvaluationResponse> {
            return localVarFp.evaluateTransaction(requestParameters.id, requestParameters.transactionEvaluationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an erc191 message by id
         * @summary Info for a specific erc191 message
         * @param {GuardianApiGetErc191MessageByIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getErc191MessageByID(requestParameters: GuardianApiGetErc191MessageByIDRequest, options?: AxiosRequestConfig): AxiosPromise<Erc191MessageResponse> {
            return localVarFp.getErc191MessageByID(requestParameters.messageID, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an evm message by id
         * @summary Info for a specific evm message
         * @param {GuardianApiGetMessageByIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageByID(requestParameters: GuardianApiGetMessageByIDRequest, options?: AxiosRequestConfig): AxiosPromise<EVMMessage> {
            return localVarFp.getMessageByID(requestParameters.messageID, requestParameters.includeSimulation, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a transaction by payload hash
         * @summary Info for a specific transaction
         * @param {GuardianApiGetTransactionByIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionByID(requestParameters: GuardianApiGetTransactionByIDRequest, options?: AxiosRequestConfig): AxiosPromise<Transaction> {
            return localVarFp.getTransactionByID(requestParameters.transactionID, requestParameters.chainType, requestParameters.chainID, requestParameters.includeSimulation, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approvePendingERC191Message operation in GuardianApi.
 * @export
 * @interface GuardianApiApprovePendingERC191MessageRequest
 */
export interface GuardianApiApprovePendingERC191MessageRequest {
    /**
     * id for the message
     * @type {string}
     * @memberof GuardianApiApprovePendingERC191Message
     */
    readonly messageID: string
}

/**
 * Request parameters for approvePendingMessage operation in GuardianApi.
 * @export
 * @interface GuardianApiApprovePendingMessageRequest
 */
export interface GuardianApiApprovePendingMessageRequest {
    /**
     * id for the message
     * @type {string}
     * @memberof GuardianApiApprovePendingMessage
     */
    readonly messageID: string
}

/**
 * Request parameters for approvePendingTransaction operation in GuardianApi.
 * @export
 * @interface GuardianApiApprovePendingTransactionRequest
 */
export interface GuardianApiApprovePendingTransactionRequest {
    /**
     * Hash for the payload
     * @type {string}
     * @memberof GuardianApiApprovePendingTransaction
     */
    readonly payloadHash: string

    /**
     * request body for approving a pending transaction
     * @type {TransactionApprovalRequest}
     * @memberof GuardianApiApprovePendingTransaction
     */
    readonly transactionApprovalRequest: TransactionApprovalRequest
}

/**
 * Request parameters for evaluateErc191Message operation in GuardianApi.
 * @export
 * @interface GuardianApiEvaluateErc191MessageRequest
 */
export interface GuardianApiEvaluateErc191MessageRequest {
    /**
     * Specifies the kind of transaction
     * @type {ERC191MessageEvaluationRequest}
     * @memberof GuardianApiEvaluateErc191Message
     */
    readonly eRC191MessageEvaluationRequest: ERC191MessageEvaluationRequest
}

/**
 * Request parameters for evaluateMessage operation in GuardianApi.
 * @export
 * @interface GuardianApiEvaluateMessageRequest
 */
export interface GuardianApiEvaluateMessageRequest {
    /**
     * Specifies the kind of transaction
     * @type {MessageEvaluationRequest}
     * @memberof GuardianApiEvaluateMessage
     */
    readonly messageEvaluationRequest: MessageEvaluationRequest
}

/**
 * Request parameters for evaluateTransaction operation in GuardianApi.
 * @export
 * @interface GuardianApiEvaluateTransactionRequest
 */
export interface GuardianApiEvaluateTransactionRequest {
    /**
     * Transaction identifier: payloadHash on StarkEx or EVM ID
     * @type {string}
     * @memberof GuardianApiEvaluateTransaction
     */
    readonly id: string

    /**
     * Specifies the kind of transaction
     * @type {TransactionEvaluationRequest}
     * @memberof GuardianApiEvaluateTransaction
     */
    readonly transactionEvaluationRequest: TransactionEvaluationRequest
}

/**
 * Request parameters for getErc191MessageByID operation in GuardianApi.
 * @export
 * @interface GuardianApiGetErc191MessageByIDRequest
 */
export interface GuardianApiGetErc191MessageByIDRequest {
    /**
     * The id of the erc191 message
     * @type {string}
     * @memberof GuardianApiGetErc191MessageByID
     */
    readonly messageID: string
}

/**
 * Request parameters for getMessageByID operation in GuardianApi.
 * @export
 * @interface GuardianApiGetMessageByIDRequest
 */
export interface GuardianApiGetMessageByIDRequest {
    /**
     * The id of the evm message
     * @type {string}
     * @memberof GuardianApiGetMessageByID
     */
    readonly messageID: string

    /**
     * Include simulation results
     * @type {boolean}
     * @memberof GuardianApiGetMessageByID
     */
    readonly includeSimulation?: boolean
}

/**
 * Request parameters for getTransactionByID operation in GuardianApi.
 * @export
 * @interface GuardianApiGetTransactionByIDRequest
 */
export interface GuardianApiGetTransactionByIDRequest {
    /**
     * The id of the starkex transaction to retrieve
     * @type {string}
     * @memberof GuardianApiGetTransactionByID
     */
    readonly transactionID: string

    /**
     * roll up type
     * @type {'starkex' | 'evm'}
     * @memberof GuardianApiGetTransactionByID
     */
    readonly chainType: GetTransactionByIDChainTypeEnum

    /**
     * ID of evm chain
     * @type {string}
     * @memberof GuardianApiGetTransactionByID
     */
    readonly chainID?: string

    /**
     * Include simulation results
     * @type {boolean}
     * @memberof GuardianApiGetTransactionByID
     */
    readonly includeSimulation?: boolean
}

/**
 * GuardianApi - object-oriented interface
 * @export
 * @class GuardianApi
 * @extends {BaseAPI}
 */
export class GuardianApi extends BaseAPI {
    /**
     * Approve a pending erc191 message
     * @summary Approve a pending erc191 message
     * @param {GuardianApiApprovePendingERC191MessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardianApi
     */
    public approvePendingERC191Message(requestParameters: GuardianApiApprovePendingERC191MessageRequest, options?: AxiosRequestConfig) {
        return GuardianApiFp(this.configuration).approvePendingERC191Message(requestParameters.messageID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Approve a pending evm message
     * @summary Approve a pending evm message
     * @param {GuardianApiApprovePendingMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardianApi
     */
    public approvePendingMessage(requestParameters: GuardianApiApprovePendingMessageRequest, options?: AxiosRequestConfig) {
        return GuardianApiFp(this.configuration).approvePendingMessage(requestParameters.messageID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Approve a pending transaction
     * @summary Approve a pending transaction given chain
     * @param {GuardianApiApprovePendingTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardianApi
     */
    public approvePendingTransaction(requestParameters: GuardianApiApprovePendingTransactionRequest, options?: AxiosRequestConfig) {
        return GuardianApiFp(this.configuration).approvePendingTransaction(requestParameters.payloadHash, requestParameters.transactionApprovalRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if a given erc191 message is valid
     * @summary Evaluate an erc191 message to sign
     * @param {GuardianApiEvaluateErc191MessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardianApi
     */
    public evaluateErc191Message(requestParameters: GuardianApiEvaluateErc191MessageRequest, options?: AxiosRequestConfig) {
        return GuardianApiFp(this.configuration).evaluateErc191Message(requestParameters.eRC191MessageEvaluationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if a given message is valid  for EVM
     * @summary Evaluate an evm message to sign
     * @param {GuardianApiEvaluateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardianApi
     */
    public evaluateMessage(requestParameters: GuardianApiEvaluateMessageRequest, options?: AxiosRequestConfig) {
        return GuardianApiFp(this.configuration).evaluateMessage(requestParameters.messageEvaluationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if the transaction is valid by transaction ID for both StarkEx and EVM
     * @summary Evaluate a transaction
     * @param {GuardianApiEvaluateTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardianApi
     */
    public evaluateTransaction(requestParameters: GuardianApiEvaluateTransactionRequest, options?: AxiosRequestConfig) {
        return GuardianApiFp(this.configuration).evaluateTransaction(requestParameters.id, requestParameters.transactionEvaluationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an erc191 message by id
     * @summary Info for a specific erc191 message
     * @param {GuardianApiGetErc191MessageByIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardianApi
     */
    public getErc191MessageByID(requestParameters: GuardianApiGetErc191MessageByIDRequest, options?: AxiosRequestConfig) {
        return GuardianApiFp(this.configuration).getErc191MessageByID(requestParameters.messageID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an evm message by id
     * @summary Info for a specific evm message
     * @param {GuardianApiGetMessageByIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardianApi
     */
    public getMessageByID(requestParameters: GuardianApiGetMessageByIDRequest, options?: AxiosRequestConfig) {
        return GuardianApiFp(this.configuration).getMessageByID(requestParameters.messageID, requestParameters.includeSimulation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a transaction by payload hash
     * @summary Info for a specific transaction
     * @param {GuardianApiGetTransactionByIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GuardianApi
     */
    public getTransactionByID(requestParameters: GuardianApiGetTransactionByIDRequest, options?: AxiosRequestConfig) {
        return GuardianApiFp(this.configuration).getTransactionByID(requestParameters.transactionID, requestParameters.chainType, requestParameters.chainID, requestParameters.includeSimulation, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetTransactionByIDChainTypeEnum = {
    Starkex: 'starkex',
    Evm: 'evm'
} as const;
export type GetTransactionByIDChainTypeEnum = typeof GetTransactionByIDChainTypeEnum[keyof typeof GetTransactionByIDChainTypeEnum];
