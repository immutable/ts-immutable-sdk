/* tslint:disable */
/* eslint-disable */
/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { AssetCollectionItem } from './asset-collection-item';
// May contain unused imports in some cases
// @ts-ignore
import { ERC20Item } from './erc20-item';
// May contain unused imports in some cases
// @ts-ignore
import { Fee } from './fee';
// May contain unused imports in some cases
// @ts-ignore
import { ProtocolData } from './protocol-data';

/**
 * 
 * @export
 * @interface CreateCollectionBidRequestBody
 */
export interface CreateCollectionBidRequestBody {
    /**
     * 
     * @type {string}
     * @memberof CreateCollectionBidRequestBody
     */
    'account_address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCollectionBidRequestBody
     */
    'order_hash': string;
    /**
     * Buy item for collection bid should either be ERC721 or ERC1155 collection item
     * @type {Array<AssetCollectionItem>}
     * @memberof CreateCollectionBidRequestBody
     */
    'buy': Array<AssetCollectionItem>;
    /**
     * Buy fees should only include maker marketplace fees and should be no more than two entries as more entires will incur more gas. It is best practice to have this as few as possible.
     * @type {Array<Fee>}
     * @memberof CreateCollectionBidRequestBody
     */
    'fees': Array<Fee>;
    /**
     * Time after which the Order is considered expired
     * @type {string}
     * @memberof CreateCollectionBidRequestBody
     */
    'end_at': string;
    /**
     * 
     * @type {ProtocolData}
     * @memberof CreateCollectionBidRequestBody
     */
    'protocol_data': ProtocolData;
    /**
     * A random value added to the create Order request
     * @type {string}
     * @memberof CreateCollectionBidRequestBody
     */
    'salt': string;
    /**
     * Sell item for collection bid should be an ERC20 item
     * @type {Array<ERC20Item>}
     * @memberof CreateCollectionBidRequestBody
     */
    'sell': Array<ERC20Item>;
    /**
     * Digital signature generated by the user for the specific Order
     * @type {string}
     * @memberof CreateCollectionBidRequestBody
     */
    'signature': string;
    /**
     * Time after which Order is considered active
     * @type {string}
     * @memberof CreateCollectionBidRequestBody
     */
    'start_at': string;
}

