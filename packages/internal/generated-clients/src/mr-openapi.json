{
  "openapi": "3.0.2",
  "info": {
    "title": "Immutable zkEVM API",
    "version": "1.0.0",
    "description": "Immutable Multi Rollup API",
    "contact": {
      "name": "Immutable API Support",
      "email": "support@immutable.com",
      "url": "https://support.immutable.com"
    }
  },
  "servers": [
    {
      "url": "https://api.sandbox.immutable.com"
    }
  ],
  "tags": [
    {
      "name": "activities",
      "description": "Activities Endpoints",
      "x-displayName": "activities"
    },
    {
      "name": "chains",
      "description": "Chains Endpoints",
      "x-displayName": "chains"
    },
    {
      "name": "collections",
      "description": "Collections Endpoints",
      "x-displayName": "collections"
    },
    {
      "name": "nfts",
      "description": "NFTs Endpoints",
      "x-displayName": "nfts"
    },
    {
      "name": "nft owners",
      "description": "NFT Owner Endpoints",
      "x-displayName": "nft owners"
    },
    {
      "name": "metadata",
      "description": "NFT Metadata Endpoints",
      "x-displayName": "metadata"
    },
    {
      "name": "tokens",
      "description": "ERC20 Token Endpoints",
      "x-displayName": "tokens"
    },
    {
      "name": "demopage",
      "description": "Temporary HTML endpoint for demo purposes",
      "x-displayName": "demopage"
    },
    {
      "name": "listings",
      "description": "Listings Endpoints",
      "x-displayName": "listings"
    },
    {
      "name": "orders",
      "x-displayName": "orders"
    },
    {
      "name": "passport",
      "description": "Passport operations",
      "x-displayName": "passport"
    }
  ],
  "paths": {
    "/v1/chains/{chain_name}/activity-history": {
      "get": {
        "tags": [
          "activities"
        ],
        "operationId": "ListActivityHistory",
        "summary": "List history of activities",
        "description": "List activities sorted by updated_at timestamp ascending, useful for time based data replication",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "in": "path",
            "required": true,
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "From indexed at including given date",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "to_updated_at",
            "in": "query",
            "required": false,
            "description": "To indexed at including given date",
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "contract_address",
            "in": "query",
            "description": "The contract address of the collection",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActivitiesResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/activities": {
      "get": {
        "tags": [
          "activities"
        ],
        "operationId": "ListActivities",
        "summary": "List all activities",
        "description": "List all activities",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "in": "path",
            "required": true,
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "query",
            "description": "The contract address of NFT or ERC20 Token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "token_id",
            "in": "query",
            "description": "An `uint256` token id as string",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "1"
          },
          {
            "name": "account_address",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3",
            "description": "The account address activity contains"
          },
          {
            "name": "activity_type",
            "in": "query",
            "description": "The activity type",
            "required": false,
            "example": "burn",
            "schema": {
              "$ref": "#/components/schemas/ActivityType"
            }
          },
          {
            "name": "transaction_hash",
            "in": "query",
            "description": "The transaction hash of activity",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x68d9eac5e3b3c3580404989a4030c948a78e1b07b2b5ea5688d8c38a6c61c93e"
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActivitiesResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/activities/{activity_id}": {
      "get": {
        "tags": [
          "activities"
        ],
        "operationId": "GetActivity",
        "summary": "Get a single activity by ID",
        "description": "Get a single activity by ID",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "in": "path",
            "required": true,
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "activity_id",
            "description": "The id of activity",
            "schema": {
              "$ref": "#/components/schemas/ActivityID"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActivityResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections": {
      "get": {
        "description": "List all collections",
        "tags": [
          "collections"
        ],
        "operationId": "ListCollections",
        "summary": "List all collections",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "description": "The name of chain",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "query",
            "required": false,
            "description": "List of contract addresses to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}": {
      "get": {
        "description": "Get collection by contract address",
        "tags": [
          "collections"
        ],
        "operationId": "GetCollection",
        "summary": "Get collection by contract address",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCollectionResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/refresh-metadata": {
      "post": {
        "description": "Refresh collection metadata",
        "summary": "Refresh collection metadata",
        "tags": [
          "collections"
        ],
        "operationId": "RefreshCollectionMetadata",
        "security": [
          {
            "ImmutableApiKey": [
              "refresh:metadata"
            ]
          }
        ],
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          }
        ],
        "requestBody": {
          "description": "The request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshCollectionMetadataRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshCollectionMetadataResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/accounts/{account_address}/collections": {
      "get": {
        "description": "List collections by NFT owner account address",
        "tags": [
          "collections"
        ],
        "operationId": "ListCollectionsByNFTOwner",
        "summary": "List collections by NFT owner",
        "parameters": [
          {
            "name": "account_address",
            "in": "path",
            "description": "Account address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts/{token_id}": {
      "get": {
        "description": "Get NFT by token ID",
        "tags": [
          "nfts"
        ],
        "summary": "Get NFT by token ID",
        "operationId": "GetNFT",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The address of NFT contract",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "token_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "An `uint256` token id as string",
            "example": "1"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNFTResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/metadata/{metadata_id}": {
      "get": {
        "description": "Get metadata by ID",
        "tags": [
          "metadata"
        ],
        "summary": "Get metadata by ID",
        "operationId": "GetMetadata",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The address of metadata contract",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "metadata_id",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MetadataID"
            },
            "description": "The id of the metadata"
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMetadataResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/metadata": {
      "get": {
        "description": "Get a list of metadata from the given contract",
        "tags": [
          "metadata"
        ],
        "summary": "Get a list of metadata from the given contract",
        "operationId": "ListMetadata",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The address of metadata contract",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMetadataResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/metadata": {
      "get": {
        "description": "Get a list of metadata from the given chain",
        "tags": [
          "metadata"
        ],
        "summary": "Get a list of metadata from the given chain",
        "operationId": "ListMetadataForChain",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMetadataResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/metadata/refresh-metadata": {
      "post": {
        "x-go-name": "RefreshMetadataByID",
        "operationId": "RefreshMetadataByID",
        "description": "Refresh stacked metadata",
        "summary": "Refresh stacked metadata",
        "tags": [
          "metadata"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ChainName"
          },
          {
            "$ref": "#/components/parameters/ContractAddress"
          }
        ],
        "security": [
          {
            "ImmutableApiKey": [
              "refresh:metadata"
            ]
          }
        ],
        "requestBody": {
          "description": "NFT Metadata Refresh Request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshMetadataByIDRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "imx-refreshes-limit": {
                "$ref": "#/components/headers/MetadataRefreshLimit"
              },
              "imx-refresh-limit-reset": {
                "$ref": "#/components/headers/MetadataRefreshLimitReset"
              },
              "imx-remaining-refreshes": {
                "$ref": "#/components/headers/MetadataRefreshLimitRemaining"
              },
              "retry-after": {
                "$ref": "#/components/headers/MetadataRefreshRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataRefreshRateLimitResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyMetadataRefreshes"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts": {
      "get": {
        "description": "List NFTs by contract address",
        "tags": [
          "nfts"
        ],
        "summary": "List NFTs by contract address",
        "operationId": "ListNFTs",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "required": true,
            "description": "Contract address",
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/accounts/{account_address}/nfts": {
      "get": {
        "description": "List NFTs by account address",
        "tags": [
          "nfts"
        ],
        "operationId": "ListNFTsByAccountAddress",
        "summary": "List NFTs by account address",
        "parameters": [
          {
            "name": "account_address",
            "in": "path",
            "description": "Account address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "query",
            "description": "The address of contract",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTsByOwnerResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts/{token_id}/owners": {
      "get": {
        "description": "List NFT owners by token ID",
        "tags": [
          "nft owners"
        ],
        "operationId": "ListNFTOwners",
        "summary": "List NFT owners by token ID",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "token_id",
            "in": "path",
            "description": "An `uint256` token id as string",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTOwnersResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/nfts": {
      "get": {
        "description": "List all NFTs on a chain",
        "tags": [
          "nfts"
        ],
        "operationId": "ListAllNFTs",
        "summary": "List all NFTs",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/nft-owners": {
      "get": {
        "description": "List all NFT owners on a chain",
        "tags": [
          "nft owners"
        ],
        "operationId": "ListAllNFTOwners",
        "summary": "List all NFT owners",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTOwnersResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/owners": {
      "get": {
        "description": "List owners by contract address",
        "tags": [
          "nft owners"
        ],
        "operationId": "ListOwnersByContractAddress",
        "summary": "List owners by contract address",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionOwnersResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/tokens": {
      "get": {
        "description": "List ERC20 tokens",
        "tags": [
          "tokens"
        ],
        "operationId": "ListERC20Tokens",
        "summary": "List ERC20 tokens",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "Datetime to use as the oldest updated timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTokensResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/tokens/{contract_address}": {
      "get": {
        "description": "Get single ERC20 token",
        "tags": [
          "tokens"
        ],
        "operationId": "GetERC20Token",
        "summary": "Get single ERC20 token",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTokenResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains": {
      "get": {
        "description": "List supported chains",
        "summary": "List supported chains",
        "tags": [
          "chains"
        ],
        "operationId": "ListChains",
        "parameters": [
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListChainsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts/refresh-metadata": {
      "post": {
        "description": "Refresh NFT metadata",
        "summary": "Refresh NFT metadata",
        "tags": [
          "metadata"
        ],
        "operationId": "RefreshNFTMetadataByTokenID",
        "security": [
          {
            "ImmutableApiKey": [
              "refresh:metadata"
            ]
          }
        ],
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "requestBody": {
          "description": "the request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshNFTMetadataByTokenIDRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "imx-refreshes-limit": {
                "$ref": "#/components/headers/MetadataRefreshLimit"
              },
              "imx-refresh-limit-reset": {
                "$ref": "#/components/headers/MetadataRefreshLimitReset"
              },
              "imx-remaining-refreshes": {
                "$ref": "#/components/headers/MetadataRefreshLimitRemaining"
              },
              "retry-after": {
                "$ref": "#/components/headers/MetadataRefreshRetryAfter"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataRefreshRateLimitResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyMetadataRefreshes"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/orders/cancel": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Cancel one or more orders",
        "description": "Cancel one or more orders",
        "operationId": "CancelOrders",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrdersRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Orders cancellation response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelOrdersResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorisedRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "501": {
            "$ref": "#/components/responses/NotImplementedError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/orders/listings": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "List all listings",
        "description": "List all listings",
        "operationId": "ListListings",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Order status to filter by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderStatusName"
            }
          },
          {
            "name": "sell_item_contract_address",
            "in": "query",
            "description": "Sell item contract address to filter by",
            "required": false,
            "schema": {
              "type": "string",
              "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            }
          },
          {
            "name": "buy_item_contract_address",
            "in": "query",
            "description": "Buy item contract address to filter by",
            "required": false,
            "schema": {
              "type": "string",
              "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            }
          },
          {
            "name": "account_address",
            "in": "query",
            "description": "The account address of the user who created the listing",
            "required": false,
            "schema": {
              "type": "string",
              "example": "0xc49Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            }
          },
          {
            "name": "sell_item_metadata_id",
            "in": "query",
            "description": "The metadata_id of the sell item",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "020792C9-4AD7-8EC4-4038-9E05C598535B"
            }
          },
          {
            "name": "sell_item_token_id",
            "in": "query",
            "description": "Sell item token identifier to filter by",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1",
              "pattern": "\\d+"
            }
          },
          {
            "name": "from_updated_at",
            "in": "query",
            "description": "From updated at including given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-03-09T05:00:50.52Z"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Maximum number of orders to return per page",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Order field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at",
                "buy_item_amount"
              ],
              "description": "Order field to sort by",
              "example": "created_at"
            },
            "example": "created_at"
          },
          {
            "name": "sort_direction",
            "in": "query",
            "description": "Ascending or descending direction for sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "description": "Ascending or descending direction for sort",
              "example": "asc"
            },
            "example": "asc"
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListListingsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Create a listing",
        "description": "Create a listing",
        "operationId": "CreateListing",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateListingRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/orders/listings/{listing_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get a single listing by ID",
        "description": "Get a single listing by ID",
        "operationId": "GetListing",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "listing_id",
            "in": "path",
            "description": "Global Order identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Global Order identifier",
              "example": "018792C9-4AD7-8EC4-4038-9E05C598534A"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/orders/fulfillment-data": {
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Retrieve fulfillment data for orders",
        "description": "Retrieve signed fulfillment data based on the list of order IDs and corresponding fees.",
        "operationId": "fulfillment_data",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FulfillmentDataRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "fulfillable_orders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/FulfillableOrder"
                          }
                        },
                        "unfulfillable_orders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/UnfulfillableOrder"
                          }
                        }
                      },
                      "required": [
                        "fulfillable_orders",
                        "unfulfillable_orders"
                      ]
                    }
                  },
                  "required": [
                    "result"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/trades": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "List all trades",
        "description": "List all trades",
        "operationId": "ListTrades",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "account_address",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Account address to filter trades by (includes buy and sell trades)",
              "example": "0x784578949A4A50DeA641Fb15dd2B11C72E76919a",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            }
          },
          {
            "name": "from_indexed_at",
            "in": "query",
            "description": "From indexed at including given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "example": "2022-03-09T05:00:50.52Z"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Maximum number of trades to return per page",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Trade field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "indexed_at"
              ],
              "description": "Trade field to sort by",
              "example": "indexed_at"
            },
            "example": "indexed_at"
          },
          {
            "name": "sort_direction",
            "in": "query",
            "description": "Ascending or descending direction for sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "description": "Ascending or descending direction for sort",
              "example": "asc"
            },
            "example": "asc"
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTradeResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/trades/{trade_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get a single trade by ID",
        "description": "Get a single trade by ID",
        "operationId": "GetTrade",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "trade_id",
            "in": "path",
            "description": "Global Trade identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "Global Trade identifier",
              "example": "018792C9-4AD7-8EC4-4038-9E05C598534A"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/passport-mr/v1/counterfactual-address": {
      "post": {
        "summary": "Create a counterfactual address",
        "description": "Create a counterfactual address for a user based on their Ethereum address",
        "tags": [
          "passport"
        ],
        "operationId": "createCounterfactualAddressDeprecated",
        "security": [
          {
            "BearerAuth": [
              "transact"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCounterfactualAddressRequestDeprecated"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Counterfactual address created response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCounterfactualAddressResDeprecated"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError400"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError401"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError403"
                }
              }
            }
          },
          "429": {
            "description": "TooManyRequestsError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError429"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError500"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicAPIError"
                }
              }
            }
          }
        }
      }
    },
    "/passport-mr/v1/users/{userId}/linked-addresses": {
      "get": {
        "summary": "Get Ethereum linked addresses for a user",
        "description": "Get all the Ethereum linked addresses for a user based on its userId",
        "tags": [
          "passport"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user's userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "getLinkedAddressesDeprecated",
        "security": [
          {
            "BearerAuth": [
              "openid"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "User's list of linked addresses response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLinkedAddressesResDeprecated"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError400"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError401"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError403"
                }
              }
            }
          },
          "429": {
            "description": "TooManyRequestsError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError429"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError500"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicAPIError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chain_name}/passport/counterfactual-address": {
      "post": {
        "summary": "Create a counterfactual address",
        "description": "Create a counterfactual address for a user based on their Ethereum address",
        "tags": [
          "passport"
        ],
        "operationId": "createCounterfactualAddress",
        "security": [
          {
            "BearerAuth": [
              "transact"
            ]
          }
        ],
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCounterfactualAddressRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Counterfactual address created response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCounterfactualAddressRes"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError400"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError401"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError403"
                }
              }
            }
          },
          "429": {
            "description": "TooManyRequestsError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError429"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError500"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicAPIError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chain_name}/passport/users/{user_id}/linked-addresses": {
      "get": {
        "summary": "Get Ethereum linked addresses for a user",
        "description": "Get all the Ethereum linked addresses for a user based on its userId",
        "tags": [
          "passport"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The user's userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "operationId": "getLinkedAddresses",
        "security": [
          {
            "BearerAuth": [
              "openid"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "User's list of linked addresses response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLinkedAddressesRes"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError400"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError401"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError403"
                }
              }
            }
          },
          "429": {
            "description": "TooManyRequestsError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError429"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError500"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicAPIError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chain_name}/passport/transaction-metadata": {
      "get": {
        "summary": "Get a contract abi",
        "description": "Get a contract abi by contract address and method id",
        "tags": [
          "passport"
        ],
        "operationId": "getContractAbi",
        "security": [
          {
            "BearerAuth": [
              "transact"
            ]
          }
        ],
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "in": "query",
            "name": "contract_address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "contract address"
          },
          {
            "in": "query",
            "name": "method_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "method id"
          }
        ],
        "responses": {
          "200": {
            "description": "Counterfactual address created response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContractAbiRes"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError400"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError401"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError403"
                }
              }
            }
          },
          "404": {
            "description": "NotFoundError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError404"
                }
              }
            }
          },
          "429": {
            "description": "TooManyRequestsError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError429"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError500"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicAPIError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "ImmutableApiKey": {
        "x-go-name": "ImmutableApiKey",
        "type": "apiKey",
        "in": "header",
        "name": "x-immutable-api-key"
      }
    },
    "parameters": {
      "ChainName": {
        "name": "chain_name",
        "description": "The name of chain",
        "in": "path",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ChainName"
        },
        "examples": {
          "testnet": {
            "value": "imtbl-zkevm-testnet",
            "summary": "Immutable zkEVM Public Testnet"
          }
        }
      },
      "ContractAddress": {
        "name": "contract_address",
        "in": "path",
        "required": true,
        "description": "Contract address",
        "schema": {
          "$ref": "#/components/schemas/Address"
        }
      }
    },
    "responses": {
      "NotFound": {
        "description": "The specified resource was not found (404)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError404"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request (400)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError400"
            }
          }
        }
      },
      "UnauthorisedRequest": {
        "description": "Unauthorised Request (401)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError401"
            }
          }
        }
      },
      "ForbiddenRequest": {
        "description": "Forbidden Request (403)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError403"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too Many Requests (429)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError429"
            }
          }
        }
      },
      "TooManyMetadataRefreshes": {
        "description": "Too Many Metadata refreshes (429)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError429"
            }
          }
        },
        "headers": {
          "imx-refreshes-limit": {
            "$ref": "#/components/headers/MetadataRefreshLimit"
          },
          "imx-refresh-limit-reset": {
            "$ref": "#/components/headers/MetadataRefreshLimitReset"
          },
          "imx-remaining-refreshes": {
            "$ref": "#/components/headers/MetadataRefreshLimitRemaining"
          },
          "retry-after": {
            "$ref": "#/components/headers/MetadataRefreshRetryAfter"
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error (500)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError500"
            }
          }
        }
      },
      "NotImplementedError": {
        "description": "Not Implemented Error (501)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError501"
            }
          }
        }
      }
    },
    "headers": {
      "MetadataRefreshLimit": {
        "description": "The refresh request limit available to the project for each one-hour window.",
        "schema": {
          "type": "string"
        }
      },
      "MetadataRefreshLimitReset": {
        "description": "The expiry date of the current one-hour window.",
        "schema": {
          "type": "string"
        }
      },
      "MetadataRefreshLimitRemaining": {
        "description": "The number of refresh requests remaining in the current window.",
        "schema": {
          "type": "string"
        }
      },
      "MetadataRefreshRetryAfter": {
        "description": "The number of seconds until the next refresh request can be made.",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "PageSize": {
        "type": "integer",
        "format": "int32",
        "description": "Maximum number of items to return",
        "minimum": 1,
        "default": 100,
        "maximum": 200,
        "example": 10
      },
      "PageCursor": {
        "type": "string",
        "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
        "example": "ewogICJ0eXBlIjogInByZXYiLAogICJpdGVtIjogewogICAgImlkIjogNjI3NTEzMCwKICAgICJjcmVhdGVkX2F0IjogIjIwMjItMDktMTNUMTc6MDQ6MTIuMDI0MTI2WiIKICB9Cn0="
      },
      "Page": {
        "type": "object",
        "description": "Pagination properties",
        "properties": {
          "previous_cursor": {
            "type": "string",
            "nullable": true,
            "description": "First item as an encoded string",
            "example": "ewogICJ0eXBlIjogInByZXYiLAogICJpdGVtIjogewogICAgImlkIjogNjI3NTEzMCwKICAgICJjcmVhdGVkX2F0IjogIjIwMjItMDktMTNUMTc6MDQ6MTIuMDI0MTI2WiIKICB9Cn0="
          },
          "next_cursor": {
            "type": "string",
            "nullable": true,
            "description": "Last item as an encoded string",
            "example": "ewogICJ0eXBlIjogInByZXYiLAogICJpdGVtIjogewogICAgImlkIjogNjI3NTEzMCwKICAgICJjcmVhdGVkX2F0IjogIjIwMjItMDktMTNUMTc6MDQ6MTIuMDI0MTI2WiIKICB9Cn0="
          }
        },
        "required": [
          "previous_cursor",
          "next_cursor"
        ]
      },
      "ActivityType": {
        "description": "The activity type",
        "example": "mint",
        "type": "string",
        "enum": [
          "mint",
          "burn",
          "transfer",
          "sale",
          "deposit",
          "withdrawal"
        ]
      },
      "ActivityNFT": {
        "type": "object",
        "properties": {
          "contract_type": {
            "$ref": "#/components/schemas/NFTContractType"
          },
          "contract_address": {
            "description": "The token contract address",
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "token_id": {
            "description": "An `uint256` token id as string",
            "type": "string",
            "example": "1"
          }
        },
        "required": [
          "contract_type",
          "contract_address",
          "token_id"
        ]
      },
      "ActivityToken": {
        "type": "object",
        "properties": {
          "contract_type": {
            "$ref": "#/components/schemas/TokenContractType"
          },
          "contract_address": {
            "description": "The contract address",
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          }
        },
        "required": [
          "contract_type",
          "contract_address"
        ]
      },
      "ActivityAsset": {
        "description": "The contract and asset details for this activity",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ActivityNFT"
          },
          {
            "$ref": "#/components/schemas/ActivityToken"
          }
        ],
        "discriminator": {
          "propertyName": "contract_type"
        }
      },
      "Address": {
        "x-go-type": "common.Address",
        "x-go-type-import": {
          "path": "github.com/ethereum/go-ethereum/common",
          "name": "common"
        },
        "description": "An Ethereum address",
        "type": "string",
        "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3",
        "pattern": "^0x[a-fA-F0-9]{40}$"
      },
      "Mint": {
        "type": "object",
        "description": "The mint activity details",
        "properties": {
          "to": {
            "description": "The account address the asset was minted to",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The minted amount",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "to",
          "amount",
          "asset"
        ]
      },
      "Deposit": {
        "type": "object",
        "description": "The deposit activity details",
        "properties": {
          "to": {
            "description": "The account address the asset was deposited to",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The deposited amount",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "to",
          "amount",
          "asset"
        ]
      },
      "Burn": {
        "description": "The burn activity details",
        "type": "object",
        "properties": {
          "from": {
            "description": "The account address the asset was transferred from",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The amount of assets burnt",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "from",
          "amount",
          "asset"
        ]
      },
      "Withdrawal": {
        "description": "The withdrawal activity details",
        "type": "object",
        "properties": {
          "from": {
            "description": "The account address the asset was withdrawn from",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The amount of assets withdrawn",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "from",
          "amount",
          "asset"
        ]
      },
      "Transfer": {
        "type": "object",
        "description": "The transfer activity details",
        "properties": {
          "from": {
            "description": "The account address the asset was transferred from",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "to": {
            "description": "The account address the asset was transferred to",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The amount of assets transferred",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "activity_type",
          "from",
          "to",
          "amount",
          "asset"
        ]
      },
      "ActivityNativeToken": {
        "type": "object",
        "properties": {
          "symbol": {
            "description": "The token symbol",
            "type": "string",
            "example": "ETH"
          }
        },
        "required": [
          "symbol"
        ]
      },
      "SalePayment": {
        "type": "object",
        "properties": {
          "token": {
            "description": "The type of payment token",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ActivityToken"
              },
              {
                "$ref": "#/components/schemas/ActivityNativeToken"
              }
            ]
          },
          "price_excluding_fees": {
            "description": "The base price of the sale not including any fees",
            "type": "string",
            "example": "180"
          },
          "price_including_fees": {
            "description": "The total price of the sale. Includes the sum of all fees",
            "type": "string",
            "example": "200"
          },
          "fees": {
            "description": "The fees associated with this sale",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleFee"
            },
            "example": [
              {
                "address": "0xB0F3749458169B7Ad51B5503CC3649DE55c2D0D2",
                "amount": "20",
                "type": "ROYALTY"
              }
            ],
            "minItems": 0
          }
        },
        "required": [
          "token",
          "price_excluding_fees",
          "price_including_fees",
          "fees"
        ]
      },
      "SaleFee": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Fee payable to recipient upon settlement",
            "example": "200"
          },
          "type": {
            "type": "string",
            "description": "Fee type",
            "example": "ROYALTY",
            "enum": [
              "ROYALTY"
            ]
          },
          "recipient": {
            "type": "string",
            "description": "Wallet address of fee recipient",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233"
          }
        }
      },
      "NFTSale": {
        "description": "The NFT Sale activity details",
        "type": "object",
        "properties": {
          "order_id": {
            "description": "The id of order",
            "type": "string",
            "example": "ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "to": {
            "description": "The account address of buyer",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "from": {
            "description": "The account address of seller",
            "type": "string",
            "example": "0xbD6cFcf93474De653d7B42b346c7c25d1F9c559C"
          },
          "asset": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityNFT"
            }
          },
          "payment": {
            "$ref": "#/components/schemas/SalePayment"
          }
        },
        "required": [
          "order_id",
          "to",
          "from",
          "asset",
          "payment"
        ]
      },
      "ActivityDetails": {
        "description": "The activity details",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Mint"
          },
          {
            "$ref": "#/components/schemas/Burn"
          },
          {
            "$ref": "#/components/schemas/Transfer"
          },
          {
            "$ref": "#/components/schemas/NFTSale"
          },
          {
            "$ref": "#/components/schemas/Deposit"
          },
          {
            "$ref": "#/components/schemas/Withdrawal"
          }
        ]
      },
      "BlockchainMetadata": {
        "description": "The metadata related to blockchain transaction",
        "nullable": true,
        "type": "object",
        "properties": {
          "transaction_hash": {
            "type": "string",
            "description": "The transaction hash of the activity",
            "example": "0x68d9eac5e3b3c3580404989a4030c948a78e1b07b2b5ea5688d8c38a6c61c93e"
          },
          "block_number": {
            "description": "EVM block number (uint64 as string)",
            "type": "string",
            "example": "1"
          },
          "transaction_index": {
            "description": "Transaction index in a block (uint32 as string)",
            "type": "string",
            "example": "1"
          },
          "log_index": {
            "description": "The log index of activity in a block (uint32 as string)",
            "type": "string",
            "nullable": true,
            "example": "1"
          }
        },
        "required": [
          "transaction_hash",
          "block_number",
          "transaction_index",
          "log_index"
        ]
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ActivityID"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "type": {
            "$ref": "#/components/schemas/ActivityType"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetails"
          },
          "updated_at": {
            "type": "string",
            "description": "The time activity was updated at",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "indexed_at": {
            "type": "string",
            "description": "The time activity was indexed",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "blockchain_metadata": {
            "$ref": "#/components/schemas/BlockchainMetadata"
          }
        },
        "required": [
          "id",
          "chain",
          "type",
          "details",
          "indexed_at",
          "updated_at",
          "blockchain_metadata"
        ]
      },
      "ListActivitiesResult": {
        "type": "object",
        "description": "List activities response",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of activities",
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "GetActivityResult": {
        "type": "object",
        "description": "Single activity",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Activity"
          }
        },
        "required": [
          "result"
        ]
      },
      "Collection": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the collection",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "symbol": {
            "type": "string",
            "nullable": true,
            "description": "The symbol of contract",
            "example": "BASP"
          },
          "contract_type": {
            "$ref": "#/components/schemas/CollectionContractType"
          },
          "contract_address": {
            "type": "string",
            "description": "The address of the contract",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of collection",
            "example": "Some description"
          },
          "image": {
            "type": "string",
            "description": "The url of the collection image",
            "example": "https://some-url",
            "nullable": true
          },
          "external_link": {
            "type": "string",
            "description": "The url of external link",
            "example": "https://some-url",
            "nullable": true
          },
          "contract_uri": {
            "type": "string",
            "description": "The uri for the metadata of the collection",
            "example": "https://some-url",
            "nullable": true
          },
          "base_uri": {
            "type": "string",
            "nullable": true,
            "description": "The metadata uri for nft",
            "example": "https://some-url"
          },
          "indexed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection was first indexed"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection was last updated"
          },
          "last_metadata_synced_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection metadata was last synced"
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "contract_type",
          "contract_address",
          "description",
          "image",
          "external_link",
          "base_uri",
          "metadata_uri",
          "indexed_at",
          "updated_at",
          "last_metadata_synced_at"
        ]
      },
      "ListCollectionsResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of collections",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collection"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "GetCollectionResult": {
        "type": "object",
        "description": "Single Collection",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Collection"
          }
        },
        "required": [
          "result"
        ]
      },
      "GetMetadataResult": {
        "type": "object",
        "description": "Single metadata",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "required": [
          "result"
        ]
      },
      "ListMetadataResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of metadata",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/MetadataID"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "contract_address": {
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e",
            "description": "The contract address of the metadata"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the metadata was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When the metadata was last updated",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Sword",
            "description": "The name of the NFT"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "The description of the NFT"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "description": "The image url of the NFT",
            "example": "https://some-url"
          },
          "external_url": {
            "type": "string",
            "nullable": true,
            "description": "The external website link of NFT",
            "example": "https://some-url"
          },
          "animation_url": {
            "type": "string",
            "nullable": true,
            "description": "The animation url of the NFT",
            "example": "https://some-url"
          },
          "youtube_url": {
            "type": "string",
            "nullable": true,
            "description": "The youtube URL of NFT",
            "example": "https://some-url"
          },
          "attributes": {
            "type": "array",
            "description": "List of Metadata attributes",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NFTMetadataAttribute"
            }
          }
        },
        "required": [
          "id",
          "chain",
          "contract_address",
          "created_at",
          "updated_at",
          "name",
          "description",
          "image",
          "external_link",
          "animation_url",
          "youtube_url",
          "attributes"
        ]
      },
      "RefreshMetadataByIDRequest": {
        "type": "object",
        "description": "Request body for refreshing metadata by id",
        "properties": {
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefreshMetadataByID"
            }
          }
        }
      },
      "NFT": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_id": {
            "type": "string",
            "example": "1",
            "description": "An `uint256` token id as string"
          },
          "contract_address": {
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e",
            "description": "The contract address of the NFT"
          },
          "indexed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT was first indexed"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT owner was last updated"
          },
          "metadata_synced_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When NFT metadata was last synced",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "metadata_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "The id of the metadata of this NFT",
            "example": "ae83bc80-4dd5-11ee-be56-0242ac120002"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Sword",
            "description": "The name of the NFT"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "The description of the NFT"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "description": "The image url of the NFT",
            "example": "https://some-url"
          },
          "external_link": {
            "type": "string",
            "nullable": true,
            "description": "The external website link of NFT",
            "example": "https://some-url"
          },
          "animation_url": {
            "type": "string",
            "nullable": true,
            "description": "The animation url of the NFT",
            "example": "https://some-url"
          },
          "youtube_url": {
            "type": "string",
            "nullable": true,
            "description": "The youtube URL of NFT",
            "example": "https://some-url"
          }
        },
        "required": [
          "chain",
          "token_id",
          "contract_address",
          "indexed_at",
          "updated_at",
          "metadata_synced_at",
          "name",
          "description",
          "image",
          "external_link",
          "animation_url",
          "youtube_url"
        ]
      },
      "NFTWithBalance": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_id": {
            "type": "string",
            "example": "1",
            "description": "An `uint256` token id as string"
          },
          "contract_address": {
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e",
            "description": "The contract address of the NFT"
          },
          "contract_type": {
            "type": "string",
            "example": "erc721",
            "nullable": false,
            "description": "The contract type of the NFT"
          },
          "indexed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT was first indexed"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT owner was last updated"
          },
          "metadata_synced_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When NFT metadata was last synced",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "metadata_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "The id of the metadata of this NFT",
            "example": "ae83bc80-4dd5-11ee-be56-0242ac120002"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Sword",
            "description": "The name of the NFT"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "The description of the NFT"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "description": "The image url of the NFT",
            "example": "https://some-url"
          },
          "external_link": {
            "type": "string",
            "nullable": true,
            "description": "The external website link of NFT",
            "example": "https://some-url"
          },
          "animation_url": {
            "type": "string",
            "nullable": true,
            "description": "The animation url of the NFT",
            "example": "https://some-url"
          },
          "youtube_url": {
            "type": "string",
            "nullable": true,
            "description": "The youtube URL of NFT",
            "example": "https://some-url"
          },
          "balance": {
            "type": "string",
            "nullable": false,
            "description": "The balance of NFT in the account",
            "example": "11"
          }
        },
        "required": [
          "chain",
          "token_id",
          "contract_address",
          "indexed_at",
          "updated_at",
          "metadata_synced_at",
          "name",
          "description",
          "image",
          "external_link",
          "animation_url",
          "youtube_url",
          "balance",
          "contract_type"
        ]
      },
      "NFTMetadataAttribute": {
        "type": "object",
        "properties": {
          "trait_type": {
            "description": "The metadata trait type",
            "type": "string",
            "example": "Aqua Power"
          },
          "value": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              }
            ],
            "description": "The metadata trait value",
            "example": "Happy"
          }
        },
        "required": [
          "trait_type",
          "value"
        ]
      },
      "NFTMetadataAttributes": {
        "type": "object",
        "description": "List of normalized NFT metadata attributes",
        "properties": {
          "attributes": {
            "type": "array",
            "description": "List of NFT Metadata attributes",
            "items": {
              "$ref": "#/components/schemas/NFTMetadataAttribute"
            }
          }
        },
        "required": [
          "attributes"
        ]
      },
      "ChainName": {
        "type": "string",
        "description": "The name of chain",
        "example": "imtbl-zkevm-testnet"
      },
      "ActivityID": {
        "description": "Activity ID in UUIDv4 format",
        "type": "string",
        "format": "uuid",
        "example": "4e28df8d-f65c-4c11-ba04-6a9dd47b179b"
      },
      "MetadataID": {
        "description": "Metadata ID in UUIDv4 format",
        "type": "string",
        "format": "uuid",
        "example": "4e28df8d-f65c-4c11-ba04-6a9dd47b179b"
      },
      "CollectionContractType": {
        "description": "The collection contract type",
        "type": "string",
        "enum": [
          "ERC721",
          "ERC1155"
        ]
      },
      "NFTContractType": {
        "description": "The contract type for an NFT",
        "type": "string",
        "enum": [
          "ERC721"
        ]
      },
      "TokenContractType": {
        "description": "The contract type for a token",
        "type": "string",
        "enum": [
          "ERC20"
        ]
      },
      "NFTWithMetadataAttributes": {
        "description": "A single NFT with metadata attributes",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NFT"
          },
          {
            "$ref": "#/components/schemas/NFTMetadataAttributes"
          }
        ]
      },
      "GetNFTResult": {
        "type": "object",
        "description": "Single NFT",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/NFTWithMetadataAttributes"
          }
        },
        "required": [
          "result"
        ]
      },
      "ListNFTsResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFT"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "ListNFTsByOwnerResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of nfts by owner",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFTWithBalance"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "NFTOwner": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "contract_address": {
            "type": "string",
            "description": "The address of NFT contract",
            "example": "0x5a019874f4fae314b0eaa4606be746366e661306"
          },
          "token_id": {
            "type": "string",
            "description": "An `uint256` token id as string",
            "example": "1"
          },
          "account_address": {
            "type": "string",
            "description": "The account address of the owner of the NFT",
            "example": "0x5a019874f4fae314b0eaa4606be746366e661306"
          },
          "quantity": {
            "type": "string",
            "description": "The quantity of owned tokens (uint256 as string)",
            "example": "1"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT owner was last updated"
          }
        },
        "required": [
          "chain",
          "contract_address",
          "token_id",
          "account_address",
          "quantity"
        ]
      },
      "NFTWithOwner": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "contract_address": {
            "type": "string",
            "description": "The address of NFT contract",
            "example": "0x5a019874f4fae314b0eaa4606be746366e661306"
          },
          "token_id": {
            "type": "string",
            "description": "An `uint256` token id as string",
            "example": "1"
          },
          "account_address": {
            "type": "string",
            "description": "The account address of the owner of the NFT",
            "example": "0x5a019874f4fae314b0eaa4606be746366e661306"
          },
          "quantity": {
            "type": "string",
            "description": "The quantity of owned tokens (uint256 as string)",
            "example": "1"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the owner last changed for the given NFT"
          }
        },
        "required": [
          "chain",
          "contract_address",
          "token_id",
          "account_address",
          "quantity",
          "updated_at"
        ]
      },
      "GetTokenResult": {
        "type": "object",
        "description": "Single Token",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "required": [
          "result"
        ]
      },
      "ListNFTOwnersResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of nft owners",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFTOwner"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "ListCollectionOwnersResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of NFT owners",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFTWithOwner"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "ChainWithDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Chain"
          },
          {
            "type": "object",
            "properties": {
              "rpc_url": {
                "type": "string",
                "nullable": true,
                "description": "URL for RPC node"
              }
            },
            "required": [
              "rpc_url"
            ]
          }
        ]
      },
      "Chain": {
        "type": "object",
        "description": "The chain details",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of chain",
            "example": "eip155:13372"
          },
          "name": {
            "type": "string",
            "description": "The name of chain",
            "example": "imtbl-zkevm-testnet"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ListChainsResult": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of chains",
            "items": {
              "$ref": "#/components/schemas/ChainWithDetails"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "ListTokensResult": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of tokens",
            "items": {
              "$ref": "#/components/schemas/Token"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "RefreshMetadataByID": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RefreshableNFTAttributes"
          },
          {
            "type": "object",
            "properties": {
              "metadata_id": {
                "$ref": "#/components/schemas/MetadataID"
              }
            },
            "required": [
              "metadata_id"
            ]
          }
        ]
      },
      "RefreshMetadataByTokenID": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RefreshableNFTAttributes"
          },
          {
            "type": "object",
            "properties": {
              "token_id": {
                "type": "string",
                "description": "An `uint256` token id as string",
                "example": "1"
              }
            },
            "required": [
              "token_id"
            ]
          }
        ]
      },
      "RefreshableNFTAttributes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Sword",
            "description": "The name of the NFT"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "The description of the NFT"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "description": "The image url of the NFT",
            "example": "https://some-url"
          },
          "external_url": {
            "type": "string",
            "nullable": true,
            "description": "The external link of the NFT",
            "example": "https://some-url"
          },
          "animation_url": {
            "type": "string",
            "nullable": true,
            "description": "The animation url of the NFT",
            "example": "https://some-url"
          },
          "youtube_url": {
            "type": "string",
            "nullable": true,
            "description": "The youtube link of the NFT",
            "example": "https://some-url"
          },
          "attributes": {
            "type": "array",
            "description": "List of Metadata attributes",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/NFTMetadataAttribute"
            }
          }
        },
        "required": [
          "name",
          "description",
          "image",
          "external_url",
          "animation_url",
          "youtube_url",
          "attributes"
        ]
      },
      "RefreshNFTMetadataByTokenIDRequest": {
        "type": "object",
        "properties": {
          "nft_metadata": {
            "type": "array",
            "description": "List of nft metadata to be refreshed",
            "items": {
              "$ref": "#/components/schemas/RefreshMetadataByTokenID"
            }
          }
        },
        "required": [
          "nft_metadata"
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "contract_address": {
            "type": "string",
            "description": "The address of token contract",
            "example": "0xc344c05eef8876e517072f879dae8905aa2b956b"
          },
          "root_contract_address": {
            "type": "string",
            "description": "The address of root token contract",
            "example": "0x43e60b30d5bec48c0f5890e3d1e9f1b1296bb4aa",
            "nullable": true
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of token",
            "example": "AAA",
            "nullable": true
          },
          "decimals": {
            "type": "integer",
            "description": "The decimals of token",
            "example": 18,
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "description": "The image url of token",
            "example": "https://some-url",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of token",
            "example": "Token A",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection was last updated"
          }
        },
        "required": [
          "chain",
          "contract_address",
          "root_contract_address",
          "symbol",
          "decimals",
          "image_url",
          "name",
          "updated_at"
        ]
      },
      "CollectionMetadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the collection",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "symbol": {
            "type": "string",
            "nullable": true,
            "description": "The symbol of contract",
            "example": "BASP"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of collection",
            "example": "Some description"
          },
          "image": {
            "type": "string",
            "description": "The url of the collection image",
            "example": "https://some-url",
            "nullable": true
          },
          "external_link": {
            "type": "string",
            "description": "The url of external link",
            "example": "https://some-url",
            "nullable": true
          },
          "contract_uri": {
            "type": "string",
            "description": "The uri for the metadata of the collection",
            "example": "https://some-url",
            "nullable": true
          },
          "base_uri": {
            "type": "string",
            "nullable": true,
            "description": "The metadata uri for nft",
            "example": "https://some-url"
          }
        },
        "required": [
          "name",
          "image",
          "symbol",
          "description",
          "base_uri",
          "external_link",
          "contract_uri"
        ]
      },
      "RefreshCollectionMetadataRequest": {
        "type": "object",
        "properties": {
          "collection_metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          }
        },
        "required": [
          "collection_metadata"
        ]
      },
      "RefreshCollectionMetadataResult": {
        "type": "object",
        "properties": {
          "contract_address": {
            "type": "string"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "collection_metadata": {
            "$ref": "#/components/schemas/CollectionMetadata"
          }
        },
        "required": [
          "contract_address",
          "chain",
          "collection_metadata"
        ]
      },
      "MetadataRefreshRateLimitResult": {
        "type": "object",
        "properties": {
          "imx_refreshes_limit": {
            "type": "string"
          },
          "imx_refresh_limit_reset": {
            "type": "string"
          },
          "imx_remaining_refreshes": {
            "type": "string"
          },
          "retry_after": {
            "type": "string"
          }
        },
        "required": [
          "imx_refreshes_limit",
          "imx_refresh_limit_reset",
          "imx_remaining_refreshes",
          "retry_after"
        ]
      },
      "MintAsset": {
        "type": "object",
        "properties": {
          "reference_id": {
            "type": "string",
            "description": "The ID of this asset in the system that originates the mint request",
            "example": "67f7d464-b8f0-4f6a-9a3b-8d3cb4a21af0"
          },
          "owner_address": {
            "type": "string",
            "description": "The address of the receiver",
            "example": "0xc344c05eef8876e517072f879dae8905aa2b956b"
          },
          "metadata": {
            "$ref": "#/components/schemas/RefreshableNFTAttributes"
          }
        },
        "required": [
          "reference_id",
          "owner_address"
        ]
      },
      "GetMintRequestResult": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "collection_address": {
            "type": "string",
            "description": "The address of the contract",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "reference_id": {
            "type": "string",
            "description": "The reference ID of this mint request"
          },
          "owner_address": {
            "type": "string",
            "description": "The address of the owner of the NFT"
          },
          "token_id": {
            "type": "string",
            "example": "1",
            "nullable": true,
            "description": "An `uint256` token id as string. Only available when the mint request succeeds"
          },
          "transaction_hash": {
            "type": "string",
            "nullable": true,
            "description": "The transaction hash of the activity",
            "example": "0x68d9eac5e3b3c3580404989a4030c948a78e1b07b2b5ea5688d8c38a6c61c93e"
          },
          "error": {
            "$ref": "#/components/schemas/MintRequestErrorMessage"
          },
          "status": {
            "$ref": "#/components/schemas/MintRequestStatus"
          }
        },
        "required": [
          "chain",
          "collection_address",
          "reference_id",
          "owner_address",
          "status",
          "token_id",
          "transaction_hash",
          "error",
          "status"
        ]
      },
      "MintRequestErrorMessage": {
        "type": "object",
        "nullable": true,
        "properties": {
          "message": {
            "description": "An error message in case the mint request fails",
            "type": "string"
          }
        }
      },
      "MintRequestStatus": {
        "description": "The status of the mint request",
        "example": "pending",
        "type": "string",
        "enum": [
          "pending",
          "succeeded",
          "failed"
        ]
      },
      "BasicAPIError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error Message",
            "example": "all fields must be provided"
          },
          "link": {
            "type": "string",
            "description": "Link to IMX documentation that can help resolve this error",
            "example": "https://docs.x.immutable.com/reference/#/"
          },
          "trace_id": {
            "type": "string",
            "description": "Trace ID of the initial request",
            "example": "e47634b79a5cd6894ddc9639ec4aad26"
          }
        },
        "required": [
          "message",
          "link",
          "trace_id"
        ]
      },
      "APIError400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "VALIDATION_ERROR"
                ],
                "example": "VALIDATION_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "RESOURCE_NOT_FOUND"
                ],
                "example": "RESOURCE_NOT_FOUND"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "INTERNAL_SERVER_ERROR"
                ],
                "example": "INTERNAL_SERVER_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError401": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "UNAUTHORISED_REQUEST"
                ],
                "example": "UNAUTHORISED_REQUEST"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "AUTHENTICATION_ERROR"
                ],
                "example": "AUTHENTICATION_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError429": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "TOO_MANY_REQUESTS_ERROR"
                ],
                "example": "TOO_MANY_REQUESTS_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "Item": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NativeItem"
          },
          {
            "$ref": "#/components/schemas/ERC20Item"
          },
          {
            "$ref": "#/components/schemas/ERC721Item"
          },
          {
            "$ref": "#/components/schemas/ERC1155Item"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "NATIVE": "#/components/schemas/NativeItem",
            "ERC20": "#/components/schemas/ERC20Item",
            "ERC721": "#/components/schemas/ERC721Item",
            "ERC1155": "#/components/schemas/ERC1155Item"
          }
        }
      },
      "FulfillmentDataRequest": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "format": "uuid"
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            },
            "example": [
              {
                "type": "TAKER_ECOSYSTEM",
                "amount": "2250000000000000000",
                "recipient_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233"
              }
            ],
            "minItems": 0,
            "maxItems": 2
          }
        },
        "required": [
          "order_id",
          "fees"
        ]
      },
      "FulfillableOrder": {
        "type": "object",
        "properties": {
          "extra_data": {
            "type": "string"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "required": [
          "extra_data",
          "order"
        ]
      },
      "UnfulfillableOrder": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string",
            "description": "OrderID for the requested but unfulfillable order",
            "example": "7df3e99e-f7b3-459c-bef6-ffb66a18bb59"
          },
          "reason": {
            "type": "string",
            "description": "Nullable string containing error reason if the signing is unsuccessful for the order",
            "example": "Invalid order status INACTIVE for order 7df3e99e-f7b3-459c-bef6-ffb66a18bb59"
          }
        },
        "required": [
          "reason",
          "order_id"
        ]
      },
      "NativeItem": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Token type user is offering, which in this case is the native IMX token",
            "example": "NATIVE",
            "enum": [
              "NATIVE"
            ]
          },
          "amount": {
            "type": "string",
            "description": "A string representing the price at which the user is willing to sell the token. This value is provided in the smallest unit of the token (e.g., wei for Ethereum).",
            "example": "9750000000000000000",
            "pattern": "\\d+"
          }
        },
        "required": [
          "type",
          "amount"
        ]
      },
      "ERC20Item": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Token type user is offering, which in this case is ERC20",
            "example": "ERC20",
            "enum": [
              "ERC20"
            ]
          },
          "contract_address": {
            "type": "string",
            "description": "Address of ERC20 token",
            "example": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "amount": {
            "type": "string",
            "description": "A string representing the price at which the user is willing to sell the token. This value is provided in the smallest unit of the token (e.g., wei for Ethereum).",
            "example": "9750000000000000000",
            "pattern": "\\d+"
          }
        },
        "required": [
          "type",
          "contract_address",
          "amount"
        ]
      },
      "ERC721Item": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Token type user is offering, which in this case is ERC721",
            "example": "ERC721",
            "enum": [
              "ERC721"
            ]
          },
          "contract_address": {
            "type": "string",
            "description": "Address of ERC721 token",
            "example": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "token_id": {
            "type": "string",
            "description": "ID of ERC721 token",
            "example": "1",
            "pattern": "\\d+"
          }
        },
        "required": [
          "type",
          "contract_address",
          "token_id"
        ]
      },
      "ERC1155Item": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Token type user is offering, which in this case is ERC1155",
            "example": "ERC1155",
            "enum": [
              "ERC1155"
            ]
          },
          "contract_address": {
            "type": "string",
            "description": "Address of ERC1155 token",
            "example": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "token_id": {
            "type": "string",
            "description": "ID of ERC1155 token",
            "example": "1",
            "pattern": "\\d+"
          },
          "amount": {
            "type": "string",
            "description": "A string representing the price at which the user is willing to sell the token. This value is provided in the smallest unit of the token (e.g., wei for Ethereum).",
            "example": "9750000000000000000",
            "pattern": "\\d+"
          }
        },
        "required": [
          "type",
          "contract_address",
          "token_id",
          "amount"
        ]
      },
      "CancelOrdersRequestBody": {
        "type": "object",
        "properties": {
          "account_address": {
            "type": "string",
            "description": "Address of the user initiating the cancel request",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "orders": {
            "type": "array",
            "description": "List of order ids proposed for cancellation",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "uniqueItems": true,
            "minItems": 1,
            "maxItems": 10
          },
          "signature": {
            "type": "string",
            "description": "Signature generated by the user for the specific cancellation request",
            "example": "0x12345"
          }
        },
        "required": [
          "account_address",
          "orders",
          "signature"
        ],
        "example": {
          "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
          "ids": [
            "018a8c71-d7e4-e303-a2ef-318871ef7756",
            "238a8c71-d7e4-e303-a2ef-318871ef7778",
            "458a8c71-d7e4-e303-a2ef-318871ef7790"
          ],
          "signature": 291
        }
      },
      "CreateListingRequestBody": {
        "type": "object",
        "properties": {
          "account_address": {
            "type": "string",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "order_hash": {
            "type": "string",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
          },
          "buy": {
            "type": "array",
            "description": "Buy item for listing should either be NATIVE or ERC20 item",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "example": [
              {
                "type": "NATIVE",
                "amount": "9750000000000000000",
                "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
              }
            ],
            "minItems": 1,
            "maxItems": 1
          },
          "fees": {
            "type": "array",
            "description": "Buy fees should only include maker marketplace fees and should be no more than two entries as more entires will incur more gas. It is best practice to have this as few as possible.",
            "items": {
              "$ref": "#/components/schemas/Fee"
            },
            "example": [],
            "minItems": 0,
            "maxItems": 2
          },
          "end_at": {
            "type": "string",
            "description": "Time after which the Order is considered expired",
            "format": "date-time",
            "example": "2022-03-09T05:00:50.52Z"
          },
          "protocol_data": {
            "$ref": "#/components/schemas/ProtocolData"
          },
          "salt": {
            "type": "string",
            "description": "A random value added to the create Order request",
            "example": "12686911856931635052326433555881236148"
          },
          "sell": {
            "type": "array",
            "description": "Sell item for listing should be an ERC721 item",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "example": [
              {
                "type": "ERC721",
                "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                "token_id": "1"
              }
            ],
            "minItems": 1,
            "maxItems": 1
          },
          "signature": {
            "type": "string",
            "description": "Digital signature generated by the user for the specific Order",
            "example": "0x"
          },
          "start_at": {
            "type": "string",
            "description": "Time after which Order is considered active",
            "format": "date-time",
            "example": "2022-03-09T05:00:50.52Z"
          }
        },
        "example": {
          "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
          "order_hash": "0x0821933d9391bc9bf11a6010fe84776c84b203abff0c1ad781fb4881409c8770",
          "buy": [
            {
              "type": "NATIVE",
              "amount": "9750000000000000000",
              "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
            }
          ],
          "fees": [
            {
              "type": "MAKER_ECOSYSTEM",
              "amount": "2250000000000000000",
              "recipient_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233"
            }
          ],
          "end_at": "2022-03-10T05:00:50.52Z",
          "protocol_data": {
            "order_type": "FULL_RESTRICTED",
            "counter": "1",
            "zone_address": "0x12",
            "seaport_address": "0x12",
            "seaport_version": "1.4"
          },
          "salt": "12686911856931635052326433555881236148",
          "sell": [
            {
              "type": "ERC721",
              "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
              "token_id": "1"
            }
          ],
          "signature": "0x",
          "start_at": "2022-03-09T05:00:50.52Z"
        },
        "required": [
          "account_address",
          "order_hash",
          "buy",
          "sell",
          "fees",
          "end_at",
          "start_at",
          "protocol_data",
          "salt",
          "signature"
        ]
      },
      "Fee": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Fee payable to recipient upon settlement",
            "example": "2250000000000000000",
            "pattern": "\\d+"
          },
          "type": {
            "type": "string",
            "description": "Fee type",
            "example": "ROYALTY",
            "enum": [
              "ROYALTY",
              "MAKER_ECOSYSTEM",
              "TAKER_ECOSYSTEM",
              "PROTOCOL"
            ]
          },
          "recipient_address": {
            "type": "string",
            "description": "Wallet address of fee recipient",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "example": {
          "amount": "2250000000000000000",
          "type": "ROYALTY",
          "recipient_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233"
        },
        "required": [
          "type",
          "amount",
          "recipient_address"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "account_address": {
            "type": "string",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
          },
          "buy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "example": [
              {
                "type": "NATIVE",
                "amount": "9750000000000000000",
                "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
              }
            ],
            "minItems": 1,
            "maxItems": 1
          },
          "fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            },
            "example": [],
            "minItems": 0,
            "maxItems": 1
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "created_at": {
            "type": "string",
            "description": "Time the Order is created",
            "format": "date-time",
            "example": "2022-03-07T07:20:50.52Z"
          },
          "end_at": {
            "type": "string",
            "description": "Time after which the Order is considered expired",
            "format": "date-time",
            "example": "2022-03-10T05:00:50.52Z"
          },
          "id": {
            "type": "string",
            "description": "Global Order identifier",
            "example": "018792C9-4AD7-8EC4-4038-9E05C598534A"
          },
          "order_hash": {
            "type": "string",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
          },
          "protocol_data": {
            "$ref": "#/components/schemas/ProtocolData"
          },
          "salt": {
            "type": "string",
            "description": "A random value added to the create Order request",
            "example": "12686911856931635052326433555881236148"
          },
          "sell": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "example": [
              {
                "type": "ERC721",
                "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                "token_id": "1"
              }
            ],
            "minItems": 1,
            "maxItems": 1
          },
          "signature": {
            "type": "string",
            "description": "Digital signature generated by the user for the specific Order",
            "example": "0x"
          },
          "start_at": {
            "type": "string",
            "description": "Time after which Order is considered active",
            "format": "date-time",
            "example": "2022-03-09T05:00:50.52Z"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "type": {
            "type": "string",
            "description": "Order type",
            "example": "LISTING",
            "enum": [
              "LISTING"
            ]
          },
          "updated_at": {
            "type": "string",
            "description": "Time the Order is last updated",
            "format": "date-time",
            "example": "2022-03-07T07:20:50.52Z"
          }
        },
        "example": {
          "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
          "buy": [
            {
              "type": "NATIVE",
              "amount": "9750000000000000000",
              "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
            }
          ],
          "fees": [],
          "chain": {
            "id": "eip155:11155111",
            "name": "sepolia"
          },
          "created_at": "2022-03-07T07:20:50.52Z",
          "end_at": "2022-03-10T05:00:50.52Z",
          "id": "018792C9-4AD7-8EC4-4038-9E05C598534A",
          "protocol_data": {
            "order_type": "FULL_RESTRICTED",
            "counter": "1",
            "zone_address": "0x12",
            "seaport_address": "0x12",
            "seaport_version": "1.4"
          },
          "salt": "12686911856931635052326433555881236148",
          "sell": [
            {
              "type": "ERC721",
              "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
              "token_id": "1"
            }
          ],
          "signature": "0x",
          "start_at": "2022-03-09T05:00:50.52Z",
          "status": {
            "name": "ACTIVE"
          },
          "type": "LISTING",
          "updated_at": "2022-03-07T07:20:50.52Z"
        },
        "required": [
          "id",
          "type",
          "account_address",
          "buy",
          "sell",
          "fees",
          "chain",
          "created_at",
          "end_at",
          "start_at",
          "updated_at",
          "order_hash",
          "protocol_data",
          "salt",
          "signature",
          "status"
        ]
      },
      "Trade": {
        "type": "object",
        "properties": {
          "buy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "example": [
              {
                "type": "NATIVE",
                "amount": "9750000000000000000",
                "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
              }
            ],
            "minItems": 1,
            "maxItems": 1
          },
          "buyer_address": {
            "type": "string",
            "example": "0xFC99a706C0D05B8C71E1fAAC91b3E1343aC34D40"
          },
          "buyer_fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            },
            "example": [],
            "minItems": 0,
            "maxItems": 1
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "order_id": {
            "type": "string",
            "example": "7df3e99e-f7b3-459c-bef6-ffb66a18bb59"
          },
          "blockchain_metadata": {
            "$ref": "#/components/schemas/TradeBlockchainMetadata"
          },
          "indexed_at": {
            "type": "string",
            "description": "Time the on-chain trade event is indexed by the order book system",
            "format": "date-time",
            "example": "2022-03-07T07:20:50.52Z"
          },
          "id": {
            "type": "string",
            "description": "Global Trade identifier",
            "example": "018792C9-4AD7-8EC4-4038-9E05C598534A"
          },
          "sell": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "example": [
              {
                "type": "ERC721",
                "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                "token_id": "1"
              }
            ],
            "minItems": 1,
            "maxItems": 1
          },
          "seller_address": {
            "type": "string",
            "example": "0x002b9B1cbf464782Df5d48870358FA6c09f1b19D"
          },
          "maker_address": {
            "type": "string",
            "example": "0x002b9B1cbf464782Df5d48870358FA6c09f1b19D"
          },
          "taker_address": {
            "type": "string",
            "example": "0xFC99a706C0D05B8C71E1fAAC91b3E1343aC34D40"
          }
        },
        "example": {
          "buy": [
            {
              "type": "NATIVE",
              "amount": "9750000000000000000",
              "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
            }
          ],
          "buyer_address": "0xFC99a706C0D05B8C71E1fAAC91b3E1343aC34D40",
          "buyer_fees": [],
          "chain": {
            "id": "eip155:11155111",
            "name": "sepolia"
          },
          "indexed_at": "2022-03-07T07:20:50.52Z",
          "id": "018792C9-4AD7-8EC4-4038-9E05C598534A",
          "sell": [
            {
              "type": "ERC721",
              "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
              "token_id": "1"
            }
          ],
          "seller_address": "0x002b9B1cbf464782Df5d48870358FA6c09f1b19D",
          "maker_address": "0x002b9B1cbf464782Df5d48870358FA6c09f1b19D",
          "taker_address": "0xFC99a706C0D05B8C71E1fAAC91b3E1343aC34D40"
        },
        "required": [
          "id",
          "order_id",
          "buy",
          "buyer_address",
          "sell",
          "seller_address",
          "buyer_fees",
          "chain",
          "maker_address",
          "taker_address",
          "indexed_at",
          "blockchain_metadata"
        ]
      },
      "CancelOrdersResult": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/CancelOrdersResultData"
          }
        },
        "required": [
          "result"
        ],
        "example": {
          "result": {
            "successful_cancellations": [
              "018a8c71-d7e4-e303-a2ef-318871ef7756",
              "458a8c71-d7e4-e303-a2ef-318871ef7778"
            ],
            "pending_cancellations": [
              "238a8c71-d7e4-e303-a2ef-318871ef7778",
              "898a8c71-d7e4-e303-a2ef-318871ef7735"
            ],
            "failed_cancellations": [
              {
                "order": "458a8c71-d7e4-e303-a2ef-318871ef7790",
                "reason_code": "FILLED"
              },
              {
                "order": "338a8c71-d7e4-e303-a2ef-318871ef7342",
                "reason_code": "FILLED"
              }
            ]
          }
        }
      },
      "CancelOrdersResultData": {
        "type": "object",
        "properties": {
          "successful_cancellations": {
            "type": "array",
            "description": "Orders which were successfully cancelled",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 10
          },
          "pending_cancellations": {
            "type": "array",
            "description": "Orders which are marked for cancellation but the cancellation cannot be guaranteed",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 10
          },
          "failed_cancellations": {
            "type": "array",
            "description": "Orders which failed to be cancelled",
            "items": {
              "$ref": "#/components/schemas/FailedOrderCancellation"
            },
            "minItems": 0,
            "maxItems": 10
          }
        },
        "required": [
          "successful_cancellations",
          "pending_cancellations",
          "failed_cancellations"
        ]
      },
      "FailedOrderCancellation": {
        "type": "object",
        "properties": {
          "order": {
            "type": "string",
            "description": "ID of the order which failed to be cancelled",
            "example": "7df3e99e-f7b3-459c-bef6-ffb66a18bb59"
          },
          "reason_code": {
            "type": "string",
            "enum": [
              "FILLED"
            ],
            "description": "Reason code indicating why the order failed to be cancelled",
            "example": "FILLED"
          }
        },
        "required": [
          "order",
          "reason_code"
        ]
      },
      "ListingResult": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "required": [
          "result"
        ],
        "example": {
          "result": {
            "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
            "buy": [
              {
                "type": "ERC20",
                "amount": "9750000000000000000",
                "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
              }
            ],
            "fees": [],
            "chain": {
              "id": "eip155:11155111",
              "name": "sepolia"
            },
            "created_at": "2022-03-07T07:20:50.52Z",
            "end_at": "2022-03-10T05:00:50.52Z",
            "id": "018792C9-4AD7-8EC4-4038-9E05C598534B",
            "order_hash": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
            "protocol_data": {
              "order_type": "FULL_RESTRICTED",
              "counter": "1",
              "zone_address": "0x12",
              "seaport_address": "0x12",
              "seaport_version": "1.5"
            },
            "salt": "12686911856931635052326433555881236148",
            "sell": [
              {
                "type": "ERC721",
                "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                "token_id": "1"
              }
            ],
            "signature": "0x",
            "start_at": "2022-03-09T05:00:50.52Z",
            "status": {
              "name": "EXPIRED"
            },
            "type": {
              "name": "LISTING"
            },
            "updated_at": "2022-03-07T07:20:50.52Z"
          }
        }
      },
      "ListListingsResult": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/Page"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "minItems": 0,
            "maxItems": 200
          }
        },
        "required": [
          "page",
          "result"
        ],
        "example": {
          "page": {
            "previous_cursor": "MjAyMy0wMS0yM1QwMTo1NToyNy4zNTM2MzA",
            "next_cursor": "MjAyMy0wMS0yM1QwMTo1NToyNy4zNTM2MzA"
          },
          "result": [
            {
              "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "buy": [
                {
                  "type": "ERC20",
                  "amount": "9750000000000000000",
                  "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
                }
              ],
              "fees": [],
              "chain": {
                "id": "eip155:11155111",
                "name": "sepolia"
              },
              "created_at": "2022-03-07T07:20:50.52Z",
              "end_at": "2022-03-10T05:00:50.52Z",
              "id": "018792C9-4AD7-8EC4-4038-9E05C598534A",
              "order_hash": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "protocol_data": {
                "order_type": "FULL_RESTRICTED",
                "counter": "1",
                "zone_address": "0x12",
                "seaport_address": "0x12",
                "seaport_version": "1.5"
              },
              "salt": "12686911856931635052326433555881236148",
              "sell": [
                {
                  "type": "ERC721",
                  "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                  "token_id": "1"
                }
              ],
              "signature": "0x",
              "start_at": "2022-03-09T05:00:50.52Z",
              "status": {
                "name": "EXPIRED"
              },
              "updated_at": "2022-03-07T07:20:50.52Z"
            },
            {
              "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "buy": [
                {
                  "type": "ERC20",
                  "amount": "9750000000000000000",
                  "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
                }
              ],
              "fees": [],
              "chain": {
                "id": "eip155:11155111",
                "name": "sepolia"
              },
              "created_at": "2022-03-07T07:20:50.52Z",
              "end_at": "2022-03-10T05:00:50.52Z",
              "id": "018792C9-4AD7-8EC4-4038-9E05C598534A",
              "order_hash": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "protocol_data": {
                "order_type": "FULL_RESTRICTED",
                "counter": "1",
                "zone_address": "0x12",
                "seaport_address": "0x12",
                "seaport_version": "1.5"
              },
              "salt": "12686911856931635052326433555881236148",
              "sell": [
                {
                  "type": "ERC721",
                  "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                  "token_id": "1"
                }
              ],
              "signature": "0x",
              "start_at": "2022-03-09T05:00:50.52Z",
              "status": {
                "name": "EXPIRED"
              },
              "updated_at": "2022-03-07T07:20:50.52Z"
            }
          ]
        }
      },
      "TradeResult": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Trade"
          }
        },
        "required": [
          "result"
        ],
        "example": {
          "result": {
            "buy": [
              {
                "type": "ERC20",
                "amount": "9750000000000000000",
                "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
              }
            ],
            "buyer_address": "0xFC99a706C0D05B8C71E1fAAC91b3E1343aC34D40",
            "buyer_fees": [],
            "chain": {
              "id": "eip155:11155111",
              "name": "sepolia"
            },
            "created_at": "2022-03-07T07:20:50.52Z",
            "id": "018792C9-4AD7-8EC4-4038-9E05C598534B",
            "sell": [
              {
                "type": "ERC721",
                "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                "token_id": "1"
              }
            ],
            "seller_address": "0x002b9B1cbf464782Df5d48870358FA6c09f1b19D",
            "maker_address": "0x002b9B1cbf464782Df5d48870358FA6c09f1b19D",
            "taker_address": "0xFC99a706C0D05B8C71E1fAAC91b3E1343aC34D40",
            "updated_at": "2022-03-07T07:20:50.52Z"
          }
        }
      },
      "ListTradeResult": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/Page"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trade"
            },
            "minItems": 0,
            "maxItems": 200
          }
        },
        "required": [
          "page",
          "result"
        ],
        "example": {
          "page": {
            "previous_cursor": "MjAyMy0wMS0yM1QwMTo1NToyNy4zNTM2MzA",
            "next_cursor": "MjAyMy0wMS0yM1QwMTo1NToyNy4zNTM2MzA"
          },
          "result": [
            {
              "buy": [
                {
                  "type": "ERC20",
                  "amount": "9750000000000000000",
                  "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
                }
              ],
              "buyer_address": "0xFC99a706C0D05B8C71E1fAAC91b3E1343aC34D40",
              "buyer_fees": [],
              "chain": {
                "id": "eip155:11155111",
                "name": "sepolia"
              },
              "created_at": "2022-03-07T07:20:50.52Z",
              "id": "018792C9-4AD7-8EC4-4038-9E05C598534A",
              "sell": [
                {
                  "type": "ERC721",
                  "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                  "token_id": "1"
                }
              ],
              "seller_address": "0x002b9B1cbf464782Df5d48870358FA6c09f1b19D",
              "maker_address": "0x002b9B1cbf464782Df5d48870358FA6c09f1b19D",
              "taker_address": "0xFC99a706C0D05B8C71E1fAAC91b3E1343aC34D40",
              "updated_at": "2022-03-07T07:20:50.52Z"
            },
            {
              "buy": [
                {
                  "type": "ERC20",
                  "amount": "9750000000000000000",
                  "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
                }
              ],
              "buyer_address": "0x017406f3F27d507a1491976B7835CE5CD0fA647a",
              "buyer_fees": [],
              "chain": {
                "id": "eip155:11155111",
                "name": "sepolia"
              },
              "created_at": "2022-03-07T07:20:50.52Z",
              "id": "018792C9-4AD7-8EC4-4038-9E05C598534A",
              "sell": [
                {
                  "type": "ERC721",
                  "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                  "token_id": "1"
                }
              ],
              "seller_address": "0xC73349c545C1D757eb650cDc463A2f6dF1Ec41cb",
              "maker_address": "0xC73349c545C1D757eb650cDc463A2f6dF1Ec41cb",
              "taker_address": "0x017406f3F27d507a1491976B7835CE5CD0fA647a",
              "updated_at": "2022-03-07T07:20:50.52Z"
            }
          ]
        }
      },
      "OrderStatus": {
        "description": "The Order status",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CancelledOrderStatus"
          },
          {
            "$ref": "#/components/schemas/PendingOrderStatus"
          },
          {
            "$ref": "#/components/schemas/ActiveOrderStatus"
          },
          {
            "$ref": "#/components/schemas/InactiveOrderStatus"
          },
          {
            "$ref": "#/components/schemas/FilledOrderStatus"
          },
          {
            "$ref": "#/components/schemas/ExpiredOrderStatus"
          }
        ],
        "discriminator": {
          "propertyName": "name",
          "mapping": {
            "CANCELLED": "#/components/schemas/CancelledOrderStatus",
            "PENDING": "#/components/schemas/PendingOrderStatus",
            "ACTIVE": "#/components/schemas/ActiveOrderStatus",
            "INACTIVE": "#/components/schemas/InactiveOrderStatus",
            "FILLED": "#/components/schemas/FilledOrderStatus",
            "EXPIRED": "#/components/schemas/ExpiredOrderStatus"
          }
        }
      },
      "CancelledOrderStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The order status indicating a order is has been cancelled or about to be cancelled.",
            "enum": [
              "CANCELLED"
            ]
          },
          "pending": {
            "type": "boolean",
            "description": "Whether the cancellation of the order is pending",
            "example": false
          },
          "cancellation_type": {
            "type": "string",
            "description": "Whether the cancellation was done on-chain or off-chain",
            "enum": [
              "ON_CHAIN",
              "OFF_CHAIN"
            ],
            "example": "ON_CHAIN"
          }
        },
        "required": [
          "name",
          "pending",
          "cancellation_type"
        ]
      },
      "PendingOrderStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The order status that indicates the order is yet to be active due to various reasons.",
            "enum": [
              "PENDING"
            ]
          },
          "evaluated": {
            "type": "boolean",
            "description": "Whether the order has been evaluated after its creation",
            "example": false
          },
          "started": {
            "type": "boolean",
            "description": "Whether the order has reached its specified start time",
            "example": false
          }
        },
        "required": [
          "name",
          "evaluated",
          "started"
        ]
      },
      "ActiveOrderStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The order status that indicates an order can be fulfilled.",
            "enum": [
              "ACTIVE"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "InactiveOrderStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The order status that indicates an order cannot be fulfilled.",
            "enum": [
              "INACTIVE"
            ]
          },
          "sufficient_approvals": {
            "type": "boolean",
            "description": "Whether the order offerer has sufficient approvals",
            "example": false
          },
          "sufficient_balances": {
            "type": "boolean",
            "description": "Whether the order offerer still has sufficient balance to complete the order",
            "example": false
          }
        },
        "required": [
          "name",
          "sufficient_approvals",
          "sufficient_balances"
        ]
      },
      "ExpiredOrderStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A terminal order status indicating that an order cannot be fulfilled due to expiry.",
            "enum": [
              "EXPIRED"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "FilledOrderStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A terminal order status indicating that an order has been fulfilled.",
            "enum": [
              "FILLED"
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "OrderStatusName": {
        "type": "string",
        "description": "The Order status",
        "enum": [
          "PENDING",
          "ACTIVE",
          "INACTIVE",
          "FILLED",
          "EXPIRED",
          "CANCELLED"
        ]
      },
      "ProtocolData": {
        "type": "object",
        "properties": {
          "order_type": {
            "type": "string",
            "description": "Seaport order type",
            "example": "FULL_RESTRICTED",
            "enum": [
              "FULL_RESTRICTED"
            ]
          },
          "counter": {
            "type": "string",
            "description": "big.Int or uint256 string for order counter",
            "example": "92315562"
          },
          "zone_address": {
            "type": "string",
            "description": "Immutable zone address",
            "example": "0x12"
          },
          "seaport_address": {
            "type": "string",
            "description": "Immutable Seaport contract address",
            "example": "0x12"
          },
          "seaport_version": {
            "type": "string",
            "description": "Immutable Seaport contract version",
            "example": "1.5"
          }
        },
        "example": {
          "order_type": "FULL_RESTRICTED",
          "counter": "92315562",
          "zone_address": "0x12",
          "seaport_address": "0x12",
          "seaport_version": "1.5"
        },
        "required": [
          "order_type",
          "counter",
          "zone_address",
          "seaport_address",
          "seaport_version"
        ]
      },
      "TradeBlockchainMetadata": {
        "description": "The metadata related to the transaction in which the activity occurred",
        "nullable": true,
        "type": "object",
        "properties": {
          "transaction_hash": {
            "type": "string",
            "description": "The transaction hash of the trade",
            "example": "0x68d9eac5e3b3c3580404989a4030c948a78e1b07b2b5ea5688d8c38a6c61c93e"
          },
          "block_number": {
            "description": "EVM block number (uint64 as string)",
            "type": "string",
            "example": "1"
          },
          "transaction_index": {
            "description": "Transaction index in a block (uint32 as string)",
            "type": "string",
            "example": "1"
          },
          "log_index": {
            "description": "The log index of the fulfillment event in a block (uint32 as string)",
            "type": "string",
            "example": "1"
          }
        },
        "required": [
          "transaction_hash",
          "block_number",
          "transaction_index",
          "log_index"
        ]
      },
      "APIError501": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "NOT_IMPLEMENTED_ERROR"
                ],
                "example": "NOT_IMPLEMENTED_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "CreateCounterfactualAddressRequestDeprecated": {
        "type": "object",
        "required": [
          "ethereumAddress",
          "ethereumSignature"
        ],
        "properties": {
          "ethereumAddress": {
            "description": "The user's UAK address",
            "type": "string",
            "maxLength": 42
          },
          "ethereumSignature": {
            "description": "The signature generated with the UAK",
            "type": "string",
            "maxLength": 132
          }
        },
        "additionalProperties": false
      },
      "CreateCounterfactualAddressRequest": {
        "type": "object",
        "required": [
          "ethereum_address",
          "ethereum_signature"
        ],
        "properties": {
          "ethereum_address": {
            "description": "The user's UAK address",
            "type": "string",
            "maxLength": 42
          },
          "ethereum_signature": {
            "description": "The signature generated with the UAK",
            "type": "string",
            "maxLength": 132
          }
        },
        "additionalProperties": false
      },
      "CreateCounterfactualAddressResDeprecated": {
        "type": "object",
        "required": [
          "counterfactualAddress"
        ],
        "properties": {
          "counterfactualAddress": {
            "description": "The user's counterfactual address",
            "type": "string",
            "maxLength": 42
          }
        }
      },
      "CreateCounterfactualAddressRes": {
        "type": "object",
        "required": [
          "counterfactual_address"
        ],
        "properties": {
          "counterfactual_address": {
            "description": "The user's counterfactual address",
            "type": "string",
            "maxLength": 42
          }
        }
      },
      "GetLinkedAddressesResDeprecated": {
        "type": "object",
        "required": [
          "linkedAddresses"
        ],
        "properties": {
          "linkedAddresses": {
            "type": "array",
            "minItems": 0,
            "description": "The user's list of linked addresses",
            "items": {
              "description": "The user's linked address",
              "type": "string",
              "pattern": "^0x[0-9a-fA-F]*$",
              "maxLength": 42
            }
          }
        }
      },
      "GetLinkedAddressesRes": {
        "type": "object",
        "required": [
          "linked_addresses"
        ],
        "properties": {
          "linked_addresses": {
            "type": "array",
            "minItems": 0,
            "description": "The user's list of linked addresses",
            "items": {
              "description": "The user's linked address",
              "type": "string",
              "pattern": "^0x[0-9a-fA-F]*$",
              "maxLength": 42
            }
          }
        }
      },
      "GetContractAbiRes": {
        "type": "object",
        "required": [
          "abi",
          "transaction_type"
        ],
        "properties": {
          "abi": {
            "description": "contract's abi component",
            "type": "array",
            "minItems": 0,
            "items": {
              "description": "abi",
              "type": "object",
              "additionalProperties": true
            }
          },
          "transaction_type": {
            "description": "name of ui component",
            "type": "string",
            "enum": [
              "ERC20_APPROVE"
            ]
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "oas",
      "tags": [
        "activities",
        "chains",
        "collections",
        "nfts",
        "nft owners",
        "metadata",
        "tokens",
        "demopage",
        "listings",
        "orders",
        "passport"
      ],
      "description": "Passport MR API"
    }
  ]
}
