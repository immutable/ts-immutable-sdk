{
  "openapi": "3.0.2",
  "info": {
    "title": "Immutable X API",
    "version": "1.0.0",
    "description": "Immutable Multi Rollup API",
    "contact": {
      "name": "Immutable API Support",
      "email": "support@immutable.com",
      "url": "https://support.immutable.com"
    }
  },
  "tags": [
    {
      "name": "activities",
      "description": "Activities Endpoints",
      "x-displayName": "activities"
    },
    {
      "name": "chains",
      "description": "Chains Endpoints",
      "x-displayName": "chains"
    },
    {
      "name": "collections",
      "description": "Collections Endpoints",
      "x-displayName": "collections"
    },
    {
      "name": "nfts",
      "description": "NFTs Endpoints",
      "x-displayName": "nfts"
    },
    {
      "name": "nft owners",
      "description": "NFT Owner Endpoints",
      "x-displayName": "nft owners"
    },
    {
      "name": "demopage",
      "description": "Temporary HTML endpoint for demo purposes",
      "x-displayName": "demopage"
    },
    {
      "name": "tokens",
      "x-displayName": "tokens"
    },
    {
      "name": "orders",
      "description": "Orders Endpoints",
      "x-displayName": "orders"
    },
    {
      "name": "passport",
      "description": "Passport operations",
      "x-displayName": "passport"
    }
  ],
  "x-tagGroups": [
    {
      "name": "oas",
      "tags": [
        "activities",
        "chains",
        "collections",
        "nfts",
        "nft owners",
        "demopage",
        "tokens",
        "orders",
        "passport"
      ],
      "description": "Passport MR API"
    }
  ],
  "servers": [
    {
      "url": "https://indexer-mr.dev.imtbl.com"
    },
    {
      "url": "https://order-book-mr.dev.imtbl.com"
    },
    {
      "url": "https://passport.sandbox.imtbl.com"
    }
  ],
  "paths": {
    "/v1/chains/{chain_name}/activities": {
      "get": {
        "tags": [
          "activities"
        ],
        "operationId": "ListActivities",
        "summary": "List all activities",
        "description": "List all activities",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "in": "path",
            "required": true,
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "query",
            "description": "The contract address of NFT or ERC20 Token",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "token_id",
            "in": "query",
            "description": "An `uint256` token id as string",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "1"
          },
          {
            "name": "account_address",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3",
            "description": "The account address activity contains"
          },
          {
            "name": "activity_type",
            "in": "query",
            "description": "The activity type",
            "required": false,
            "example": "burn",
            "schema": {
              "$ref": "#/components/schemas/ActivityType"
            }
          },
          {
            "name": "from_indexed_at",
            "in": "query",
            "description": "From indexed at including given date",
            "required": false,
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "to_indexed_at",
            "in": "query",
            "required": false,
            "description": "To indexed at including given date",
            "schema": {
              "type": "string",
              "example": "2022-08-16T17:43:26.991388Z",
              "format": "date-time"
            }
          },
          {
            "name": "transaction_hash",
            "in": "query",
            "description": "The transaction hash of activity",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x68d9eac5e3b3c3580404989a4030c948a78e1b07b2b5ea5688d8c38a6c61c93e"
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActivitiesResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/activities/{activity_id}": {
      "get": {
        "tags": [
          "activities"
        ],
        "operationId": "GetActivity",
        "summary": "Get a single activity by ID",
        "description": "Get a single activity by ID",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "in": "path",
            "required": true,
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "activity_id",
            "description": "The id of activity",
            "schema": {
              "$ref": "#/components/schemas/ActivityID"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActivityResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections": {
      "get": {
        "description": "List all collections",
        "tags": [
          "collections"
        ],
        "operationId": "ListCollections",
        "summary": "List all collections",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "description": "The name of chain",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}": {
      "get": {
        "description": "Get collection by contract address",
        "tags": [
          "collections"
        ],
        "operationId": "GetCollection",
        "summary": "Get collection by contract address",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCollectionResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts/{token_id}": {
      "get": {
        "description": "Get NFT by token ID",
        "tags": [
          "nfts"
        ],
        "summary": "Get NFT by token ID",
        "operationId": "GetNFT",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The address of NFT contract",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "token_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "An `uint256` token id as string",
            "example": "1"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNFTResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts": {
      "get": {
        "description": "List NFTs by contract address",
        "tags": [
          "nfts"
        ],
        "summary": "List NFTs by contract address",
        "operationId": "ListNFTs",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "required": true,
            "description": "Contract address",
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/accounts/{account_address}/nfts": {
      "get": {
        "description": "List NFTs by account address",
        "tags": [
          "nfts"
        ],
        "operationId": "ListNFTsByAccountAddress",
        "summary": "List NFTs by account address",
        "parameters": [
          {
            "name": "account_address",
            "in": "path",
            "description": "Account address",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "contract_address",
            "in": "query",
            "description": "The address of contract",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/collections/{contract_address}/nfts/{token_id}/owners": {
      "get": {
        "description": "List NFT owners by token ID",
        "tags": [
          "nft owners"
        ],
        "operationId": "ListNFTOwners",
        "summary": "List NFT owners by token ID",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "token_id",
            "in": "path",
            "description": "An `uint256` token id as string",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            },
            "examples": {
              "testnet": {
                "value": "imtbl-zkevm-testnet",
                "summary": "Immutable zkEVM Public Testnet"
              }
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNFTOwnersResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/tokens": {
      "get": {
        "description": "List ERC20 tokens",
        "tags": [
          "tokens"
        ],
        "operationId": "ListERC20Tokens",
        "summary": "List ERC20 tokens",
        "parameters": [
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTokensResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/tokens/{contract_address}": {
      "get": {
        "description": "Get single ERC20 token",
        "tags": [
          "tokens"
        ],
        "operationId": "GetERC20Token",
        "summary": "Get single ERC20 token",
        "parameters": [
          {
            "name": "contract_address",
            "in": "path",
            "description": "The address of contract",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          {
            "name": "chain_name",
            "description": "The name of chain",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTokenResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains": {
      "get": {
        "description": "List supported chains",
        "summary": "List supported chains",
        "tags": [
          "chains"
        ],
        "operationId": "ListChains",
        "parameters": [
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          },
          {
            "name": "page_size",
            "description": "Maximum number of items to return",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListChainsResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/orders": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "List all orders",
        "description": "List all orders",
        "operationId": "ListOrders",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Order status to filter by",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            }
          },
          {
            "name": "sell_item_contract_address",
            "in": "query",
            "description": "Sell item contract address to filter by",
            "required": false,
            "schema": {
              "type": "string",
              "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            }
          },
          {
            "name": "sell_item_token_id",
            "in": "query",
            "description": "Sell item token identifier to filter by",
            "required": false,
            "schema": {
              "type": "string",
              "example": "1",
              "pattern": "\\d+"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Maximum number of orders to return per page",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          },
          {
            "name": "sort_by",
            "in": "query",
            "description": "Order field to sort by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at",
                "buy_item_amount"
              ],
              "description": "Order field to sort by",
              "example": "created_at"
            },
            "example": "created_at"
          },
          {
            "name": "sort_direction",
            "in": "query",
            "description": "Ascending or descending direction for sort",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "description": "Ascending or descending direction for sort",
              "example": "asc"
            },
            "example": "asc"
          },
          {
            "name": "page_cursor",
            "in": "query",
            "description": "Page cursor to retrieve previous or next page. Use the value returned in the response.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PageCursor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOrdersResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "orders"
        ],
        "summary": "Create an order",
        "description": "Create an order",
        "operationId": "CreateOrder",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/chains/{chain_name}/orders/{order_id}": {
      "get": {
        "tags": [
          "orders"
        ],
        "summary": "Get a single order by ID",
        "description": "Get a single order by ID",
        "operationId": "GetOrder",
        "parameters": [
          {
            "name": "chain_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainName"
            }
          },
          {
            "name": "order_id",
            "in": "path",
            "description": "Global Order identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Global Order identifier",
              "example": "018792C9-4AD7-8EC4-4038-9E05C598534A"
            },
            "example": "018792C9-4AD7-8EC4-4038-9E05C598534A"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/counterfactual-address": {
      "post": {
        "summary": "Create a counterfactual address",
        "description": "Create a counterfactual address for a user based on their Ethereum address",
        "tags": [
          "passport"
        ],
        "operationId": "createCounterfactualAddress",
        "security": [
          {
            "BearerAuth": [
              "transact"
            ]
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCounterfactualAddressRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Counterfactual address created response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCounterfactualAddressRes"
                }
              }
            }
          },
          "400": {
            "description": "BadRequestError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError400"
                }
              }
            }
          },
          "401": {
            "description": "UnauthorizedError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError401"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError403"
                }
              }
            }
          },
          "429": {
            "description": "TooManyRequestsError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError429"
                }
              }
            }
          },
          "500": {
            "description": "InternalServerError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIError500"
                }
              }
            }
          },
          "default": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BasicAPIError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "NotFound": {
        "description": "The specified resource was not found (404)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError404"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request (400)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError400"
            }
          }
        }
      },
      "UnauthorisedRequest": {
        "description": "Unauthorised Request (401)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError401"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too Many Requests (429)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError429"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error (500)",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIError500"
            }
          }
        }
      }
    },
    "schemas": {
      "PageSize": {
        "type": "integer",
        "format": "int32",
        "description": "Maximum number of items to return",
        "minimum": 1,
        "default": 100,
        "maximum": 200,
        "example": 10
      },
      "PageCursor": {
        "type": "string",
        "description": "Encoded page cursor to retrieve previous or next page. Use the value returned in the response.",
        "example": "ewogICJ0eXBlIjogInByZXYiLAogICJpdGVtIjogewogICAgImlkIjogNjI3NTEzMCwKICAgICJjcmVhdGVkX2F0IjogIjIwMjItMDktMTNUMTc6MDQ6MTIuMDI0MTI2WiIKICB9Cn0="
      },
      "Page": {
        "type": "object",
        "description": "Pagination properties",
        "properties": {
          "previous_cursor": {
            "type": "string",
            "nullable": true,
            "description": "First item as an encoded string",
            "example": "ewogICJ0eXBlIjogInByZXYiLAogICJpdGVtIjogewogICAgImlkIjogNjI3NTEzMCwKICAgICJjcmVhdGVkX2F0IjogIjIwMjItMDktMTNUMTc6MDQ6MTIuMDI0MTI2WiIKICB9Cn0="
          },
          "next_cursor": {
            "type": "string",
            "nullable": true,
            "description": "Last item as an encoded string",
            "example": "ewogICJ0eXBlIjogInByZXYiLAogICJpdGVtIjogewogICAgImlkIjogNjI3NTEzMCwKICAgICJjcmVhdGVkX2F0IjogIjIwMjItMDktMTNUMTc6MDQ6MTIuMDI0MTI2WiIKICB9Cn0="
          }
        },
        "required": [
          "previous_cursor",
          "next_cursor"
        ]
      },
      "ActivityType": {
        "description": "The activity type",
        "example": "mint",
        "type": "string",
        "enum": [
          "mint",
          "burn",
          "transfer",
          "sale"
        ]
      },
      "ActivityNFT": {
        "type": "object",
        "properties": {
          "contract_type": {
            "$ref": "#/components/schemas/ContractType"
          },
          "contract_address": {
            "description": "The token contract address",
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "token_id": {
            "description": "An `uint256` token id as string",
            "type": "string",
            "example": "1"
          }
        },
        "required": [
          "contract_type",
          "contract_address",
          "token_id"
        ]
      },
      "ActivityToken": {
        "type": "object",
        "properties": {
          "contract_type": {
            "$ref": "#/components/schemas/ContractType"
          },
          "contract_address": {
            "description": "The contract address",
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          }
        },
        "required": [
          "contract_type",
          "contract_address"
        ]
      },
      "ActivityAsset": {
        "description": "The contract and asset details for this activity",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ActivityNFT"
          },
          {
            "$ref": "#/components/schemas/ActivityToken"
          }
        ],
        "discriminator": {
          "propertyName": "contract_type"
        }
      },
      "Mint": {
        "type": "object",
        "description": "The mint activity details",
        "properties": {
          "activity_type": {
            "$ref": "#/components/schemas/ActivityType"
          },
          "to": {
            "description": "The account address the asset was minted to",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The minted amount",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "activity_type",
          "to",
          "amount",
          "asset"
        ]
      },
      "Burn": {
        "description": "The burn activity details",
        "type": "object",
        "properties": {
          "activity_type": {
            "$ref": "#/components/schemas/ActivityType"
          },
          "from": {
            "description": "The account address the asset was transferred from",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The amount of assets burnt",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "activity_type",
          "from",
          "amount",
          "asset"
        ]
      },
      "Transfer": {
        "type": "object",
        "description": "The transfer activity details",
        "properties": {
          "activity_type": {
            "$ref": "#/components/schemas/ActivityType"
          },
          "from": {
            "description": "The account address the asset was transferred from",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "to": {
            "description": "The account address the asset was transferred to",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "amount": {
            "description": "The amount of assets transferred",
            "type": "string",
            "example": "1"
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityAsset"
          }
        },
        "required": [
          "activity_type",
          "from",
          "to",
          "amount",
          "asset"
        ]
      },
      "ActivityNativeToken": {
        "type": "object",
        "properties": {
          "symbol": {
            "description": "The token symbol",
            "type": "string",
            "example": "ETH"
          }
        },
        "required": [
          "symbol"
        ]
      },
      "SalePayment": {
        "type": "object",
        "properties": {
          "token": {
            "description": "The type of payment token",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ActivityToken"
              },
              {
                "$ref": "#/components/schemas/ActivityNativeToken"
              }
            ]
          },
          "price_excluding_fees": {
            "description": "The base price of the sale not including any fees",
            "type": "string",
            "example": "180"
          },
          "price_including_fees": {
            "description": "The total price of the sale. Includes the sum of all fees",
            "type": "string",
            "example": "200"
          },
          "fees": {
            "description": "The fees associated with this sale",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaleFee"
            },
            "example": [
              {
                "address": "0xB0F3749458169B7Ad51B5503CC3649DE55c2D0D2",
                "amount": "20",
                "type": "ROYALTY"
              }
            ],
            "minItems": 0
          }
        },
        "required": [
          "token",
          "price_excluding_fees",
          "price_including_fees",
          "fees"
        ]
      },
      "SaleFee": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Fee payable to recipient upon settlement",
            "example": "200"
          },
          "type": {
            "type": "string",
            "description": "Fee type",
            "example": "ROYALTY",
            "enum": [
              "ROYALTY"
            ]
          },
          "recipient": {
            "type": "string",
            "description": "Wallet address of fee recipient",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233"
          }
        }
      },
      "NFTSale": {
        "description": "The NFT Sale activity details",
        "type": "object",
        "properties": {
          "activity_type": {
            "$ref": "#/components/schemas/ActivityType"
          },
          "order_id": {
            "description": "The id of order",
            "type": "string",
            "example": "ARZ3NDEKTSV4RRFFQ69G5FAV"
          },
          "buyer_address": {
            "description": "The account address of buyer",
            "type": "string",
            "example": "0xe9b00a87700f660e46b6f5deaa1232836bcc07d3"
          },
          "seller_address": {
            "description": "The account address of seller",
            "type": "string",
            "example": "0xbD6cFcf93474De653d7B42b346c7c25d1F9c559C"
          },
          "quantity": {
            "description": "The quantity of tokens sold",
            "type": "integer",
            "format": "int32",
            "example": 1
          },
          "asset": {
            "$ref": "#/components/schemas/ActivityNFT"
          },
          "payment": {
            "$ref": "#/components/schemas/SalePayment"
          }
        },
        "required": [
          "activity_type",
          "order_id",
          "buyer_address",
          "seller_address",
          "quantity",
          "asset",
          "payment"
        ]
      },
      "ActivityDetails": {
        "description": "The activity details",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Mint"
          },
          {
            "$ref": "#/components/schemas/Burn"
          },
          {
            "$ref": "#/components/schemas/Transfer"
          },
          {
            "$ref": "#/components/schemas/NFTSale"
          }
        ],
        "discriminator": {
          "propertyName": "activity_type"
        }
      },
      "BlockchainMetadata": {
        "description": "The metadata related to blockchain transaction",
        "nullable": true,
        "type": "object",
        "properties": {
          "transaction_hash": {
            "type": "string",
            "description": "The transaction hash of the activity",
            "example": "0x68d9eac5e3b3c3580404989a4030c948a78e1b07b2b5ea5688d8c38a6c61c93e"
          },
          "block_number": {
            "description": "EVM block number (uint64 as string)",
            "type": "string",
            "example": "1"
          },
          "transaction_index": {
            "description": "Transaction index in a block (uint32 as string)",
            "type": "string",
            "example": "1"
          },
          "log_index": {
            "description": "The log index of activity in a block (uint32 as string)",
            "type": "string",
            "nullable": true,
            "example": "1"
          }
        },
        "required": [
          "transaction_hash",
          "block_number",
          "transaction_index",
          "log_index"
        ]
      },
      "Activity": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ActivityID"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "type": {
            "$ref": "#/components/schemas/ActivityType"
          },
          "details": {
            "$ref": "#/components/schemas/ActivityDetails"
          },
          "indexed_at": {
            "type": "string",
            "description": "The time activity was indexed",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "blockchain_metadata": {
            "$ref": "#/components/schemas/BlockchainMetadata"
          }
        },
        "required": [
          "id",
          "chain",
          "type",
          "details",
          "indexed_at",
          "blockchain_metadata"
        ]
      },
      "ListActivitiesResult": {
        "type": "object",
        "description": "List activities response",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of activities",
            "items": {
              "$ref": "#/components/schemas/Activity"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "GetActivityResult": {
        "type": "object",
        "description": "Single activity",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Activity"
          }
        },
        "required": [
          "result"
        ]
      },
      "Collection": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The name of the collection",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "symbol": {
            "type": "string",
            "nullable": true,
            "description": "The symbol of contract",
            "example": "BASP"
          },
          "contract_type": {
            "$ref": "#/components/schemas/CollectionContractType"
          },
          "contract_address": {
            "type": "string",
            "description": "The address of the contract",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "The description of collection",
            "example": "Some description"
          },
          "image": {
            "type": "string",
            "description": "The url of the collection image",
            "example": "https://some-url",
            "nullable": true
          },
          "external_link": {
            "type": "string",
            "description": "The url of external link",
            "example": "https://some-url",
            "nullable": true
          },
          "contract_uri": {
            "type": "string",
            "description": "The uri for the metadata of the collection",
            "example": "https://some-url",
            "nullable": true
          },
          "base_uri": {
            "type": "string",
            "nullable": true,
            "description": "The metadata uri for nft",
            "example": "https://some-url"
          },
          "indexed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection was first indexed"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection was last updated"
          },
          "last_metadata_synced_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the collection metadata was last synced"
          }
        },
        "required": [
          "chain",
          "name",
          "symbol",
          "contract_type",
          "contract_address",
          "description",
          "image",
          "external_link",
          "base_uri",
          "metadata_uri",
          "indexed_at",
          "updated_at",
          "last_metadata_synced_at"
        ]
      },
      "ListCollectionsResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of collections",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collection"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "GetCollectionResult": {
        "type": "object",
        "description": "Single Collection",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Collection"
          }
        },
        "required": [
          "result"
        ]
      },
      "NFT": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "token_id": {
            "type": "string",
            "example": "1",
            "description": "An `uint256` token id as string"
          },
          "contract_address": {
            "type": "string",
            "example": "0x8a90cab2b38dba80c64b7734e58ee1db38b8992e",
            "description": "The contract address of the NFT"
          },
          "indexed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "When the NFT was first indexed"
          },
          "metadata_synced_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "When NFT metadata was last synced",
            "example": "2022-08-16T17:43:26.991388Z"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "example": "Sword",
            "description": "The name of the NFT"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "example": "2022-08-16T17:43:26.991388Z",
            "description": "The description of the NFT"
          },
          "image": {
            "type": "string",
            "nullable": true,
            "description": "The image url of the NFT",
            "example": "https://some-url"
          },
          "external_link": {
            "type": "string",
            "nullable": true,
            "description": "The external website link of NFT",
            "example": "https://some-url"
          },
          "animation_url": {
            "type": "string",
            "nullable": true,
            "description": "The animation url of the NFT",
            "example": "https://some-url"
          },
          "youtube_url": {
            "type": "string",
            "nullable": true,
            "description": "The youtube URL of NFT",
            "example": "https://some-url"
          },
          "mint_activity_id": {
            "type": "string",
            "nullable": true,
            "example": "8d644608-a26f-4e41-bdc8-205cae20c7c5",
            "description": "The id of mint activity of this NFT"
          }
        },
        "required": [
          "chain",
          "token_id",
          "contract_address",
          "indexed_at",
          "metadata_synced_at",
          "name",
          "description",
          "image",
          "external_link",
          "animation_url",
          "youtube_url",
          "mint_activity_id"
        ]
      },
      "NFTMetadataAttribute": {
        "type": "object",
        "properties": {
          "trait_type": {
            "description": "The metadata trait type",
            "type": "string",
            "example": "Aqua Power"
          },
          "value": {
            "type": "string",
            "description": "The metadata trait value",
            "example": "40"
          }
        },
        "required": [
          "trait_type",
          "value"
        ]
      },
      "NFTMetadataAttributes": {
        "type": "object",
        "description": "List of normalized NFT metadata attributes",
        "properties": {
          "attributes": {
            "type": "array",
            "description": "List of NFT Metadata attributes",
            "items": {
              "$ref": "#/components/schemas/NFTMetadataAttribute"
            }
          }
        },
        "required": [
          "attributes"
        ]
      },
      "ChainName": {
        "type": "string",
        "description": "The name of chain",
        "example": "imtbl-zkevm-testnet"
      },
      "ContractType": {
        "description": "The contract type",
        "type": "string",
        "enum": [
          "ERC721",
          "ERC20"
        ]
      },
      "ActivityID": {
        "description": "Activity ID in UUIDv4 format",
        "type": "string",
        "format": "uuid",
        "example": "4e28df8d-f65c-4c11-ba04-6a9dd47b179b"
      },
      "CollectionContractType": {
        "description": "The collection contract type",
        "type": "string",
        "enum": [
          "ERC721"
        ]
      },
      "NFTWithMetadataAttributes": {
        "description": "A single NFT with metadata attributes",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/NFT"
          },
          {
            "$ref": "#/components/schemas/NFTMetadataAttributes"
          }
        ]
      },
      "GetNFTResult": {
        "type": "object",
        "description": "Single NFT",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/NFTWithMetadataAttributes"
          }
        },
        "required": [
          "result"
        ]
      },
      "ListNFTsResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of nfts",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFT"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "NFTOwner": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "contract_address": {
            "type": "string",
            "description": "The address of NFT contract",
            "example": "0x5a019874f4fae314b0eaa4606be746366e661306"
          },
          "token_id": {
            "type": "string",
            "description": "An `uint256` token id as string",
            "example": "1"
          },
          "account_address": {
            "type": "string",
            "description": "The account address of the owner of the NFT",
            "example": "0x5a019874f4fae314b0eaa4606be746366e661306"
          },
          "quantity": {
            "type": "string",
            "description": "The quantity of owned tokens (uint256 as string)",
            "example": "1"
          }
        },
        "required": [
          "chain",
          "contract_address",
          "token_id",
          "account_address",
          "quantity"
        ]
      },
      "GetTokenResult": {
        "type": "object",
        "description": "Single Token",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "required": [
          "result"
        ]
      },
      "ListNFTOwnersResult": {
        "type": "object",
        "properties": {
          "result": {
            "description": "List of nft owners",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFTOwner"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "ChainWithDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Chain"
          },
          {
            "type": "object",
            "properties": {
              "rpc_url": {
                "type": "string",
                "nullable": true,
                "description": "URL for RPC node"
              }
            },
            "required": [
              "rpc_url"
            ]
          }
        ]
      },
      "Chain": {
        "type": "object",
        "description": "The chain details",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of chain",
            "example": "eip155:13372"
          },
          "name": {
            "type": "string",
            "description": "The name of chain",
            "example": "imtbl-zkevm-testnet"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ListChainsResult": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of chains",
            "items": {
              "$ref": "#/components/schemas/ChainWithDetails"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "ListTokensResult": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "description": "List of tokens",
            "items": {
              "$ref": "#/components/schemas/Token"
            }
          },
          "page": {
            "$ref": "#/components/schemas/Page"
          }
        },
        "required": [
          "result",
          "page"
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "contract_address": {
            "type": "string"
          },
          "symbol": {
            "type": "string",
            "nullable": true
          },
          "decimals": {
            "type": "integer",
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "chain",
          "contract_address",
          "symbol",
          "decimals",
          "image_url",
          "name"
        ]
      },
      "DemoPage": {
        "type": "string",
        "example": "<html>HTML text</html>"
      },
      "BasicAPIError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error Message",
            "example": "all fields must be provided"
          },
          "link": {
            "type": "string",
            "description": "Link to IMX documentation that can help resolve this error",
            "example": "https://docs.x.immutable.com/reference/#/"
          },
          "trace_id": {
            "type": "string",
            "description": "Trace ID of the initial request",
            "example": "e47634b79a5cd6894ddc9639ec4aad26"
          }
        },
        "required": [
          "message",
          "link",
          "trace_id"
        ]
      },
      "APIError400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "VALIDATION_ERROR"
                ],
                "example": "VALIDATION_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "RESOURCE_NOT_FOUND"
                ],
                "example": "RESOURCE_NOT_FOUND"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError500": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "INTERNAL_SERVER_ERROR"
                ],
                "example": "INTERNAL_SERVER_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError401": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "UNAUTHORISED_REQUEST"
                ],
                "example": "UNAUTHORISED_REQUEST"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "APIError429": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "TOO_MANY_REQUESTS_ERROR"
                ],
                "example": "TOO_MANY_REQUESTS_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      },
      "BuyItem": {
        "type": "object",
        "properties": {
          "item_type": {
            "type": "string",
            "description": "Token type user is willing to accept upon settlement",
            "example": "ERC20",
            "enum": [
              "NATIVE",
              "ERC20"
            ]
          },
          "start_amount": {
            "type": "string",
            "description": "Starting price of what the user will consider to sell token",
            "example": "9750000000000000000",
            "pattern": "\\d+"
          },
          "contract_address": {
            "type": "string",
            "description": "Address of ERC20 token",
            "example": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "example": {
          "item_type": "NATIVE",
          "start_amount": "9750000000000000000",
          "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
        },
        "required": [
          "item_type",
          "start_amount"
        ]
      },
      "CreateOrderRequestBody": {
        "type": "object",
        "properties": {
          "account_address": {
            "type": "string",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "order_hash": {
            "type": "string",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
          },
          "buy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BuyItem"
            },
            "example": [
              {
                "item_type": "NATIVE",
                "start_amount": "9750000000000000000",
                "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
              }
            ],
            "minItems": 1,
            "maxItems": 1
          },
          "buy_fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            },
            "example": [],
            "minItems": 0,
            "maxItems": 1
          },
          "end_time": {
            "type": "string",
            "description": "Time after which the Order is considered expired",
            "format": "date-time",
            "example": "2022-03-09T05:00:50.52Z"
          },
          "protocol_data": {
            "$ref": "#/components/schemas/CreateOrderProtocolData"
          },
          "salt": {
            "type": "string",
            "description": "A random value added to the create Order request",
            "example": "12686911856931635052326433555881236148"
          },
          "sell": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SellItem"
            },
            "example": [
              {
                "item_type": "ERC721",
                "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                "token_id": "1"
              }
            ],
            "minItems": 1,
            "maxItems": 1
          },
          "signature": {
            "type": "string",
            "description": "Digital signature generated by the user for the specific Order",
            "example": "0x"
          },
          "start_time": {
            "type": "string",
            "description": "Time after which Order is considered active",
            "format": "date-time",
            "example": "2022-03-09T05:00:50.52Z"
          }
        },
        "example": {
          "order_hash": "0x0821933d9391bc9bf11a6010fe84776c84b203abff0c1ad781fb4881409c8770",
          "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
          "buy": [
            {
              "item_type": "NATIVE",
              "start_amount": "9750000000000000000",
              "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
            }
          ],
          "buy_fees": [],
          "end_time": "2022-03-10T05:00:50.52Z",
          "protocol_data": {
            "order_type": "FULL_RESTRICTED",
            "zone_address": "0x12",
            "seaport_address": "0x12",
            "seaport_version": "1.4"
          },
          "salt": "12686911856931635052326433555881236148",
          "sell": [
            {
              "item_type": "ERC721",
              "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
              "token_id": "1"
            }
          ],
          "signature": "0x",
          "start_time": "2022-03-09T05:00:50.52Z"
        },
        "required": [
          "account_address",
          "order_hash",
          "buy",
          "sell",
          "buy_fees",
          "end_time",
          "start_time",
          "protocol_data",
          "salt",
          "signature"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Error trace id",
            "example": "1234567890"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Order creation failed"
          }
        },
        "description": "Resource not found",
        "example": {
          "id": "1234567890",
          "message": "Order creation failed"
        },
        "required": [
          "message"
        ]
      },
      "Fee": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Fee payable to recipient upon settlement",
            "example": "2250000000000000000",
            "pattern": "\\d+"
          },
          "fee_type": {
            "type": "string",
            "description": "Fee type",
            "example": "ROYALTY",
            "enum": [
              "ROYALTY"
            ]
          },
          "recipient": {
            "type": "string",
            "description": "Wallet address of fee recipient",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          }
        },
        "example": {
          "amount": "2250000000000000000",
          "fee_type": "ROYALTY",
          "recipient": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92233"
        },
        "required": [
          "fee_type",
          "amount",
          "recipient"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "account_address": {
            "type": "string",
            "example": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
          },
          "buy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BuyItem"
            },
            "example": [
              {
                "item_type": "NATIVE",
                "start_amount": "9750000000000000000",
                "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
              }
            ],
            "minItems": 1,
            "maxItems": 1
          },
          "buy_fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Fee"
            },
            "example": [],
            "minItems": 0,
            "maxItems": 1
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "create_time": {
            "type": "string",
            "description": "Time the Order is created",
            "format": "date-time",
            "example": "2022-03-07T07:20:50.52Z"
          },
          "end_time": {
            "type": "string",
            "description": "Time after which the Order is considered expired",
            "format": "date-time",
            "example": "2022-03-10T05:00:50.52Z"
          },
          "id": {
            "type": "string",
            "description": "Global Order identifier",
            "example": "018792C9-4AD7-8EC4-4038-9E05C598534A"
          },
          "protocol_data": {
            "$ref": "#/components/schemas/ProtocolData"
          },
          "salt": {
            "type": "string",
            "description": "A random value added to the create Order request",
            "example": "12686911856931635052326433555881236148"
          },
          "sell": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SellItem"
            },
            "example": [
              {
                "item_type": "ERC721",
                "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                "token_id": "1"
              }
            ],
            "minItems": 1,
            "maxItems": 1
          },
          "signature": {
            "type": "string",
            "description": "Digital signature generated by the user for the specific Order",
            "example": "0x"
          },
          "start_time": {
            "type": "string",
            "description": "Time after which Order is considered active",
            "format": "date-time",
            "example": "2022-03-09T05:00:50.52Z"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "update_time": {
            "type": "string",
            "description": "Time the Order is last updated",
            "format": "date-time",
            "example": "2022-03-07T07:20:50.52Z"
          }
        },
        "example": {
          "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
          "buy": [
            {
              "item_type": "NATIVE",
              "start_amount": "9750000000000000000",
              "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
            }
          ],
          "buy_fees": [],
          "chain": {
            "id": "eip155:11155111",
            "name": "sepolia"
          },
          "create_time": "2022-03-07T07:20:50.52Z",
          "end_time": "2022-03-10T05:00:50.52Z",
          "id": "018792C9-4AD7-8EC4-4038-9E05C598534A",
          "protocol_data": {
            "order_type": "FULL_RESTRICTED",
            "operator_signature": "0x12",
            "zone_address": "0x12",
            "seaport_address": "0x12",
            "seaport_version": "1.4"
          },
          "salt": "12686911856931635052326433555881236148",
          "sell": [
            {
              "item_type": "ERC721",
              "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
              "token_id": "1"
            }
          ],
          "signature": "0x",
          "start_time": "2022-03-09T05:00:50.52Z",
          "status": "ACTIVE",
          "update_time": "2022-03-07T07:20:50.52Z"
        },
        "required": [
          "id",
          "account_address",
          "buy",
          "sell",
          "buy_fees",
          "chain",
          "create_time",
          "end_time",
          "start_time",
          "update_time",
          "protocol_data",
          "salt",
          "signature",
          "status"
        ]
      },
      "OrderResult": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Order"
          }
        },
        "required": [
          "result"
        ],
        "example": {
          "result": {
            "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
            "buy": [
              {
                "item_type": "ERC20",
                "start_amount": "9750000000000000000",
                "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
              }
            ],
            "buy_fees": [],
            "chain": {
              "id": "eip155:11155111",
              "name": "sepolia"
            },
            "create_time": "2022-03-07T07:20:50.52Z",
            "end_time": "2022-03-10T05:00:50.52Z",
            "id": "018792C9-4AD7-8EC4-4038-9E05C598534A",
            "protocol_data": {
              "order_type": "FULL_RESTRICTED",
              "operator_signature": "0x12",
              "zone_address": "0x12",
              "seaport_address": "0x12",
              "seaport_version": "1.4"
            },
            "salt": "12686911856931635052326433555881236148",
            "sell": [
              {
                "item_type": "ERC721",
                "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                "token_id": "1"
              }
            ],
            "signature": "0x",
            "start_time": "2022-03-09T05:00:50.52Z",
            "status": "EXPIRED",
            "update_time": "2022-03-07T07:20:50.52Z"
          }
        }
      },
      "ListOrdersResult": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/Page"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "minItems": 0,
            "maxItems": 200
          }
        },
        "required": [
          "page",
          "result"
        ],
        "example": {
          "page": {
            "previous_cursor": "MjAyMy0wMS0yM1QwMTo1NToyNy4zNTM2MzA",
            "next_cursor": "MjAyMy0wMS0yM1QwMTo1NToyNy4zNTM2MzA"
          },
          "result": [
            {
              "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "buy": [
                {
                  "item_type": "ERC20",
                  "start_amount": "9750000000000000000",
                  "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
                }
              ],
              "buy_fees": [],
              "chain": {
                "id": "eip155:11155111",
                "name": "sepolia"
              },
              "create_time": "2022-03-07T07:20:50.52Z",
              "end_time": "2022-03-10T05:00:50.52Z",
              "id": "018792C9-4AD7-8EC4-4038-9E05C598534A",
              "protocol_data": {
                "order_type": "FULL_RESTRICTED",
                "operator_signature": "0x12",
                "zone_address": "0x12",
                "seaport_address": "0x12",
                "seaport_version": "1.4"
              },
              "salt": "12686911856931635052326433555881236148",
              "sell": [
                {
                  "item_type": "ERC721",
                  "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                  "token_id": "1"
                }
              ],
              "signature": "0x",
              "start_time": "2022-03-09T05:00:50.52Z",
              "status": "EXPIRED",
              "update_time": "2022-03-07T07:20:50.52Z"
            },
            {
              "account_address": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
              "buy": [
                {
                  "item_type": "ERC20",
                  "start_amount": "9750000000000000000",
                  "contract_address": "0x0165878A594ca255338adfa4d48449f69242Eb8F"
                }
              ],
              "buy_fees": [],
              "chain": {
                "id": "eip155:11155111",
                "name": "sepolia"
              },
              "create_time": "2022-03-07T07:20:50.52Z",
              "end_time": "2022-03-10T05:00:50.52Z",
              "id": "018792C9-4AD7-8EC4-4038-9E05C598534A",
              "protocol_data": {
                "order_type": "FULL_RESTRICTED",
                "operator_signature": "0x12",
                "zone_address": "0x12",
                "seaport_address": "0x12",
                "seaport_version": "1.4"
              },
              "salt": "12686911856931635052326433555881236148",
              "sell": [
                {
                  "item_type": "ERC721",
                  "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
                  "token_id": "1"
                }
              ],
              "signature": "0x",
              "start_time": "2022-03-09T05:00:50.52Z",
              "status": "EXPIRED",
              "update_time": "2022-03-07T07:20:50.52Z"
            }
          ]
        }
      },
      "OrderStatus": {
        "type": "string",
        "description": "The Order status",
        "example": "ACTIVE",
        "enum": [
          "PENDING",
          "ACTIVE",
          "INACTIVE",
          "FILLED",
          "CANCELLED",
          "EXPIRED"
        ]
      },
      "CreateOrderProtocolData": {
        "type": "object",
        "properties": {
          "order_type": {
            "type": "string",
            "description": "The Order type",
            "example": "FULL_RESTRICTED",
            "enum": [
              "FULL_RESTRICTED"
            ]
          },
          "zone_address": {
            "type": "string",
            "description": "Immutable zone address",
            "example": "0x12"
          },
          "counter": {
            "type": "string",
            "description": "big.Int or uint256 string for order counter",
            "example": "92315562"
          },
          "seaport_address": {
            "type": "string",
            "description": "Immutable Seaport contract address",
            "example": "0x12"
          },
          "seaport_version": {
            "type": "string",
            "description": "Immutable Seaport contract version",
            "example": "1.4"
          }
        },
        "example": {
          "order_type": "FULL_RESTRICTED",
          "zone_address": "0x12",
          "counter": "92315562",
          "seaport_address": "0x12",
          "seaport_version": "1.4"
        },
        "required": [
          "order_type",
          "counter",
          "order_type",
          "zone_address",
          "seaport_address",
          "seaport_version"
        ]
      },
      "ProtocolData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateOrderProtocolData"
          },
          {
            "type": "object",
            "properties": {
              "operator_signature": {
                "type": "string",
                "description": "Operator signature signed by orderbook",
                "example": "0x12"
              }
            },
            "example": {
              "operator_signature": "0x12"
            },
            "required": [
              "operator_signature"
            ]
          }
        ]
      },
      "SellItem": {
        "type": "object",
        "properties": {
          "item_type": {
            "type": "string",
            "description": "Token type user is offering which in this case is a ERC721",
            "example": "ERC721",
            "enum": [
              "ERC721"
            ]
          },
          "contract_address": {
            "type": "string",
            "description": "Address of ERC721 token",
            "example": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "token_id": {
            "type": "string",
            "description": "ID of ERC721 token",
            "example": "1",
            "pattern": "\\d+"
          }
        },
        "example": {
          "item_type": "ERC721",
          "contract_address": "0x692edAd005237c7E737bB2c0F3D8ccCc10D3479E",
          "token_id": "1"
        },
        "required": [
          "item_type",
          "contract_address",
          "token_id"
        ]
      },
      "CreateCounterfactualAddressRequest": {
        "type": "object",
        "required": [
          "ethereumAddress",
          "ethereumSignature"
        ],
        "properties": {
          "ethereumAddress": {
            "description": "The user's UAK address",
            "type": "string",
            "maxLength": 42
          },
          "ethereumSignature": {
            "description": "The signature generated with the UAK",
            "type": "string",
            "maxLength": 132
          }
        },
        "additionalProperties": false
      },
      "CreateCounterfactualAddressRes": {
        "type": "object",
        "required": [
          "counterfactualAddress"
        ],
        "properties": {
          "counterfactualAddress": {
            "description": "The user's counterfactual address",
            "type": "string",
            "maxLength": 42
          }
        }
      },
      "APIError403": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicAPIError"
          },
          {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error Code",
                "enum": [
                  "AUTHENTICATION_ERROR"
                ],
                "example": "AUTHENTICATION_ERROR"
              },
              "details": {
                "type": "object",
                "nullable": true,
                "description": "Additional details to help resolve the error"
              }
            },
            "required": [
              "code",
              "details"
            ]
          }
        ]
      }
    }
  }
}
