/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/items/{id}': {
    /** Get item by ID */
    get: {
      parameters: {
        path: {
          /** Item ID */
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['inventory.Item'];
        };
      };
    };
  };
  '/{gameID}/batch': {
    /** An atomic operation that allow to create and delete multiple items */
    post: {
      parameters: {
        path: {
          /** Game ID - The game you're creating the item for, must match API Key */
          gameID: string;
        };
        body: {
          /** Batch request with an array of items to delete and create */
          request: definitions['inventory.BatchRequest'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['inventory.Item'][];
        };
      };
    };
  };
  '/{gameID}/items': {
    /** Get items based on filters */
    get: {
      parameters: {
        path: {
          /** Game ID to filter items */
          gameID: string;
        };
        query: {
          /** Item IDs to filter items */
          id?: unknown[];
          /** Owners to filter items */
          owner?: unknown[];
          /** Number of records per page */
          limit?: number;
          /** Page number */
          page?: number;
          /** field to order the results */
          order_by?: string;
          /** results ordered ascending or descending */
          direction?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['inventory.PaginatedItems'];
        };
      };
    };
    /** Create an item for the given game, owner, location and item definition */
    post: {
      parameters: {
        path: {
          /** Game ID - The game you're creating the item for, must match API Key */
          gameID: string;
        };
        body: {
          /** Item Data */
          request: definitions['inventory.CreateItemRequest'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['inventory.Item'];
        };
      };
    };
  };
  '/{gameID}/items/{id}': {
    /** Delete an item for the given game */
    delete: {
      parameters: {
        path: {
          /** Game ID of the item you are trying to delete */
          gameID: string;
          /** Item ID to be deleted */
          id: string;
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  'inventory.BatchRequest': {
    items?: {
      create?: definitions['inventory.CreateItemRequest'][];
      delete?: definitions['inventory.DeleteItemRequest'][];
    };
  };
  'inventory.CreateItemRequest': {
    /** @example https://static.shardbound.com/cards/1.png */
    image?: string;
    /**
     * Format: uuid
     * @example 00000000-0000-0000-0000-000000000000
     */
    item_definition_id: string;
    /**
     * @description Location of the item. Can be one of the following values:
     * * offchain - Off chain, only in the inventory system.
     * * starkex - On the StarkEx Network.
     * * zkevm - On the ZK EVM Network.
     * @enum {string}
     */
    location: 'offchain' | 'zkevm' | 'starkex';
    /** @description JSON Object of item properties e.g. {"Level": 2, "Rarity": "Common"} */
    metadata?: { [key: string]: unknown };
    /**
     * Format: user_id,eth_address
     * @example 00000000-0000-0000-0000-000000000000,0x000000000000
     */
    owner: string;
  };
  'inventory.DeleteItemRequest': {
    /** @example shardbound::item::00000000-0000-0000-0000-000000000000::2OJwAJu2EpNckUgT0cY09cfZfCk */
    item_id: string;
  };
  'inventory.Item': {
    /**
     * Format: eth_address
     * @example 0x0000000000000000000000000000000000000000
     */
    contract_id?: string;
    /**
     * Format: date-time
     * @example 2023-04-05T00:00:00+00:00
     */
    created_at?: string;
    /**
     * Format: date-time
     * @example 2023-04-05T00:00:00+00:00
     */
    deleted_at?: string;
    /** @example shardbound */
    game_id?: string;
    /**
     * Format: resource_id
     * @example shardbound::item::item_definition_1::0ujsszwN8NRY24YaXiTIE2VWDTS
     */
    id?: string;
    /**
     * Format: uuid
     * @example 00000000-0000-0000-0000-000000000000
     */
    item_definition_id?: string;
    /**
     * Format: date-time
     * @example 2023-04-05T00:00:00+00:00
     */
    last_traded?: string;
    /**
     * @description Location of the item. Can be one of the following values:
     * * offchain - Off chain, only in the inventory system.
     * * starkex - On the StarkEx Network.
     * * zkevm - On the ZK EVM Network.
     * @example offchain
     */
    location?: string;
    /** @description JSON Object of item properties e.g. {"Level": 2, "Rarity": "Common"} */
    metadata?: { [key: string]: unknown };
    /**
     * Format: user_id,eth_address
     * @example 00000000-0000-0000-0000-000000000000,0x0000000000000000000000000000000000000000
     */
    owner?: string;
    /**
     * @description Status of the item. Can be one of the following values:
     * * minted - The item has been minted and is in the inventory system.
     * * minting - The item has been requested to be minted
     * * pending - The item is pending to be minted.
     * * failed - The item failed to be minted.
     * * offchain - The item is off chain. No minting is required.
     * @example U3dhZ2dlciByb2Nrcw==
     */
    status?: string;
    /**
     * Format: eth_address
     * @example 0x0000000000000000000000000000000000000000
     */
    token_id?: string;
    /**
     * Format: date-time
     * @example 2023-04-05T00:00:00+00:00
     */
    updated_at?: string;
  };
  'inventory.PaginatedItems': {
    direction?: string;
    limit?: number;
    page?: number;
    rows?: definitions['inventory.Item'][];
    sort?: string;
    total_pages?: number;
    total_rows?: number;
  };
}

export interface operations {}

export interface external {}
