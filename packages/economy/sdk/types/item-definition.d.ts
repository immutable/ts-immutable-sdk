/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/definitions': {
    /** List all definitions for a given Game ID */
    get: {
      parameters: {
        query: {
          /** The Game ID you want definitions for */
          game_id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['item.Definition'][];
        };
      };
    };
    /** Create item definition */
    post: {
      parameters: {
        body: {
          /** Definition creation payload */
          request: definitions['http.CreateItemDefinitionRequest'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['item.Definition'];
        };
      };
    };
  };
  '/definitions/{id}': {
    /** Get item definition given an ID */
    get: {
      parameters: {
        path: {
          /** Item Definition ID */
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['item.Definition'];
        };
      };
    };
    /** Update item definition */
    put: {
      parameters: {
        path: {
          /** Item Definition ID */
          id: string;
        };
        body: {
          /** Definition update payload */
          request: definitions['http.UpdateItemDefinitionRequest'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['item.Definition'];
        };
      };
    };
  };
  '/definitions/{id}/validate': {
    /** Validate metadata against a definition's template additional properties */
    post: {
      parameters: {
        path: {
          /** Item Definition ID */
          id: string;
        };
        body: {
          /** Definition update payload */
          request: { [key: string]: unknown };
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['item.CreationPayloadOutput'];
        };
      };
    };
  };
  '/templates': {
    /** List all templates for a given Game ID */
    get: {
      parameters: {
        query: {
          /** The Game ID you want templates for */
          game_id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['item.Template'][];
        };
      };
    };
    /** Create item template */
    post: {
      parameters: {
        body: {
          /** Template creation payload */
          request: definitions['http.CreateItemTemplateRequest'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['item.Template'];
        };
      };
    };
  };
  '/templates/{id}': {
    /** Get item template given an ID */
    get: {
      parameters: {
        path: {
          /** Item Template ID */
          id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['item.Template'];
        };
      };
    };
  };
  '/types': {
    /** List all types for a given Game ID */
    get: {
      parameters: {
        query: {
          /** The Game ID you want types for */
          game_id: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['item.Type'][];
        };
      };
    };
  };
}

export interface definitions {
  'http.CreateItemDefinitionRequest': {
    /** @example Deal 3 damage to a random sleeping enemy creature */
    description?: string;
    /** @example shardbound */
    game_id: string;
    /**
     * @description Image URL
     * @example https://images.godsunchained.com/art2/500/94.webp
     */
    image?: string;
    /** @example a8a9c29b-018d-43fe-b2d4-963a781161f0 */
    item_template_id: string;
    /** @example Demogorgon */
    name: string;
    /** @description JSON Object of item properties */
    properties?: { [key: string]: unknown };
  };
  'http.CreateItemTemplateRequest': {
    /** @example shardbound */
    game_id: string;
    /** @example Creature */
    name: string;
    property_schema: definitions['item.PropertySchema'][];
    /** @example a8a9c29b-018d-43fe-b2d4-963a781161f0 */
    type_id: string;
  };
  'http.UpdateItemDefinitionRequest': {
    /** @example Deal 3 damage to a random sleeping enemy creature */
    description?: string;
    /**
     * @description Image URL
     * @example https://images.godsunchained.com/art2/500/94.webp
     */
    image?: string;
    /** @example a8a9c29b-018d-43fe-b2d4-963a781161f0 */
    item_template_id: string;
    /** @example Demogorgon */
    name: string;
    /** @description JSON Object of item properties */
    properties?: { [key: string]: unknown };
    /**
     * @example draft
     * @enum {string}
     */
    status?: 'draft' | 'published';
  };
  'item.CreationPayloadOutput': {
    properties?: { [key: string]: unknown };
  };
  'item.Definition': {
    /** @example 2023-03-01T12:00:00.000Z */
    created_at?: string;
    /** @example Deal 3 damage to a random sleeping enemy creature */
    description?: string;
    /** @example shardbound */
    game_id?: string;
    /** @example ec950ac3-b3bf-4b81-8b17-576234eabd41 */
    id?: string;
    /**
     * @description Image URL
     * @example https://images.godsunchained.com/art2/500/94.webp
     */
    image?: string;
    /** @example a8a9c29b-018d-43fe-b2d4-963a781161f0 */
    item_template_id?: string;
    /** @example Demogorgon */
    name?: string;
    /** @description JSON Object of item properties */
    properties?: { [key: string]: unknown };
    property_schema?: definitions['item.PropertySchema'][];
    /** @example 2023-03-02T12:00:00.000Z */
    published_at?: string;
    /**
     * @example published
     * @enum {string}
     */
    status?: 'draft' | 'published';
    /** @example Card */
    type?: string;
    /** @example 2023-03-02T12:00:00.000Z */
    updated_at?: string;
  };
  'item.PropertySchema': {
    /** @example false */
    dynamic?: boolean;
    /** @example off-chain */
    location: string;
    /** @example Mana */
    name: string;
    /** @example true */
    required?: boolean;
    /** @description Map of property schema rules. Valid keys are "enum", "min", and "max" */
    rules?: { [key: string]: unknown };
    /** @example int */
    type?: string;
  };
  'item.Template': {
    /** @example 2023-03-01T12:00:00.000Z */
    created_at?: string;
    /** @example sb */
    game_id?: string;
    /** @example a8a9c29b-018d-43fe-b2d4-963a781161f0 */
    id?: string;
    /** @example Creature */
    name?: string;
    property_schema?: definitions['item.PropertySchema'][];
    /** @example Card */
    type?: string;
    /** @example 3e58eba-0f1b-4ed3-a1e8-d925ddc009c1 */
    type_id?: string;
    /** @example 2023-03-02T12:00:00.000Z */
    updated_at?: string;
  };
  'item.Type': {
    game_id?: string;
    id?: string;
    name?: string;
  };
}

export interface operations {}

export interface external {}
