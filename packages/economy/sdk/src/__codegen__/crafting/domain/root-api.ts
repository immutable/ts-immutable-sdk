/* tslint:disable */
/* eslint-disable */
/**
 * Crafting API
 * Crafting API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CraftCreateCraftInput } from '../models';
// @ts-ignore
import { CraftCreateCraftOutput } from '../models';
// @ts-ignore
import { CraftValidationErrors } from '../models';
// @ts-ignore
import { DomainCraft } from '../models';
/**
 * RootApi - axios parameter creator
 * @export
 */
export const RootApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Execuate recipe from user inputs and create a craft
         * @param {CraftCreateCraftInput} request Recipe execution payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craftPost: async (request: CraftCreateCraftInput, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('craftPost', 'request', request)
            const localVarPath = `/craft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all crafts
         * @summary Get all crafts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craftsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/crafts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the craft with the given ID
         * @summary Get the craft with the given ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craftsIdGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/crafts/:id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RootApi - functional programming interface
 * @export
 */
export const RootApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RootApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Execuate recipe from user inputs and create a craft
         * @param {CraftCreateCraftInput} request Recipe execution payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async craftPost(request: CraftCreateCraftInput, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CraftCreateCraftOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.craftPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all crafts
         * @summary Get all crafts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async craftsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainCraft>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.craftsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the craft with the given ID
         * @summary Get the craft with the given ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async craftsIdGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainCraft>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.craftsIdGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RootApi - factory interface
 * @export
 */
export const RootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RootApiFp(configuration)
    return {
        /**
         * 
         * @summary Execuate recipe from user inputs and create a craft
         * @param {CraftCreateCraftInput} request Recipe execution payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craftPost(request: CraftCreateCraftInput, options?: any): AxiosPromise<CraftCreateCraftOutput> {
            return localVarFp.craftPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all crafts
         * @summary Get all crafts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craftsGet(options?: any): AxiosPromise<Array<DomainCraft>> {
            return localVarFp.craftsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the craft with the given ID
         * @summary Get the craft with the given ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        craftsIdGet(options?: any): AxiosPromise<Array<DomainCraft>> {
            return localVarFp.craftsIdGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for craftPost operation in RootApi.
 * @export
 * @interface RootApiCraftPostRequest
 */
export interface RootApiCraftPostRequest {
    /**
     * Recipe execution payload
     * @type {CraftCreateCraftInput}
     * @memberof RootApiCraftPost
     */
    readonly request: CraftCreateCraftInput
}

/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export class RootApi extends BaseAPI {
    /**
     * 
     * @summary Execuate recipe from user inputs and create a craft
     * @param {RootApiCraftPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public craftPost(requestParameters: RootApiCraftPostRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).craftPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all crafts
     * @summary Get all crafts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public craftsGet(options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).craftsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the craft with the given ID
     * @summary Get the craft with the given ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public craftsIdGet(options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).craftsIdGet(options).then((request) => request(this.axios, this.basePath));
    }
}
