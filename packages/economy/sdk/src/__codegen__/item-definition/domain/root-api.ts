/* tslint:disable */
/* eslint-disable */
/**
 * ItemDefinition API
 * Item Definition API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpCreateGameRequest } from '../models';
// @ts-ignore
import { HttpCreateItemDefinitionRequest } from '../models';
// @ts-ignore
import { HttpCreateItemTemplateRequest } from '../models';
// @ts-ignore
import { HttpCreateTypeRequest } from '../models';
// @ts-ignore
import { HttpGenericResponse } from '../models';
// @ts-ignore
import { HttpUpdateItemDefinitionRequest } from '../models';
// @ts-ignore
import { HttpUpdateItemTemplateRequest } from '../models';
// @ts-ignore
import { ItemDefinition } from '../models';
// @ts-ignore
import { ItemGame } from '../models';
// @ts-ignore
import { ItemTemplate } from '../models';
// @ts-ignore
import { ItemType } from '../models';
/**
 * RootApi - axios parameter creator
 * @export
 */
export const RootApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all definitions for a given Game ID
         * @summary List item definitions
         * @param {string} gameId The Game ID you want definitions for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        definitionsGet: async (gameId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('definitionsGet', 'gameId', gameId)
            const localVarPath = `/definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameId !== undefined) {
                localVarQueryParameter['game_id'] = gameId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get item definition given an ID
         * @summary Get item definition
         * @param {string} id Item Definition ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        definitionsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('definitionsIdGet', 'id', id)
            const localVarPath = `/definitions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update item definition
         * @summary Update item definition
         * @param {string} id Item Definition ID
         * @param {HttpUpdateItemDefinitionRequest} request Definition update payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        definitionsIdPut: async (id: string, request: HttpUpdateItemDefinitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('definitionsIdPut', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('definitionsIdPut', 'request', request)
            const localVarPath = `/definitions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate metadata against a definition\'s template additional properties
         * @summary Validate metadata against a definition
         * @param {string} id Item Definition ID
         * @param {object} request Definition update payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        definitionsIdValidatePost: async (id: string, request: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('definitionsIdValidatePost', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('definitionsIdValidatePost', 'request', request)
            const localVarPath = `/definitions/{id}/validate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create item definition
         * @summary Create item definition
         * @param {HttpCreateItemDefinitionRequest} request Definition creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        definitionsPost: async (request: HttpCreateItemDefinitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('definitionsPost', 'request', request)
            const localVarPath = `/definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a game with a given ID and name
         * @summary Create a game
         * @param {HttpCreateGameRequest} request The game ID and name you want to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesPost: async (request: HttpCreateGameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('gamesPost', 'request', request)
            const localVarPath = `/games`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all templates for a given Game ID
         * @summary List item templates
         * @param {string} gameId The Game ID you want templates for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesGet: async (gameId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('templatesGet', 'gameId', gameId)
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameId !== undefined) {
                localVarQueryParameter['game_id'] = gameId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get item template given an ID
         * @summary Get item template
         * @param {string} id Item Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('templatesIdGet', 'id', id)
            const localVarPath = `/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an item template
         * @summary Update item template
         * @param {HttpUpdateItemTemplateRequest} request Template creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesIdPut: async (request: HttpUpdateItemTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('templatesIdPut', 'request', request)
            const localVarPath = `/templates/:id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create item template
         * @summary Create item template
         * @param {HttpCreateItemTemplateRequest} request Template creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesPost: async (request: HttpCreateItemTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('templatesPost', 'request', request)
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all types for a given Game ID
         * @summary List item types
         * @param {string} gameId The Game ID you want types for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typesGet: async (gameId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('typesGet', 'gameId', gameId)
            const localVarPath = `/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameId !== undefined) {
                localVarQueryParameter['game_id'] = gameId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a type for a game with a given ID and name
         * @summary Create a type for a game
         * @param {HttpCreateTypeRequest} request The type ID, game ID and name of the type you want to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typesPost: async (request: HttpCreateTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('typesPost', 'request', request)
            const localVarPath = `/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RootApi - functional programming interface
 * @export
 */
export const RootApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RootApiAxiosParamCreator(configuration)
    return {
        /**
         * List all definitions for a given Game ID
         * @summary List item definitions
         * @param {string} gameId The Game ID you want definitions for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async definitionsGet(gameId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemDefinition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.definitionsGet(gameId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get item definition given an ID
         * @summary Get item definition
         * @param {string} id Item Definition ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async definitionsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.definitionsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update item definition
         * @summary Update item definition
         * @param {string} id Item Definition ID
         * @param {HttpUpdateItemDefinitionRequest} request Definition update payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async definitionsIdPut(id: string, request: HttpUpdateItemDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.definitionsIdPut(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Validate metadata against a definition\'s template additional properties
         * @summary Validate metadata against a definition
         * @param {string} id Item Definition ID
         * @param {object} request Definition update payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async definitionsIdValidatePost(id: string, request: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HttpGenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.definitionsIdValidatePost(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create item definition
         * @summary Create item definition
         * @param {HttpCreateItemDefinitionRequest} request Definition creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async definitionsPost(request: HttpCreateItemDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.definitionsPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a game with a given ID and name
         * @summary Create a game
         * @param {HttpCreateGameRequest} request The game ID and name you want to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gamesPost(request: HttpCreateGameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemGame>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gamesPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all templates for a given Game ID
         * @summary List item templates
         * @param {string} gameId The Game ID you want templates for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesGet(gameId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemTemplate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesGet(gameId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get item template given an ID
         * @summary Get item template
         * @param {string} id Item Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an item template
         * @summary Update item template
         * @param {HttpUpdateItemTemplateRequest} request Template creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesIdPut(request: HttpUpdateItemTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesIdPut(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create item template
         * @summary Create item template
         * @param {HttpCreateItemTemplateRequest} request Template creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesPost(request: HttpCreateItemTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all types for a given Game ID
         * @summary List item types
         * @param {string} gameId The Game ID you want types for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async typesGet(gameId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.typesGet(gameId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a type for a game with a given ID and name
         * @summary Create a type for a game
         * @param {HttpCreateTypeRequest} request The type ID, game ID and name of the type you want to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async typesPost(request: HttpCreateTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.typesPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RootApi - factory interface
 * @export
 */
export const RootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RootApiFp(configuration)
    return {
        /**
         * List all definitions for a given Game ID
         * @summary List item definitions
         * @param {string} gameId The Game ID you want definitions for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        definitionsGet(gameId: string, options?: any): AxiosPromise<Array<ItemDefinition>> {
            return localVarFp.definitionsGet(gameId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get item definition given an ID
         * @summary Get item definition
         * @param {string} id Item Definition ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        definitionsIdGet(id: string, options?: any): AxiosPromise<ItemDefinition> {
            return localVarFp.definitionsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update item definition
         * @summary Update item definition
         * @param {string} id Item Definition ID
         * @param {HttpUpdateItemDefinitionRequest} request Definition update payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        definitionsIdPut(id: string, request: HttpUpdateItemDefinitionRequest, options?: any): AxiosPromise<ItemDefinition> {
            return localVarFp.definitionsIdPut(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate metadata against a definition\'s template additional properties
         * @summary Validate metadata against a definition
         * @param {string} id Item Definition ID
         * @param {object} request Definition update payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        definitionsIdValidatePost(id: string, request: object, options?: any): AxiosPromise<HttpGenericResponse> {
            return localVarFp.definitionsIdValidatePost(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * Create item definition
         * @summary Create item definition
         * @param {HttpCreateItemDefinitionRequest} request Definition creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        definitionsPost(request: HttpCreateItemDefinitionRequest, options?: any): AxiosPromise<ItemDefinition> {
            return localVarFp.definitionsPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a game with a given ID and name
         * @summary Create a game
         * @param {HttpCreateGameRequest} request The game ID and name you want to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gamesPost(request: HttpCreateGameRequest, options?: any): AxiosPromise<ItemGame> {
            return localVarFp.gamesPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * List all templates for a given Game ID
         * @summary List item templates
         * @param {string} gameId The Game ID you want templates for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesGet(gameId: string, options?: any): AxiosPromise<Array<ItemTemplate>> {
            return localVarFp.templatesGet(gameId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get item template given an ID
         * @summary Get item template
         * @param {string} id Item Template ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesIdGet(id: string, options?: any): AxiosPromise<ItemTemplate> {
            return localVarFp.templatesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an item template
         * @summary Update item template
         * @param {HttpUpdateItemTemplateRequest} request Template creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesIdPut(request: HttpUpdateItemTemplateRequest, options?: any): AxiosPromise<ItemTemplate> {
            return localVarFp.templatesIdPut(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Create item template
         * @summary Create item template
         * @param {HttpCreateItemTemplateRequest} request Template creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesPost(request: HttpCreateItemTemplateRequest, options?: any): AxiosPromise<ItemTemplate> {
            return localVarFp.templatesPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * List all types for a given Game ID
         * @summary List item types
         * @param {string} gameId The Game ID you want types for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typesGet(gameId: string, options?: any): AxiosPromise<Array<ItemType>> {
            return localVarFp.typesGet(gameId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a type for a game with a given ID and name
         * @summary Create a type for a game
         * @param {HttpCreateTypeRequest} request The type ID, game ID and name of the type you want to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typesPost(request: HttpCreateTypeRequest, options?: any): AxiosPromise<ItemType> {
            return localVarFp.typesPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for definitionsGet operation in RootApi.
 * @export
 * @interface RootApiDefinitionsGetRequest
 */
export interface RootApiDefinitionsGetRequest {
    /**
     * The Game ID you want definitions for
     * @type {string}
     * @memberof RootApiDefinitionsGet
     */
    readonly gameId: string
}

/**
 * Request parameters for definitionsIdGet operation in RootApi.
 * @export
 * @interface RootApiDefinitionsIdGetRequest
 */
export interface RootApiDefinitionsIdGetRequest {
    /**
     * Item Definition ID
     * @type {string}
     * @memberof RootApiDefinitionsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for definitionsIdPut operation in RootApi.
 * @export
 * @interface RootApiDefinitionsIdPutRequest
 */
export interface RootApiDefinitionsIdPutRequest {
    /**
     * Item Definition ID
     * @type {string}
     * @memberof RootApiDefinitionsIdPut
     */
    readonly id: string

    /**
     * Definition update payload
     * @type {HttpUpdateItemDefinitionRequest}
     * @memberof RootApiDefinitionsIdPut
     */
    readonly request: HttpUpdateItemDefinitionRequest
}

/**
 * Request parameters for definitionsIdValidatePost operation in RootApi.
 * @export
 * @interface RootApiDefinitionsIdValidatePostRequest
 */
export interface RootApiDefinitionsIdValidatePostRequest {
    /**
     * Item Definition ID
     * @type {string}
     * @memberof RootApiDefinitionsIdValidatePost
     */
    readonly id: string

    /**
     * Definition update payload
     * @type {object}
     * @memberof RootApiDefinitionsIdValidatePost
     */
    readonly request: object
}

/**
 * Request parameters for definitionsPost operation in RootApi.
 * @export
 * @interface RootApiDefinitionsPostRequest
 */
export interface RootApiDefinitionsPostRequest {
    /**
     * Definition creation payload
     * @type {HttpCreateItemDefinitionRequest}
     * @memberof RootApiDefinitionsPost
     */
    readonly request: HttpCreateItemDefinitionRequest
}

/**
 * Request parameters for gamesPost operation in RootApi.
 * @export
 * @interface RootApiGamesPostRequest
 */
export interface RootApiGamesPostRequest {
    /**
     * The game ID and name you want to create
     * @type {HttpCreateGameRequest}
     * @memberof RootApiGamesPost
     */
    readonly request: HttpCreateGameRequest
}

/**
 * Request parameters for templatesGet operation in RootApi.
 * @export
 * @interface RootApiTemplatesGetRequest
 */
export interface RootApiTemplatesGetRequest {
    /**
     * The Game ID you want templates for
     * @type {string}
     * @memberof RootApiTemplatesGet
     */
    readonly gameId: string
}

/**
 * Request parameters for templatesIdGet operation in RootApi.
 * @export
 * @interface RootApiTemplatesIdGetRequest
 */
export interface RootApiTemplatesIdGetRequest {
    /**
     * Item Template ID
     * @type {string}
     * @memberof RootApiTemplatesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for templatesIdPut operation in RootApi.
 * @export
 * @interface RootApiTemplatesIdPutRequest
 */
export interface RootApiTemplatesIdPutRequest {
    /**
     * Template creation payload
     * @type {HttpUpdateItemTemplateRequest}
     * @memberof RootApiTemplatesIdPut
     */
    readonly request: HttpUpdateItemTemplateRequest
}

/**
 * Request parameters for templatesPost operation in RootApi.
 * @export
 * @interface RootApiTemplatesPostRequest
 */
export interface RootApiTemplatesPostRequest {
    /**
     * Template creation payload
     * @type {HttpCreateItemTemplateRequest}
     * @memberof RootApiTemplatesPost
     */
    readonly request: HttpCreateItemTemplateRequest
}

/**
 * Request parameters for typesGet operation in RootApi.
 * @export
 * @interface RootApiTypesGetRequest
 */
export interface RootApiTypesGetRequest {
    /**
     * The Game ID you want types for
     * @type {string}
     * @memberof RootApiTypesGet
     */
    readonly gameId: string
}

/**
 * Request parameters for typesPost operation in RootApi.
 * @export
 * @interface RootApiTypesPostRequest
 */
export interface RootApiTypesPostRequest {
    /**
     * The type ID, game ID and name of the type you want to create
     * @type {HttpCreateTypeRequest}
     * @memberof RootApiTypesPost
     */
    readonly request: HttpCreateTypeRequest
}

/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export class RootApi extends BaseAPI {
    /**
     * List all definitions for a given Game ID
     * @summary List item definitions
     * @param {RootApiDefinitionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public definitionsGet(requestParameters: RootApiDefinitionsGetRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).definitionsGet(requestParameters.gameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get item definition given an ID
     * @summary Get item definition
     * @param {RootApiDefinitionsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public definitionsIdGet(requestParameters: RootApiDefinitionsIdGetRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).definitionsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update item definition
     * @summary Update item definition
     * @param {RootApiDefinitionsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public definitionsIdPut(requestParameters: RootApiDefinitionsIdPutRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).definitionsIdPut(requestParameters.id, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validate metadata against a definition\'s template additional properties
     * @summary Validate metadata against a definition
     * @param {RootApiDefinitionsIdValidatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public definitionsIdValidatePost(requestParameters: RootApiDefinitionsIdValidatePostRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).definitionsIdValidatePost(requestParameters.id, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create item definition
     * @summary Create item definition
     * @param {RootApiDefinitionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public definitionsPost(requestParameters: RootApiDefinitionsPostRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).definitionsPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a game with a given ID and name
     * @summary Create a game
     * @param {RootApiGamesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public gamesPost(requestParameters: RootApiGamesPostRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).gamesPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all templates for a given Game ID
     * @summary List item templates
     * @param {RootApiTemplatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public templatesGet(requestParameters: RootApiTemplatesGetRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).templatesGet(requestParameters.gameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get item template given an ID
     * @summary Get item template
     * @param {RootApiTemplatesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public templatesIdGet(requestParameters: RootApiTemplatesIdGetRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).templatesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an item template
     * @summary Update item template
     * @param {RootApiTemplatesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public templatesIdPut(requestParameters: RootApiTemplatesIdPutRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).templatesIdPut(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create item template
     * @summary Create item template
     * @param {RootApiTemplatesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public templatesPost(requestParameters: RootApiTemplatesPostRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).templatesPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all types for a given Game ID
     * @summary List item types
     * @param {RootApiTypesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public typesGet(requestParameters: RootApiTypesGetRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).typesGet(requestParameters.gameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a type for a game with a given ID and name
     * @summary Create a type for a game
     * @param {RootApiTypesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public typesPost(requestParameters: RootApiTypesPostRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).typesPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}
