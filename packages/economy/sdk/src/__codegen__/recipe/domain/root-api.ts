/* tslint:disable */
/* eslint-disable */
/**
 * Recipe API
 * Recipe API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DomainRecipe } from '../models';
// @ts-ignore
import { HttpCreateRecipeRequest } from '../models';
// @ts-ignore
import { HttpUpdateRecipeRequest } from '../models';
/**
 * RootApi - axios parameter creator
 * @export
 */
export const RootApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates multiple recipes
         * @summary Create recipes
         * @param {Array<HttpCreateRecipeRequest>} request List of recipes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesBulkPost: async (request: Array<HttpCreateRecipeRequest>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('recipesBulkPost', 'request', request)
            const localVarPath = `/recipes/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all recipes
         * @summary Get all recipes
         * @param {string} gameId Game ID
         * @param {Array<string>} [filters] Map of conditions and values prefix key with condition. e.g. condition.item_definition_id&#x3D;XYZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesGet: async (gameId: string, filters?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('recipesGet', 'gameId', gameId)
            const localVarPath = `/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (gameId !== undefined) {
                localVarQueryParameter['game_id'] = gameId;
            }

            if (filters) {
                localVarQueryParameter['filters'] = filters;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete recipe by id
         * @summary Delete recipe by id
         * @param {string} id Recipe ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recipesIdDelete', 'id', id)
            const localVarPath = `/recipes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recipe by id
         * @summary Get recipe by id
         * @param {string} id Recipe ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recipesIdGet', 'id', id)
            const localVarPath = `/recipes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update recipe
         * @summary Update recipe
         * @param {string} id Recipe ID
         * @param {HttpUpdateRecipeRequest} request Recipe modification payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesIdPut: async (id: string, request: HttpUpdateRecipeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recipesIdPut', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('recipesIdPut', 'request', request)
            const localVarPath = `/recipes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create recipe
         * @summary Create recipe
         * @param {HttpCreateRecipeRequest} request Recipe creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesPost: async (request: HttpCreateRecipeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('recipesPost', 'request', request)
            const localVarPath = `/recipes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RootApi - functional programming interface
 * @export
 */
export const RootApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RootApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates multiple recipes
         * @summary Create recipes
         * @param {Array<HttpCreateRecipeRequest>} request List of recipes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipesBulkPost(request: Array<HttpCreateRecipeRequest>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainRecipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipesBulkPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all recipes
         * @summary Get all recipes
         * @param {string} gameId Game ID
         * @param {Array<string>} [filters] Map of conditions and values prefix key with condition. e.g. condition.item_definition_id&#x3D;XYZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipesGet(gameId: string, filters?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DomainRecipe>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipesGet(gameId, filters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete recipe by id
         * @summary Delete recipe by id
         * @param {string} id Recipe ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get recipe by id
         * @summary Get recipe by id
         * @param {string} id Recipe ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainRecipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update recipe
         * @summary Update recipe
         * @param {string} id Recipe ID
         * @param {HttpUpdateRecipeRequest} request Recipe modification payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipesIdPut(id: string, request: HttpUpdateRecipeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainRecipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipesIdPut(id, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create recipe
         * @summary Create recipe
         * @param {HttpCreateRecipeRequest} request Recipe creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipesPost(request: HttpCreateRecipeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainRecipe>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipesPost(request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RootApi - factory interface
 * @export
 */
export const RootApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RootApiFp(configuration)
    return {
        /**
         * Creates multiple recipes
         * @summary Create recipes
         * @param {Array<HttpCreateRecipeRequest>} request List of recipes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesBulkPost(request: Array<HttpCreateRecipeRequest>, options?: any): AxiosPromise<Array<DomainRecipe>> {
            return localVarFp.recipesBulkPost(request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all recipes
         * @summary Get all recipes
         * @param {string} gameId Game ID
         * @param {Array<string>} [filters] Map of conditions and values prefix key with condition. e.g. condition.item_definition_id&#x3D;XYZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesGet(gameId: string, filters?: Array<string>, options?: any): AxiosPromise<Array<DomainRecipe>> {
            return localVarFp.recipesGet(gameId, filters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete recipe by id
         * @summary Delete recipe by id
         * @param {string} id Recipe ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.recipesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get recipe by id
         * @summary Get recipe by id
         * @param {string} id Recipe ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesIdGet(id: string, options?: any): AxiosPromise<DomainRecipe> {
            return localVarFp.recipesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update recipe
         * @summary Update recipe
         * @param {string} id Recipe ID
         * @param {HttpUpdateRecipeRequest} request Recipe modification payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesIdPut(id: string, request: HttpUpdateRecipeRequest, options?: any): AxiosPromise<DomainRecipe> {
            return localVarFp.recipesIdPut(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * Create recipe
         * @summary Create recipe
         * @param {HttpCreateRecipeRequest} request Recipe creation payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipesPost(request: HttpCreateRecipeRequest, options?: any): AxiosPromise<DomainRecipe> {
            return localVarFp.recipesPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for recipesBulkPost operation in RootApi.
 * @export
 * @interface RootApiRecipesBulkPostRequest
 */
export interface RootApiRecipesBulkPostRequest {
    /**
     * List of recipes to create
     * @type {Array<HttpCreateRecipeRequest>}
     * @memberof RootApiRecipesBulkPost
     */
    readonly request: Array<HttpCreateRecipeRequest>
}

/**
 * Request parameters for recipesGet operation in RootApi.
 * @export
 * @interface RootApiRecipesGetRequest
 */
export interface RootApiRecipesGetRequest {
    /**
     * Game ID
     * @type {string}
     * @memberof RootApiRecipesGet
     */
    readonly gameId: string

    /**
     * Map of conditions and values prefix key with condition. e.g. condition.item_definition_id&#x3D;XYZ
     * @type {Array<string>}
     * @memberof RootApiRecipesGet
     */
    readonly filters?: Array<string>
}

/**
 * Request parameters for recipesIdDelete operation in RootApi.
 * @export
 * @interface RootApiRecipesIdDeleteRequest
 */
export interface RootApiRecipesIdDeleteRequest {
    /**
     * Recipe ID
     * @type {string}
     * @memberof RootApiRecipesIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for recipesIdGet operation in RootApi.
 * @export
 * @interface RootApiRecipesIdGetRequest
 */
export interface RootApiRecipesIdGetRequest {
    /**
     * Recipe ID
     * @type {string}
     * @memberof RootApiRecipesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for recipesIdPut operation in RootApi.
 * @export
 * @interface RootApiRecipesIdPutRequest
 */
export interface RootApiRecipesIdPutRequest {
    /**
     * Recipe ID
     * @type {string}
     * @memberof RootApiRecipesIdPut
     */
    readonly id: string

    /**
     * Recipe modification payload
     * @type {HttpUpdateRecipeRequest}
     * @memberof RootApiRecipesIdPut
     */
    readonly request: HttpUpdateRecipeRequest
}

/**
 * Request parameters for recipesPost operation in RootApi.
 * @export
 * @interface RootApiRecipesPostRequest
 */
export interface RootApiRecipesPostRequest {
    /**
     * Recipe creation payload
     * @type {HttpCreateRecipeRequest}
     * @memberof RootApiRecipesPost
     */
    readonly request: HttpCreateRecipeRequest
}

/**
 * RootApi - object-oriented interface
 * @export
 * @class RootApi
 * @extends {BaseAPI}
 */
export class RootApi extends BaseAPI {
    /**
     * Creates multiple recipes
     * @summary Create recipes
     * @param {RootApiRecipesBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public recipesBulkPost(requestParameters: RootApiRecipesBulkPostRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).recipesBulkPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all recipes
     * @summary Get all recipes
     * @param {RootApiRecipesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public recipesGet(requestParameters: RootApiRecipesGetRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).recipesGet(requestParameters.gameId, requestParameters.filters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete recipe by id
     * @summary Delete recipe by id
     * @param {RootApiRecipesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public recipesIdDelete(requestParameters: RootApiRecipesIdDeleteRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).recipesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get recipe by id
     * @summary Get recipe by id
     * @param {RootApiRecipesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public recipesIdGet(requestParameters: RootApiRecipesIdGetRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).recipesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update recipe
     * @summary Update recipe
     * @param {RootApiRecipesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public recipesIdPut(requestParameters: RootApiRecipesIdPutRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).recipesIdPut(requestParameters.id, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create recipe
     * @summary Create recipe
     * @param {RootApiRecipesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RootApi
     */
    public recipesPost(requestParameters: RootApiRecipesPostRequest, options?: AxiosRequestConfig) {
        return RootApiFp(this.configuration).recipesPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}
