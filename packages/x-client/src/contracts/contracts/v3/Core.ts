/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "announceAvailabilityVerifierRemovalIntent"
      | "announceVerifierRemovalIntent"
      | "deposit(uint256,uint256,uint256)"
      | "deposit(uint256,uint256,uint256,uint256)"
      | "depositCancel"
      | "depositERC20"
      | "depositEth"
      | "depositNft"
      | "depositNftReclaim"
      | "depositReclaim"
      | "escape"
      | "freezeRequest"
      | "fullWithdrawalRequest"
      | "getAssetInfo"
      | "getCancellationRequest"
      | "getDepositBalance"
      | "getEthKey"
      | "getFullWithdrawalRequest"
      | "getLastBatchId"
      | "getOrderRoot"
      | "getOrderTreeHeight"
      | "getQuantizedDepositBalance"
      | "getQuantum"
      | "getRegisteredAvailabilityVerifiers"
      | "getRegisteredVerifiers"
      | "getSequenceNumber"
      | "getVaultRoot"
      | "getVaultTreeHeight"
      | "getWithdrawalBalance"
      | "isAvailabilityVerifier"
      | "isFrozen"
      | "isOperator"
      | "isTokenAdmin"
      | "isUserAdmin"
      | "isVerifier"
      | "mainAcceptGovernance"
      | "mainCancelNomination"
      | "mainIsGovernor"
      | "mainNominateNewGovernor"
      | "mainRemoveGovernor"
      | "onERC721Received"
      | "registerAndDepositERC20"
      | "registerAndDepositEth"
      | "registerAvailabilityVerifier"
      | "registerOperator"
      | "registerToken"
      | "registerTokenAdmin"
      | "registerUser"
      | "registerUserAdmin"
      | "registerVerifier"
      | "removeAvailabilityVerifier"
      | "removeVerifier"
      | "unFreeze"
      | "unregisterOperator"
      | "unregisterTokenAdmin"
      | "unregisterUserAdmin"
      | "updateState"
      | "withdraw"
      | "withdrawAndMint"
      | "withdrawNft"
      | "withdrawNftTo"
      | "withdrawTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LogDeposit"
      | "LogDepositCancel"
      | "LogDepositCancelReclaimed"
      | "LogDepositNftCancelReclaimed"
      | "LogFullWithdrawalRequest"
      | "LogMintWithdrawalPerformed"
      | "LogMintableWithdrawalAllowed"
      | "LogNftDeposit"
      | "LogNftWithdrawalAllowed"
      | "LogNftWithdrawalPerformed"
      | "LogRootUpdate"
      | "LogStateTransitionFact"
      | "LogVaultBalanceChangeApplied"
      | "LogWithdrawalAllowed"
      | "LogWithdrawalPerformed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "announceAvailabilityVerifierRemovalIntent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "announceVerifierRemovalIntent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCancel",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNft",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNftReclaim",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReclaim",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escape",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fullWithdrawalRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancellationRequest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositBalance",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullWithdrawalRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantizedDepositBalance",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredAvailabilityVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSequenceNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailabilityVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mainAcceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainCancelNomination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainIsGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mainNominateNewGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mainRemoveGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositERC20",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositEth",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAvailabilityVerifier",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokenAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUserAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVerifier",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAvailabilityVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unFreeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterTokenAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterUserAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMint",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNft",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNftTo",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "announceAvailabilityVerifierRemovalIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceVerifierRemovalIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositNftReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escape", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancellationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEthKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFullWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuantizedDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuantum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredAvailabilityVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainAcceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainCancelNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainIsGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainNominateNewGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainRemoveGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unFreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterUserAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNftTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
}

export namespace LogDepositEvent {
  export type InputTuple = [
    depositorEthKey: AddressLike,
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetType: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish
  ];
  export type OutputTuple = [
    depositorEthKey: string,
    starkKey: bigint,
    vaultId: bigint,
    assetType: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint
  ];
  export interface OutputObject {
    depositorEthKey: string;
    starkKey: bigint;
    vaultId: bigint;
    assetType: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDepositCancelEvent {
  export type InputTuple = [
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetId: BigNumberish
  ];
  export type OutputTuple = [
    starkKey: bigint,
    vaultId: bigint,
    assetId: bigint
  ];
  export interface OutputObject {
    starkKey: bigint;
    vaultId: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDepositCancelReclaimedEvent {
  export type InputTuple = [
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetType: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish
  ];
  export type OutputTuple = [
    starkKey: bigint,
    vaultId: bigint,
    assetType: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint
  ];
  export interface OutputObject {
    starkKey: bigint;
    vaultId: bigint;
    assetType: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDepositNftCancelReclaimedEvent {
  export type InputTuple = [
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetType: BigNumberish,
    tokenId: BigNumberish,
    assetId: BigNumberish
  ];
  export type OutputTuple = [
    starkKey: bigint,
    vaultId: bigint,
    assetType: bigint,
    tokenId: bigint,
    assetId: bigint
  ];
  export interface OutputObject {
    starkKey: bigint;
    vaultId: bigint;
    assetType: bigint;
    tokenId: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFullWithdrawalRequestEvent {
  export type InputTuple = [starkKey: BigNumberish, vaultId: BigNumberish];
  export type OutputTuple = [starkKey: bigint, vaultId: bigint];
  export interface OutputObject {
    starkKey: bigint;
    vaultId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogMintWithdrawalPerformedEvent {
  export type InputTuple = [
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish,
    assetId: BigNumberish
  ];
  export type OutputTuple = [
    ownerKey: bigint,
    assetType: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint,
    assetId: bigint
  ];
  export interface OutputObject {
    ownerKey: bigint;
    assetType: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogMintableWithdrawalAllowedEvent {
  export type InputTuple = [
    ownerKey: BigNumberish,
    assetId: BigNumberish,
    quantizedAmount: BigNumberish
  ];
  export type OutputTuple = [
    ownerKey: bigint,
    assetId: bigint,
    quantizedAmount: bigint
  ];
  export interface OutputObject {
    ownerKey: bigint;
    assetId: bigint;
    quantizedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogNftDepositEvent {
  export type InputTuple = [
    depositorEthKey: AddressLike,
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetType: BigNumberish,
    tokenId: BigNumberish,
    assetId: BigNumberish
  ];
  export type OutputTuple = [
    depositorEthKey: string,
    starkKey: bigint,
    vaultId: bigint,
    assetType: bigint,
    tokenId: bigint,
    assetId: bigint
  ];
  export interface OutputObject {
    depositorEthKey: string;
    starkKey: bigint;
    vaultId: bigint;
    assetType: bigint;
    tokenId: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogNftWithdrawalAllowedEvent {
  export type InputTuple = [ownerKey: BigNumberish, assetId: BigNumberish];
  export type OutputTuple = [ownerKey: bigint, assetId: bigint];
  export interface OutputObject {
    ownerKey: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogNftWithdrawalPerformedEvent {
  export type InputTuple = [
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    tokenId: BigNumberish,
    assetId: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    ownerKey: bigint,
    assetType: bigint,
    tokenId: bigint,
    assetId: bigint,
    recipient: string
  ];
  export interface OutputObject {
    ownerKey: bigint;
    assetType: bigint;
    tokenId: bigint;
    assetId: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRootUpdateEvent {
  export type InputTuple = [
    sequenceNumber: BigNumberish,
    batchId: BigNumberish,
    vaultRoot: BigNumberish,
    orderRoot: BigNumberish
  ];
  export type OutputTuple = [
    sequenceNumber: bigint,
    batchId: bigint,
    vaultRoot: bigint,
    orderRoot: bigint
  ];
  export interface OutputObject {
    sequenceNumber: bigint;
    batchId: bigint;
    vaultRoot: bigint;
    orderRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogStateTransitionFactEvent {
  export type InputTuple = [stateTransitionFact: BytesLike];
  export type OutputTuple = [stateTransitionFact: string];
  export interface OutputObject {
    stateTransitionFact: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogVaultBalanceChangeAppliedEvent {
  export type InputTuple = [
    ethKey: AddressLike,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    quantizedAmountChange: BigNumberish
  ];
  export type OutputTuple = [
    ethKey: string,
    assetId: bigint,
    vaultId: bigint,
    quantizedAmountChange: bigint
  ];
  export interface OutputObject {
    ethKey: string;
    assetId: bigint;
    vaultId: bigint;
    quantizedAmountChange: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawalAllowedEvent {
  export type InputTuple = [
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish
  ];
  export type OutputTuple = [
    ownerKey: bigint,
    assetType: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint
  ];
  export interface OutputObject {
    ownerKey: bigint;
    assetType: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawalPerformedEvent {
  export type InputTuple = [
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    ownerKey: bigint,
    assetType: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint,
    recipient: string
  ];
  export interface OutputObject {
    ownerKey: bigint;
    assetType: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Core extends BaseContract {
  connect(runner?: ContractRunner | null): Core;
  waitForDeployment(): Promise<this>;

  interface: CoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  announceAvailabilityVerifierRemovalIntent: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  announceVerifierRemovalIntent: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  "deposit(uint256,uint256,uint256)": TypedContractMethod<
    [starkKey: BigNumberish, assetType: BigNumberish, vaultId: BigNumberish],
    [void],
    "payable"
  >;

  "deposit(uint256,uint256,uint256,uint256)": TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositCancel: TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositERC20: TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositEth: TypedContractMethod<
    [starkKey: BigNumberish, assetType: BigNumberish, vaultId: BigNumberish],
    [void],
    "payable"
  >;

  depositNft: TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositNftReclaim: TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositReclaim: TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;

  escape: TypedContractMethod<
    [
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  freezeRequest: TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fullWithdrawalRequest: TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAssetInfo: TypedContractMethod<
    [assetType: BigNumberish],
    [string],
    "view"
  >;

  getCancellationRequest: TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getDepositBalance: TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getEthKey: TypedContractMethod<[starkKey: BigNumberish], [string], "view">;

  getFullWithdrawalRequest: TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getLastBatchId: TypedContractMethod<[], [bigint], "view">;

  getOrderRoot: TypedContractMethod<[], [bigint], "view">;

  getOrderTreeHeight: TypedContractMethod<[], [bigint], "view">;

  getQuantizedDepositBalance: TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getQuantum: TypedContractMethod<
    [presumedAssetType: BigNumberish],
    [bigint],
    "view"
  >;

  getRegisteredAvailabilityVerifiers: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  getRegisteredVerifiers: TypedContractMethod<[], [void], "nonpayable">;

  getSequenceNumber: TypedContractMethod<[], [bigint], "view">;

  getVaultRoot: TypedContractMethod<[], [bigint], "view">;

  getVaultTreeHeight: TypedContractMethod<[], [bigint], "view">;

  getWithdrawalBalance: TypedContractMethod<
    [ownerKey: BigNumberish, assetId: BigNumberish],
    [bigint],
    "view"
  >;

  isAvailabilityVerifier: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  isFrozen: TypedContractMethod<[], [void], "nonpayable">;

  isOperator: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  isTokenAdmin: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  isUserAdmin: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  isVerifier: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  mainAcceptGovernance: TypedContractMethod<[], [void], "nonpayable">;

  mainCancelNomination: TypedContractMethod<[], [void], "nonpayable">;

  mainIsGovernor: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  mainNominateNewGovernor: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  mainRemoveGovernor: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [void],
    "nonpayable"
  >;

  registerAndDepositERC20: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerAndDepositEth: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish
    ],
    [void],
    "payable"
  >;

  registerAvailabilityVerifier: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [void],
    "nonpayable"
  >;

  registerOperator: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  registerToken: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [void],
    "nonpayable"
  >;

  registerTokenAdmin: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  registerUser: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;

  registerUserAdmin: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  registerVerifier: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [void],
    "nonpayable"
  >;

  removeAvailabilityVerifier: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  removeVerifier: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  unFreeze: TypedContractMethod<[], [void], "nonpayable">;

  unregisterOperator: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  unregisterTokenAdmin: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  unregisterUserAdmin: TypedContractMethod<
    [arg0: AddressLike],
    [void],
    "nonpayable"
  >;

  updateState: TypedContractMethod<
    [publicInput: BigNumberish[], applicationData: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawAndMint: TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish, mintingBlob: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawNft: TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawNftTo: TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawTo: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "announceAvailabilityVerifierRemovalIntent"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "announceVerifierRemovalIntent"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetType: BigNumberish, vaultId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deposit(uint256,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositCancel"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC20"
  ): TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositEth"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetType: BigNumberish, vaultId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositNft"
  ): TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositNftReclaim"
  ): TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositReclaim"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "escape"
  ): TypedContractMethod<
    [
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freezeRequest"
  ): TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fullWithdrawalRequest"
  ): TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAssetInfo"
  ): TypedContractMethod<[assetType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCancellationRequest"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositBalance"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEthKey"
  ): TypedContractMethod<[starkKey: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFullWithdrawalRequest"
  ): TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastBatchId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrderRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrderTreeHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuantizedDepositBalance"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuantum"
  ): TypedContractMethod<[presumedAssetType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRegisteredAvailabilityVerifiers"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRegisteredVerifiers"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getSequenceNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultTreeHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWithdrawalBalance"
  ): TypedContractMethod<
    [ownerKey: BigNumberish, assetId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAvailabilityVerifier"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isFrozen"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isOperator"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isTokenAdmin"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isUserAdmin"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isVerifier"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mainAcceptGovernance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mainCancelNomination"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mainIsGovernor"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mainNominateNewGovernor"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mainRemoveGovernor"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAndDepositERC20"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAndDepositEth"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerAvailabilityVerifier"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerOperator"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerToken"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerTokenAdmin"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish, arg2: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerUserAdmin"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerVerifier"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAvailabilityVerifier"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVerifier"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unFreeze"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterOperator"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterTokenAdmin"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterUserAdmin"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateState"
  ): TypedContractMethod<
    [publicInput: BigNumberish[], applicationData: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAndMint"
  ): TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish, mintingBlob: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawNft"
  ): TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawNftTo"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "LogDeposit"
  ): TypedContractEvent<
    LogDepositEvent.InputTuple,
    LogDepositEvent.OutputTuple,
    LogDepositEvent.OutputObject
  >;
  getEvent(
    key: "LogDepositCancel"
  ): TypedContractEvent<
    LogDepositCancelEvent.InputTuple,
    LogDepositCancelEvent.OutputTuple,
    LogDepositCancelEvent.OutputObject
  >;
  getEvent(
    key: "LogDepositCancelReclaimed"
  ): TypedContractEvent<
    LogDepositCancelReclaimedEvent.InputTuple,
    LogDepositCancelReclaimedEvent.OutputTuple,
    LogDepositCancelReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "LogDepositNftCancelReclaimed"
  ): TypedContractEvent<
    LogDepositNftCancelReclaimedEvent.InputTuple,
    LogDepositNftCancelReclaimedEvent.OutputTuple,
    LogDepositNftCancelReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "LogFullWithdrawalRequest"
  ): TypedContractEvent<
    LogFullWithdrawalRequestEvent.InputTuple,
    LogFullWithdrawalRequestEvent.OutputTuple,
    LogFullWithdrawalRequestEvent.OutputObject
  >;
  getEvent(
    key: "LogMintWithdrawalPerformed"
  ): TypedContractEvent<
    LogMintWithdrawalPerformedEvent.InputTuple,
    LogMintWithdrawalPerformedEvent.OutputTuple,
    LogMintWithdrawalPerformedEvent.OutputObject
  >;
  getEvent(
    key: "LogMintableWithdrawalAllowed"
  ): TypedContractEvent<
    LogMintableWithdrawalAllowedEvent.InputTuple,
    LogMintableWithdrawalAllowedEvent.OutputTuple,
    LogMintableWithdrawalAllowedEvent.OutputObject
  >;
  getEvent(
    key: "LogNftDeposit"
  ): TypedContractEvent<
    LogNftDepositEvent.InputTuple,
    LogNftDepositEvent.OutputTuple,
    LogNftDepositEvent.OutputObject
  >;
  getEvent(
    key: "LogNftWithdrawalAllowed"
  ): TypedContractEvent<
    LogNftWithdrawalAllowedEvent.InputTuple,
    LogNftWithdrawalAllowedEvent.OutputTuple,
    LogNftWithdrawalAllowedEvent.OutputObject
  >;
  getEvent(
    key: "LogNftWithdrawalPerformed"
  ): TypedContractEvent<
    LogNftWithdrawalPerformedEvent.InputTuple,
    LogNftWithdrawalPerformedEvent.OutputTuple,
    LogNftWithdrawalPerformedEvent.OutputObject
  >;
  getEvent(
    key: "LogRootUpdate"
  ): TypedContractEvent<
    LogRootUpdateEvent.InputTuple,
    LogRootUpdateEvent.OutputTuple,
    LogRootUpdateEvent.OutputObject
  >;
  getEvent(
    key: "LogStateTransitionFact"
  ): TypedContractEvent<
    LogStateTransitionFactEvent.InputTuple,
    LogStateTransitionFactEvent.OutputTuple,
    LogStateTransitionFactEvent.OutputObject
  >;
  getEvent(
    key: "LogVaultBalanceChangeApplied"
  ): TypedContractEvent<
    LogVaultBalanceChangeAppliedEvent.InputTuple,
    LogVaultBalanceChangeAppliedEvent.OutputTuple,
    LogVaultBalanceChangeAppliedEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawalAllowed"
  ): TypedContractEvent<
    LogWithdrawalAllowedEvent.InputTuple,
    LogWithdrawalAllowedEvent.OutputTuple,
    LogWithdrawalAllowedEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawalPerformed"
  ): TypedContractEvent<
    LogWithdrawalPerformedEvent.InputTuple,
    LogWithdrawalPerformedEvent.OutputTuple,
    LogWithdrawalPerformedEvent.OutputObject
  >;

  filters: {
    "LogDeposit(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogDepositEvent.InputTuple,
      LogDepositEvent.OutputTuple,
      LogDepositEvent.OutputObject
    >;
    LogDeposit: TypedContractEvent<
      LogDepositEvent.InputTuple,
      LogDepositEvent.OutputTuple,
      LogDepositEvent.OutputObject
    >;

    "LogDepositCancel(uint256,uint256,uint256)": TypedContractEvent<
      LogDepositCancelEvent.InputTuple,
      LogDepositCancelEvent.OutputTuple,
      LogDepositCancelEvent.OutputObject
    >;
    LogDepositCancel: TypedContractEvent<
      LogDepositCancelEvent.InputTuple,
      LogDepositCancelEvent.OutputTuple,
      LogDepositCancelEvent.OutputObject
    >;

    "LogDepositCancelReclaimed(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogDepositCancelReclaimedEvent.InputTuple,
      LogDepositCancelReclaimedEvent.OutputTuple,
      LogDepositCancelReclaimedEvent.OutputObject
    >;
    LogDepositCancelReclaimed: TypedContractEvent<
      LogDepositCancelReclaimedEvent.InputTuple,
      LogDepositCancelReclaimedEvent.OutputTuple,
      LogDepositCancelReclaimedEvent.OutputObject
    >;

    "LogDepositNftCancelReclaimed(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogDepositNftCancelReclaimedEvent.InputTuple,
      LogDepositNftCancelReclaimedEvent.OutputTuple,
      LogDepositNftCancelReclaimedEvent.OutputObject
    >;
    LogDepositNftCancelReclaimed: TypedContractEvent<
      LogDepositNftCancelReclaimedEvent.InputTuple,
      LogDepositNftCancelReclaimedEvent.OutputTuple,
      LogDepositNftCancelReclaimedEvent.OutputObject
    >;

    "LogFullWithdrawalRequest(uint256,uint256)": TypedContractEvent<
      LogFullWithdrawalRequestEvent.InputTuple,
      LogFullWithdrawalRequestEvent.OutputTuple,
      LogFullWithdrawalRequestEvent.OutputObject
    >;
    LogFullWithdrawalRequest: TypedContractEvent<
      LogFullWithdrawalRequestEvent.InputTuple,
      LogFullWithdrawalRequestEvent.OutputTuple,
      LogFullWithdrawalRequestEvent.OutputObject
    >;

    "LogMintWithdrawalPerformed(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogMintWithdrawalPerformedEvent.InputTuple,
      LogMintWithdrawalPerformedEvent.OutputTuple,
      LogMintWithdrawalPerformedEvent.OutputObject
    >;
    LogMintWithdrawalPerformed: TypedContractEvent<
      LogMintWithdrawalPerformedEvent.InputTuple,
      LogMintWithdrawalPerformedEvent.OutputTuple,
      LogMintWithdrawalPerformedEvent.OutputObject
    >;

    "LogMintableWithdrawalAllowed(uint256,uint256,uint256)": TypedContractEvent<
      LogMintableWithdrawalAllowedEvent.InputTuple,
      LogMintableWithdrawalAllowedEvent.OutputTuple,
      LogMintableWithdrawalAllowedEvent.OutputObject
    >;
    LogMintableWithdrawalAllowed: TypedContractEvent<
      LogMintableWithdrawalAllowedEvent.InputTuple,
      LogMintableWithdrawalAllowedEvent.OutputTuple,
      LogMintableWithdrawalAllowedEvent.OutputObject
    >;

    "LogNftDeposit(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogNftDepositEvent.InputTuple,
      LogNftDepositEvent.OutputTuple,
      LogNftDepositEvent.OutputObject
    >;
    LogNftDeposit: TypedContractEvent<
      LogNftDepositEvent.InputTuple,
      LogNftDepositEvent.OutputTuple,
      LogNftDepositEvent.OutputObject
    >;

    "LogNftWithdrawalAllowed(uint256,uint256)": TypedContractEvent<
      LogNftWithdrawalAllowedEvent.InputTuple,
      LogNftWithdrawalAllowedEvent.OutputTuple,
      LogNftWithdrawalAllowedEvent.OutputObject
    >;
    LogNftWithdrawalAllowed: TypedContractEvent<
      LogNftWithdrawalAllowedEvent.InputTuple,
      LogNftWithdrawalAllowedEvent.OutputTuple,
      LogNftWithdrawalAllowedEvent.OutputObject
    >;

    "LogNftWithdrawalPerformed(uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      LogNftWithdrawalPerformedEvent.InputTuple,
      LogNftWithdrawalPerformedEvent.OutputTuple,
      LogNftWithdrawalPerformedEvent.OutputObject
    >;
    LogNftWithdrawalPerformed: TypedContractEvent<
      LogNftWithdrawalPerformedEvent.InputTuple,
      LogNftWithdrawalPerformedEvent.OutputTuple,
      LogNftWithdrawalPerformedEvent.OutputObject
    >;

    "LogRootUpdate(uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogRootUpdateEvent.InputTuple,
      LogRootUpdateEvent.OutputTuple,
      LogRootUpdateEvent.OutputObject
    >;
    LogRootUpdate: TypedContractEvent<
      LogRootUpdateEvent.InputTuple,
      LogRootUpdateEvent.OutputTuple,
      LogRootUpdateEvent.OutputObject
    >;

    "LogStateTransitionFact(bytes32)": TypedContractEvent<
      LogStateTransitionFactEvent.InputTuple,
      LogStateTransitionFactEvent.OutputTuple,
      LogStateTransitionFactEvent.OutputObject
    >;
    LogStateTransitionFact: TypedContractEvent<
      LogStateTransitionFactEvent.InputTuple,
      LogStateTransitionFactEvent.OutputTuple,
      LogStateTransitionFactEvent.OutputObject
    >;

    "LogVaultBalanceChangeApplied(address,uint256,uint256,int256)": TypedContractEvent<
      LogVaultBalanceChangeAppliedEvent.InputTuple,
      LogVaultBalanceChangeAppliedEvent.OutputTuple,
      LogVaultBalanceChangeAppliedEvent.OutputObject
    >;
    LogVaultBalanceChangeApplied: TypedContractEvent<
      LogVaultBalanceChangeAppliedEvent.InputTuple,
      LogVaultBalanceChangeAppliedEvent.OutputTuple,
      LogVaultBalanceChangeAppliedEvent.OutputObject
    >;

    "LogWithdrawalAllowed(uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogWithdrawalAllowedEvent.InputTuple,
      LogWithdrawalAllowedEvent.OutputTuple,
      LogWithdrawalAllowedEvent.OutputObject
    >;
    LogWithdrawalAllowed: TypedContractEvent<
      LogWithdrawalAllowedEvent.InputTuple,
      LogWithdrawalAllowedEvent.OutputTuple,
      LogWithdrawalAllowedEvent.OutputObject
    >;

    "LogWithdrawalPerformed(uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      LogWithdrawalPerformedEvent.InputTuple,
      LogWithdrawalPerformedEvent.OutputTuple,
      LogWithdrawalPerformedEvent.OutputObject
    >;
    LogWithdrawalPerformed: TypedContractEvent<
      LogWithdrawalPerformedEvent.InputTuple,
      LogWithdrawalPerformedEvent.OutputTuple,
      LogWithdrawalPerformedEvent.OutputObject
    >;
  };
}
