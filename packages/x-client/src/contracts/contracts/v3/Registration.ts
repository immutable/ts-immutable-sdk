/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RegistrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "imx"
      | "isRegistered"
      | "registerAndDepositNft"
      | "registerAndWithdraw"
      | "registerAndWithdrawNft"
      | "registerAndWithdrawNftTo"
      | "registerAndWithdrawTo"
      | "regsiterAndWithdrawAndMint"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "imx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositNft",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndWithdraw",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndWithdrawNft",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndWithdrawNftTo",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndWithdrawTo",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "regsiterAndWithdrawAndMint",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "imx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndWithdrawNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndWithdrawNftTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndWithdrawTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regsiterAndWithdrawAndMint",
    data: BytesLike
  ): Result;
}

export interface Registration extends BaseContract {
  connect(runner?: ContractRunner | null): Registration;
  waitForDeployment(): Promise<this>;

  interface: RegistrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  imx: TypedContractMethod<[], [string], "view">;

  isRegistered: TypedContractMethod<
    [starkKey: BigNumberish],
    [boolean],
    "view"
  >;

  registerAndDepositNft: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerAndWithdraw: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerAndWithdrawNft: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerAndWithdrawNftTo: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  registerAndWithdrawTo: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  regsiterAndWithdrawAndMint: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      mintingBlob: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "imx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[starkKey: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAndDepositNft"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAndWithdraw"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAndWithdrawNft"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAndWithdrawNftTo"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      tokenId: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAndWithdrawTo"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "regsiterAndWithdrawAndMint"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      mintingBlob: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
