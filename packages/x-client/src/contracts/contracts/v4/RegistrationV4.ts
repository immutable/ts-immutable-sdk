/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RegistrationV4Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "getVersion"
      | "imx"
      | "isRegistered"
      | "registerAndWithdrawAll"
      | "registerAndWithdrawNft"
      | "registerWithdrawAndMint"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "imx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndWithdrawAll",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndWithdrawNft",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWithdrawAndMint",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "imx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndWithdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndWithdrawNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWithdrawAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export interface RegistrationV4 extends BaseContract {
  connect(runner?: ContractRunner | null): RegistrationV4;
  waitForDeployment(): Promise<this>;

  interface: RegistrationV4Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getVersion: TypedContractMethod<[], [string], "view">;

  imx: TypedContractMethod<[], [string], "view">;

  isRegistered: TypedContractMethod<
    [starkKey: BigNumberish],
    [boolean],
    "view"
  >;

  registerAndWithdrawAll: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerAndWithdrawNft: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerWithdrawAndMint: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      mintingBlob: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<
    [ethKey: BigNumberish, starkKey: BigNumberish, assetType: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "imx"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[starkKey: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerAndWithdrawAll"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAndWithdrawNft"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerWithdrawAndMint"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      mintingBlob: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<
    [ethKey: BigNumberish, starkKey: BigNumberish, assetType: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
