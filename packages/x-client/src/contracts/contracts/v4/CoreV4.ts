/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CoreV4Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEPOSIT_CANCEL_DELAY"
      | "FREEZE_GRACE_PERIOD"
      | "MAIN_GOVERNANCE_INFO_TAG"
      | "MAX_FORCED_ACTIONS_REQS_PER_BLOCK"
      | "MAX_VERIFIER_COUNT"
      | "STARKEX_MAX_DEFAULT_VAULT_LOCK"
      | "UNFREEZE_DELAY"
      | "VERIFIER_REMOVAL_DELAY"
      | "VERSION"
      | "announceAvailabilityVerifierRemovalIntent"
      | "announceVerifierRemovalIntent"
      | "defaultVaultWithdrawalLock"
      | "deposit(uint256,uint256,uint256)"
      | "deposit(uint256,uint256,uint256,uint256)"
      | "depositCancel"
      | "depositERC20"
      | "depositERC20ToVault"
      | "depositEth"
      | "depositEthToVault"
      | "depositNft"
      | "depositNftReclaim"
      | "depositReclaim"
      | "escape"
      | "freezeRequest"
      | "fullWithdrawalRequest"
      | "getActionCount"
      | "getActionHashByIndex"
      | "getAssetInfo"
      | "getCancellationRequest"
      | "getDepositBalance"
      | "getEthKey"
      | "getFullWithdrawalRequest"
      | "getLastBatchId"
      | "getOrderRoot"
      | "getOrderTreeHeight"
      | "getQuantizedDepositBalance"
      | "getQuantizedVaultBalance"
      | "getQuantum"
      | "getRegisteredAvailabilityVerifiers"
      | "getRegisteredVerifiers"
      | "getSequenceNumber"
      | "getVaultBalance"
      | "getVaultRoot"
      | "getVaultTreeHeight"
      | "getVaultWithdrawalLock"
      | "getWithdrawalBalance"
      | "initialize"
      | "isAssetRegistered"
      | "isAvailabilityVerifier"
      | "isFrozen"
      | "isOperator"
      | "isStrictVaultBalancePolicy"
      | "isTokenAdmin"
      | "isVaultLocked"
      | "isVerifier"
      | "lockVault"
      | "mainAcceptGovernance"
      | "mainCancelNomination"
      | "mainIsGovernor"
      | "mainNominateNewGovernor"
      | "mainRemoveGovernor"
      | "onERC721Received"
      | "orderRegistryAddress"
      | "registerAndDepositERC20"
      | "registerAndDepositEth"
      | "registerAvailabilityVerifier"
      | "registerEthAddress"
      | "registerOperator"
      | "registerSender"
      | "registerToken(uint256,bytes)"
      | "registerToken(uint256,bytes,uint256)"
      | "registerTokenAdmin"
      | "registerVerifier"
      | "removeAvailabilityVerifier"
      | "removeVerifier"
      | "setDefaultVaultWithdrawalLock"
      | "unFreeze"
      | "unregisterOperator"
      | "unregisterTokenAdmin"
      | "updateImplementationActivationTime"
      | "updateState"
      | "withdraw"
      | "withdrawAndMint"
      | "withdrawFromVault"
      | "withdrawNft"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ImplementationActivationRescheduled"
      | "LogDefaultVaultWithdrawalLockSet"
      | "LogDeposit"
      | "LogDepositCancel"
      | "LogDepositCancelReclaimed"
      | "LogDepositNftCancelReclaimed"
      | "LogDepositToVault"
      | "LogFrozen"
      | "LogFullWithdrawalRequest"
      | "LogMintWithdrawalPerformed"
      | "LogMintableWithdrawalAllowed"
      | "LogNewGovernorAccepted"
      | "LogNftDeposit"
      | "LogNftWithdrawalAllowed"
      | "LogNftWithdrawalPerformed"
      | "LogNominatedGovernor"
      | "LogNominationCancelled"
      | "LogOperatorAdded"
      | "LogOperatorRemoved"
      | "LogRegistered"
      | "LogRemovalIntent"
      | "LogRemoved"
      | "LogRemovedGovernor"
      | "LogRootUpdate"
      | "LogStateTransitionFact"
      | "LogTokenAdminAdded"
      | "LogTokenAdminRemoved"
      | "LogTokenRegistered"
      | "LogUnFrozen"
      | "LogUserRegistered"
      | "LogVaultBalanceChangeApplied"
      | "LogVaultWithdrawalLockSet"
      | "LogWithdrawalAllowed"
      | "LogWithdrawalFromVault"
      | "LogWithdrawalPerformed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEPOSIT_CANCEL_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FREEZE_GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAIN_GOVERNANCE_INFO_TAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FORCED_ACTIONS_REQS_PER_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VERIFIER_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STARKEX_MAX_DEFAULT_VAULT_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNFREEZE_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_REMOVAL_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "announceAvailabilityVerifierRemovalIntent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "announceVerifierRemovalIntent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultVaultWithdrawalLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCancel",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20ToVault",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEthToVault",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNft",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNftReclaim",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReclaim",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escape",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fullWithdrawalRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActionHashByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancellationRequest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositBalance",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullWithdrawalRequest",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastBatchId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantizedDepositBalance",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantizedVaultBalance",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredAvailabilityVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredVerifiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSequenceNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultBalance",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultTreeHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultWithdrawalLock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalBalance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailabilityVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStrictVaultBalancePolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultLocked",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockVault",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mainAcceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainCancelNomination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainIsGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mainNominateNewGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mainRemoveGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orderRegistryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositERC20",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndDepositEth",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAvailabilityVerifier",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEthAddress",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSender",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken(uint256,bytes)",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToken(uint256,bytes,uint256)",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokenAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVerifier",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAvailabilityVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultVaultWithdrawalLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unFreeze", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterTokenAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateImplementationActivationTime",
    values: [AddressLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndMint",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromVault",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNft",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEPOSIT_CANCEL_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FREEZE_GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAIN_GOVERNANCE_INFO_TAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FORCED_ACTIONS_REQS_PER_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VERIFIER_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STARKEX_MAX_DEFAULT_VAULT_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNFREEZE_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_REMOVAL_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "announceAvailabilityVerifierRemovalIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceVerifierRemovalIntent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultVaultWithdrawalLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20ToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositEthToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositNftReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReclaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escape", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActionHashByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancellationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEthKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFullWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastBatchId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuantizedDepositBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuantizedVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuantum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredAvailabilityVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredVerifiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultTreeHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultWithdrawalLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAssetRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStrictVaultBalancePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainAcceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainCancelNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainIsGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainNominateNewGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainRemoveGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndDepositEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEthAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken(uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerToken(uint256,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAvailabilityVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultVaultWithdrawalLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unFreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterTokenAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateImplementationActivationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNft",
    data: BytesLike
  ): Result;
}

export namespace ImplementationActivationRescheduledEvent {
  export type InputTuple = [
    implementation: AddressLike,
    updatedActivationTime: BigNumberish
  ];
  export type OutputTuple = [
    implementation: string,
    updatedActivationTime: bigint
  ];
  export interface OutputObject {
    implementation: string;
    updatedActivationTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDefaultVaultWithdrawalLockSetEvent {
  export type InputTuple = [newDefaultLockTime: BigNumberish];
  export type OutputTuple = [newDefaultLockTime: bigint];
  export interface OutputObject {
    newDefaultLockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDepositEvent {
  export type InputTuple = [
    depositorEthKey: AddressLike,
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetType: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish
  ];
  export type OutputTuple = [
    depositorEthKey: string,
    starkKey: bigint,
    vaultId: bigint,
    assetType: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint
  ];
  export interface OutputObject {
    depositorEthKey: string;
    starkKey: bigint;
    vaultId: bigint;
    assetType: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDepositCancelEvent {
  export type InputTuple = [
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetId: BigNumberish
  ];
  export type OutputTuple = [
    starkKey: bigint,
    vaultId: bigint,
    assetId: bigint
  ];
  export interface OutputObject {
    starkKey: bigint;
    vaultId: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDepositCancelReclaimedEvent {
  export type InputTuple = [
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetType: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish
  ];
  export type OutputTuple = [
    starkKey: bigint,
    vaultId: bigint,
    assetType: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint
  ];
  export interface OutputObject {
    starkKey: bigint;
    vaultId: bigint;
    assetType: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDepositNftCancelReclaimedEvent {
  export type InputTuple = [
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetType: BigNumberish,
    tokenId: BigNumberish,
    assetId: BigNumberish
  ];
  export type OutputTuple = [
    starkKey: bigint,
    vaultId: bigint,
    assetType: bigint,
    tokenId: bigint,
    assetId: bigint
  ];
  export interface OutputObject {
    starkKey: bigint;
    vaultId: bigint;
    assetType: bigint;
    tokenId: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogDepositToVaultEvent {
  export type InputTuple = [
    ethKey: AddressLike,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish
  ];
  export type OutputTuple = [
    ethKey: string,
    assetId: bigint,
    vaultId: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint
  ];
  export interface OutputObject {
    ethKey: string;
    assetId: bigint;
    vaultId: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFrozenEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogFullWithdrawalRequestEvent {
  export type InputTuple = [starkKey: BigNumberish, vaultId: BigNumberish];
  export type OutputTuple = [starkKey: bigint, vaultId: bigint];
  export interface OutputObject {
    starkKey: bigint;
    vaultId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogMintWithdrawalPerformedEvent {
  export type InputTuple = [
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish,
    assetId: BigNumberish
  ];
  export type OutputTuple = [
    ownerKey: bigint,
    assetType: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint,
    assetId: bigint
  ];
  export interface OutputObject {
    ownerKey: bigint;
    assetType: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogMintableWithdrawalAllowedEvent {
  export type InputTuple = [
    ownerKey: BigNumberish,
    assetId: BigNumberish,
    quantizedAmount: BigNumberish
  ];
  export type OutputTuple = [
    ownerKey: bigint,
    assetId: bigint,
    quantizedAmount: bigint
  ];
  export interface OutputObject {
    ownerKey: bigint;
    assetId: bigint;
    quantizedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogNewGovernorAcceptedEvent {
  export type InputTuple = [acceptedGovernor: AddressLike];
  export type OutputTuple = [acceptedGovernor: string];
  export interface OutputObject {
    acceptedGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogNftDepositEvent {
  export type InputTuple = [
    depositorEthKey: AddressLike,
    starkKey: BigNumberish,
    vaultId: BigNumberish,
    assetType: BigNumberish,
    tokenId: BigNumberish,
    assetId: BigNumberish
  ];
  export type OutputTuple = [
    depositorEthKey: string,
    starkKey: bigint,
    vaultId: bigint,
    assetType: bigint,
    tokenId: bigint,
    assetId: bigint
  ];
  export interface OutputObject {
    depositorEthKey: string;
    starkKey: bigint;
    vaultId: bigint;
    assetType: bigint;
    tokenId: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogNftWithdrawalAllowedEvent {
  export type InputTuple = [ownerKey: BigNumberish, assetId: BigNumberish];
  export type OutputTuple = [ownerKey: bigint, assetId: bigint];
  export interface OutputObject {
    ownerKey: bigint;
    assetId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogNftWithdrawalPerformedEvent {
  export type InputTuple = [
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    tokenId: BigNumberish,
    assetId: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    ownerKey: bigint,
    assetType: bigint,
    tokenId: bigint,
    assetId: bigint,
    recipient: string
  ];
  export interface OutputObject {
    ownerKey: bigint;
    assetType: bigint;
    tokenId: bigint;
    assetId: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogNominatedGovernorEvent {
  export type InputTuple = [nominatedGovernor: AddressLike];
  export type OutputTuple = [nominatedGovernor: string];
  export interface OutputObject {
    nominatedGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogNominationCancelledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogOperatorAddedEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogOperatorRemovedEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRegisteredEvent {
  export type InputTuple = [entry: AddressLike, entryId: string];
  export type OutputTuple = [entry: string, entryId: string];
  export interface OutputObject {
    entry: string;
    entryId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRemovalIntentEvent {
  export type InputTuple = [entry: AddressLike, entryId: string];
  export type OutputTuple = [entry: string, entryId: string];
  export interface OutputObject {
    entry: string;
    entryId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRemovedEvent {
  export type InputTuple = [entry: AddressLike, entryId: string];
  export type OutputTuple = [entry: string, entryId: string];
  export interface OutputObject {
    entry: string;
    entryId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRemovedGovernorEvent {
  export type InputTuple = [removedGovernor: AddressLike];
  export type OutputTuple = [removedGovernor: string];
  export interface OutputObject {
    removedGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogRootUpdateEvent {
  export type InputTuple = [
    sequenceNumber: BigNumberish,
    batchId: BigNumberish,
    vaultRoot: BigNumberish,
    orderRoot: BigNumberish
  ];
  export type OutputTuple = [
    sequenceNumber: bigint,
    batchId: bigint,
    vaultRoot: bigint,
    orderRoot: bigint
  ];
  export interface OutputObject {
    sequenceNumber: bigint;
    batchId: bigint;
    vaultRoot: bigint;
    orderRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogStateTransitionFactEvent {
  export type InputTuple = [stateTransitionFact: BytesLike];
  export type OutputTuple = [stateTransitionFact: string];
  export interface OutputObject {
    stateTransitionFact: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogTokenAdminAddedEvent {
  export type InputTuple = [tokenAdmin: AddressLike];
  export type OutputTuple = [tokenAdmin: string];
  export interface OutputObject {
    tokenAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogTokenAdminRemovedEvent {
  export type InputTuple = [tokenAdmin: AddressLike];
  export type OutputTuple = [tokenAdmin: string];
  export interface OutputObject {
    tokenAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogTokenRegisteredEvent {
  export type InputTuple = [
    assetType: BigNumberish,
    assetInfo: BytesLike,
    quantum: BigNumberish
  ];
  export type OutputTuple = [
    assetType: bigint,
    assetInfo: string,
    quantum: bigint
  ];
  export interface OutputObject {
    assetType: bigint;
    assetInfo: string;
    quantum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogUnFrozenEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogUserRegisteredEvent {
  export type InputTuple = [
    ethKey: AddressLike,
    starkKey: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [ethKey: string, starkKey: bigint, sender: string];
  export interface OutputObject {
    ethKey: string;
    starkKey: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogVaultBalanceChangeAppliedEvent {
  export type InputTuple = [
    ethKey: AddressLike,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    quantizedAmountChange: BigNumberish
  ];
  export type OutputTuple = [
    ethKey: string,
    assetId: bigint,
    vaultId: bigint,
    quantizedAmountChange: bigint
  ];
  export interface OutputObject {
    ethKey: string;
    assetId: bigint;
    vaultId: bigint;
    quantizedAmountChange: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogVaultWithdrawalLockSetEvent {
  export type InputTuple = [
    ethKey: AddressLike,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    timeRelease: BigNumberish
  ];
  export type OutputTuple = [
    ethKey: string,
    assetId: bigint,
    vaultId: bigint,
    timeRelease: bigint
  ];
  export interface OutputObject {
    ethKey: string;
    assetId: bigint;
    vaultId: bigint;
    timeRelease: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawalAllowedEvent {
  export type InputTuple = [
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish
  ];
  export type OutputTuple = [
    ownerKey: bigint,
    assetType: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint
  ];
  export interface OutputObject {
    ownerKey: bigint;
    assetType: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawalFromVaultEvent {
  export type InputTuple = [
    ethKey: AddressLike,
    assetId: BigNumberish,
    vaultId: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish
  ];
  export type OutputTuple = [
    ethKey: string,
    assetId: bigint,
    vaultId: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint
  ];
  export interface OutputObject {
    ethKey: string;
    assetId: bigint;
    vaultId: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogWithdrawalPerformedEvent {
  export type InputTuple = [
    ownerKey: BigNumberish,
    assetType: BigNumberish,
    nonQuantizedAmount: BigNumberish,
    quantizedAmount: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    ownerKey: bigint,
    assetType: bigint,
    nonQuantizedAmount: bigint,
    quantizedAmount: bigint,
    recipient: string
  ];
  export interface OutputObject {
    ownerKey: bigint;
    assetType: bigint;
    nonQuantizedAmount: bigint;
    quantizedAmount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CoreV4 extends BaseContract {
  connect(runner?: ContractRunner | null): CoreV4;
  waitForDeployment(): Promise<this>;

  interface: CoreV4Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEPOSIT_CANCEL_DELAY: TypedContractMethod<[], [bigint], "view">;

  FREEZE_GRACE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  MAIN_GOVERNANCE_INFO_TAG: TypedContractMethod<[], [string], "view">;

  MAX_FORCED_ACTIONS_REQS_PER_BLOCK: TypedContractMethod<[], [bigint], "view">;

  MAX_VERIFIER_COUNT: TypedContractMethod<[], [bigint], "view">;

  STARKEX_MAX_DEFAULT_VAULT_LOCK: TypedContractMethod<[], [bigint], "view">;

  UNFREEZE_DELAY: TypedContractMethod<[], [bigint], "view">;

  VERIFIER_REMOVAL_DELAY: TypedContractMethod<[], [bigint], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  announceAvailabilityVerifierRemovalIntent: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  announceVerifierRemovalIntent: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  defaultVaultWithdrawalLock: TypedContractMethod<[], [bigint], "view">;

  "deposit(uint256,uint256,uint256)": TypedContractMethod<
    [starkKey: BigNumberish, assetType: BigNumberish, vaultId: BigNumberish],
    [void],
    "payable"
  >;

  "deposit(uint256,uint256,uint256,uint256)": TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositCancel: TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositERC20: TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositERC20ToVault: TypedContractMethod<
    [
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositEth: TypedContractMethod<
    [starkKey: BigNumberish, assetType: BigNumberish, vaultId: BigNumberish],
    [void],
    "payable"
  >;

  depositEthToVault: TypedContractMethod<
    [assetId: BigNumberish, vaultId: BigNumberish],
    [void],
    "payable"
  >;

  depositNft: TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositNftReclaim: TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositReclaim: TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;

  escape: TypedContractMethod<
    [
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  freezeRequest: TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fullWithdrawalRequest: TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActionCount: TypedContractMethod<[], [bigint], "view">;

  getActionHashByIndex: TypedContractMethod<
    [actionIndex: BigNumberish],
    [string],
    "view"
  >;

  getAssetInfo: TypedContractMethod<
    [assetType: BigNumberish],
    [string],
    "view"
  >;

  getCancellationRequest: TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getDepositBalance: TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getEthKey: TypedContractMethod<[ownerKey: BigNumberish], [string], "view">;

  getFullWithdrawalRequest: TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getLastBatchId: TypedContractMethod<[], [bigint], "view">;

  getOrderRoot: TypedContractMethod<[], [bigint], "view">;

  getOrderTreeHeight: TypedContractMethod<[], [bigint], "view">;

  getQuantizedDepositBalance: TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getQuantizedVaultBalance: TypedContractMethod<
    [ethKey: AddressLike, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getQuantum: TypedContractMethod<
    [presumedAssetType: BigNumberish],
    [bigint],
    "view"
  >;

  getRegisteredAvailabilityVerifiers: TypedContractMethod<
    [],
    [string[]],
    "view"
  >;

  getRegisteredVerifiers: TypedContractMethod<[], [string[]], "view">;

  getSequenceNumber: TypedContractMethod<[], [bigint], "view">;

  getVaultBalance: TypedContractMethod<
    [ethKey: AddressLike, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getVaultRoot: TypedContractMethod<[], [bigint], "view">;

  getVaultTreeHeight: TypedContractMethod<[], [bigint], "view">;

  getVaultWithdrawalLock: TypedContractMethod<
    [ethKey: AddressLike, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;

  getWithdrawalBalance: TypedContractMethod<
    [ownerKey: BigNumberish, assetId: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  isAssetRegistered: TypedContractMethod<
    [assetType: BigNumberish],
    [boolean],
    "view"
  >;

  isAvailabilityVerifier: TypedContractMethod<
    [verifierAddress: AddressLike],
    [boolean],
    "view"
  >;

  isFrozen: TypedContractMethod<[], [boolean], "view">;

  isOperator: TypedContractMethod<
    [testedOperator: AddressLike],
    [boolean],
    "view"
  >;

  isStrictVaultBalancePolicy: TypedContractMethod<[], [boolean], "view">;

  isTokenAdmin: TypedContractMethod<
    [testedAdmin: AddressLike],
    [boolean],
    "view"
  >;

  isVaultLocked: TypedContractMethod<
    [ethKey: AddressLike, assetId: BigNumberish, vaultId: BigNumberish],
    [boolean],
    "view"
  >;

  isVerifier: TypedContractMethod<
    [verifierAddress: AddressLike],
    [boolean],
    "view"
  >;

  lockVault: TypedContractMethod<
    [assetId: BigNumberish, vaultId: BigNumberish, lockTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  mainAcceptGovernance: TypedContractMethod<[], [void], "nonpayable">;

  mainCancelNomination: TypedContractMethod<[], [void], "nonpayable">;

  mainIsGovernor: TypedContractMethod<
    [testGovernor: AddressLike],
    [boolean],
    "view"
  >;

  mainNominateNewGovernor: TypedContractMethod<
    [newGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  mainRemoveGovernor: TypedContractMethod<
    [governorForRemoval: AddressLike],
    [void],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;

  orderRegistryAddress: TypedContractMethod<[], [string], "view">;

  registerAndDepositERC20: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerAndDepositEth: TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish
    ],
    [void],
    "payable"
  >;

  registerAvailabilityVerifier: TypedContractMethod<
    [verifier: AddressLike, identifier: string],
    [void],
    "nonpayable"
  >;

  registerEthAddress: TypedContractMethod<
    [ethKey: AddressLike, starkKey: BigNumberish, starkSignature: BytesLike],
    [void],
    "nonpayable"
  >;

  registerOperator: TypedContractMethod<
    [newOperator: AddressLike],
    [void],
    "nonpayable"
  >;

  registerSender: TypedContractMethod<
    [starkKey: BigNumberish, starkSignature: BytesLike],
    [void],
    "nonpayable"
  >;

  "registerToken(uint256,bytes)": TypedContractMethod<
    [assetType: BigNumberish, assetInfo: BytesLike],
    [void],
    "nonpayable"
  >;

  "registerToken(uint256,bytes,uint256)": TypedContractMethod<
    [assetType: BigNumberish, assetInfo: BytesLike, quantum: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerTokenAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  registerVerifier: TypedContractMethod<
    [verifier: AddressLike, identifier: string],
    [void],
    "nonpayable"
  >;

  removeAvailabilityVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  removeVerifier: TypedContractMethod<
    [verifier: AddressLike],
    [void],
    "nonpayable"
  >;

  setDefaultVaultWithdrawalLock: TypedContractMethod<
    [newDefaultTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  unFreeze: TypedContractMethod<[], [void], "nonpayable">;

  unregisterOperator: TypedContractMethod<
    [removedOperator: AddressLike],
    [void],
    "nonpayable"
  >;

  unregisterTokenAdmin: TypedContractMethod<
    [oldAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  updateImplementationActivationTime: TypedContractMethod<
    [implementation: AddressLike, data: BytesLike, finalize: boolean],
    [void],
    "nonpayable"
  >;

  updateState: TypedContractMethod<
    [publicInput: BigNumberish[], applicationData: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawAndMint: TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish, mintingBlob: BytesLike],
    [void],
    "nonpayable"
  >;

  withdrawFromVault: TypedContractMethod<
    [
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawNft: TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEPOSIT_CANCEL_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FREEZE_GRACE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAIN_GOVERNANCE_INFO_TAG"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_FORCED_ACTIONS_REQS_PER_BLOCK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_VERIFIER_COUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STARKEX_MAX_DEFAULT_VAULT_LOCK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UNFREEZE_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_REMOVAL_DELAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "announceAvailabilityVerifierRemovalIntent"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "announceVerifierRemovalIntent"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "defaultVaultWithdrawalLock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetType: BigNumberish, vaultId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deposit(uint256,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositCancel"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC20"
  ): TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositERC20ToVault"
  ): TypedContractMethod<
    [
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositEth"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetType: BigNumberish, vaultId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositEthToVault"
  ): TypedContractMethod<
    [assetId: BigNumberish, vaultId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositNft"
  ): TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositNftReclaim"
  ): TypedContractMethod<
    [
      starkKey: BigNumberish,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositReclaim"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "escape"
  ): TypedContractMethod<
    [
      starkKey: BigNumberish,
      vaultId: BigNumberish,
      assetId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freezeRequest"
  ): TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fullWithdrawalRequest"
  ): TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getActionHashByIndex"
  ): TypedContractMethod<[actionIndex: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAssetInfo"
  ): TypedContractMethod<[assetType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCancellationRequest"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDepositBalance"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEthKey"
  ): TypedContractMethod<[ownerKey: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFullWithdrawalRequest"
  ): TypedContractMethod<
    [starkKey: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastBatchId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrderRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrderTreeHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuantizedDepositBalance"
  ): TypedContractMethod<
    [starkKey: BigNumberish, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuantizedVaultBalance"
  ): TypedContractMethod<
    [ethKey: AddressLike, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuantum"
  ): TypedContractMethod<[presumedAssetType: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRegisteredAvailabilityVerifiers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRegisteredVerifiers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSequenceNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultBalance"
  ): TypedContractMethod<
    [ethKey: AddressLike, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultTreeHeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVaultWithdrawalLock"
  ): TypedContractMethod<
    [ethKey: AddressLike, assetId: BigNumberish, vaultId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWithdrawalBalance"
  ): TypedContractMethod<
    [ownerKey: BigNumberish, assetId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAssetRegistered"
  ): TypedContractMethod<[assetType: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAvailabilityVerifier"
  ): TypedContractMethod<[verifierAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isFrozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOperator"
  ): TypedContractMethod<[testedOperator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isStrictVaultBalancePolicy"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenAdmin"
  ): TypedContractMethod<[testedAdmin: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVaultLocked"
  ): TypedContractMethod<
    [ethKey: AddressLike, assetId: BigNumberish, vaultId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVerifier"
  ): TypedContractMethod<[verifierAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lockVault"
  ): TypedContractMethod<
    [assetId: BigNumberish, vaultId: BigNumberish, lockTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mainAcceptGovernance"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mainCancelNomination"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mainIsGovernor"
  ): TypedContractMethod<[testGovernor: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mainNominateNewGovernor"
  ): TypedContractMethod<[newGovernor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mainRemoveGovernor"
  ): TypedContractMethod<
    [governorForRemoval: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orderRegistryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerAndDepositERC20"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerAndDepositEth"
  ): TypedContractMethod<
    [
      ethKey: AddressLike,
      starkKey: BigNumberish,
      signature: BytesLike,
      assetType: BigNumberish,
      vaultId: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registerAvailabilityVerifier"
  ): TypedContractMethod<
    [verifier: AddressLike, identifier: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerEthAddress"
  ): TypedContractMethod<
    [ethKey: AddressLike, starkKey: BigNumberish, starkSignature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerOperator"
  ): TypedContractMethod<[newOperator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerSender"
  ): TypedContractMethod<
    [starkKey: BigNumberish, starkSignature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerToken(uint256,bytes)"
  ): TypedContractMethod<
    [assetType: BigNumberish, assetInfo: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerToken(uint256,bytes,uint256)"
  ): TypedContractMethod<
    [assetType: BigNumberish, assetInfo: BytesLike, quantum: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerTokenAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerVerifier"
  ): TypedContractMethod<
    [verifier: AddressLike, identifier: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAvailabilityVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVerifier"
  ): TypedContractMethod<[verifier: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultVaultWithdrawalLock"
  ): TypedContractMethod<[newDefaultTime: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unFreeze"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterOperator"
  ): TypedContractMethod<[removedOperator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterTokenAdmin"
  ): TypedContractMethod<[oldAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateImplementationActivationTime"
  ): TypedContractMethod<
    [implementation: AddressLike, data: BytesLike, finalize: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateState"
  ): TypedContractMethod<
    [publicInput: BigNumberish[], applicationData: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAndMint"
  ): TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish, mintingBlob: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFromVault"
  ): TypedContractMethod<
    [
      assetId: BigNumberish,
      vaultId: BigNumberish,
      quantizedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawNft"
  ): TypedContractMethod<
    [ownerKey: BigNumberish, assetType: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ImplementationActivationRescheduled"
  ): TypedContractEvent<
    ImplementationActivationRescheduledEvent.InputTuple,
    ImplementationActivationRescheduledEvent.OutputTuple,
    ImplementationActivationRescheduledEvent.OutputObject
  >;
  getEvent(
    key: "LogDefaultVaultWithdrawalLockSet"
  ): TypedContractEvent<
    LogDefaultVaultWithdrawalLockSetEvent.InputTuple,
    LogDefaultVaultWithdrawalLockSetEvent.OutputTuple,
    LogDefaultVaultWithdrawalLockSetEvent.OutputObject
  >;
  getEvent(
    key: "LogDeposit"
  ): TypedContractEvent<
    LogDepositEvent.InputTuple,
    LogDepositEvent.OutputTuple,
    LogDepositEvent.OutputObject
  >;
  getEvent(
    key: "LogDepositCancel"
  ): TypedContractEvent<
    LogDepositCancelEvent.InputTuple,
    LogDepositCancelEvent.OutputTuple,
    LogDepositCancelEvent.OutputObject
  >;
  getEvent(
    key: "LogDepositCancelReclaimed"
  ): TypedContractEvent<
    LogDepositCancelReclaimedEvent.InputTuple,
    LogDepositCancelReclaimedEvent.OutputTuple,
    LogDepositCancelReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "LogDepositNftCancelReclaimed"
  ): TypedContractEvent<
    LogDepositNftCancelReclaimedEvent.InputTuple,
    LogDepositNftCancelReclaimedEvent.OutputTuple,
    LogDepositNftCancelReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "LogDepositToVault"
  ): TypedContractEvent<
    LogDepositToVaultEvent.InputTuple,
    LogDepositToVaultEvent.OutputTuple,
    LogDepositToVaultEvent.OutputObject
  >;
  getEvent(
    key: "LogFrozen"
  ): TypedContractEvent<
    LogFrozenEvent.InputTuple,
    LogFrozenEvent.OutputTuple,
    LogFrozenEvent.OutputObject
  >;
  getEvent(
    key: "LogFullWithdrawalRequest"
  ): TypedContractEvent<
    LogFullWithdrawalRequestEvent.InputTuple,
    LogFullWithdrawalRequestEvent.OutputTuple,
    LogFullWithdrawalRequestEvent.OutputObject
  >;
  getEvent(
    key: "LogMintWithdrawalPerformed"
  ): TypedContractEvent<
    LogMintWithdrawalPerformedEvent.InputTuple,
    LogMintWithdrawalPerformedEvent.OutputTuple,
    LogMintWithdrawalPerformedEvent.OutputObject
  >;
  getEvent(
    key: "LogMintableWithdrawalAllowed"
  ): TypedContractEvent<
    LogMintableWithdrawalAllowedEvent.InputTuple,
    LogMintableWithdrawalAllowedEvent.OutputTuple,
    LogMintableWithdrawalAllowedEvent.OutputObject
  >;
  getEvent(
    key: "LogNewGovernorAccepted"
  ): TypedContractEvent<
    LogNewGovernorAcceptedEvent.InputTuple,
    LogNewGovernorAcceptedEvent.OutputTuple,
    LogNewGovernorAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "LogNftDeposit"
  ): TypedContractEvent<
    LogNftDepositEvent.InputTuple,
    LogNftDepositEvent.OutputTuple,
    LogNftDepositEvent.OutputObject
  >;
  getEvent(
    key: "LogNftWithdrawalAllowed"
  ): TypedContractEvent<
    LogNftWithdrawalAllowedEvent.InputTuple,
    LogNftWithdrawalAllowedEvent.OutputTuple,
    LogNftWithdrawalAllowedEvent.OutputObject
  >;
  getEvent(
    key: "LogNftWithdrawalPerformed"
  ): TypedContractEvent<
    LogNftWithdrawalPerformedEvent.InputTuple,
    LogNftWithdrawalPerformedEvent.OutputTuple,
    LogNftWithdrawalPerformedEvent.OutputObject
  >;
  getEvent(
    key: "LogNominatedGovernor"
  ): TypedContractEvent<
    LogNominatedGovernorEvent.InputTuple,
    LogNominatedGovernorEvent.OutputTuple,
    LogNominatedGovernorEvent.OutputObject
  >;
  getEvent(
    key: "LogNominationCancelled"
  ): TypedContractEvent<
    LogNominationCancelledEvent.InputTuple,
    LogNominationCancelledEvent.OutputTuple,
    LogNominationCancelledEvent.OutputObject
  >;
  getEvent(
    key: "LogOperatorAdded"
  ): TypedContractEvent<
    LogOperatorAddedEvent.InputTuple,
    LogOperatorAddedEvent.OutputTuple,
    LogOperatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "LogOperatorRemoved"
  ): TypedContractEvent<
    LogOperatorRemovedEvent.InputTuple,
    LogOperatorRemovedEvent.OutputTuple,
    LogOperatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "LogRegistered"
  ): TypedContractEvent<
    LogRegisteredEvent.InputTuple,
    LogRegisteredEvent.OutputTuple,
    LogRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "LogRemovalIntent"
  ): TypedContractEvent<
    LogRemovalIntentEvent.InputTuple,
    LogRemovalIntentEvent.OutputTuple,
    LogRemovalIntentEvent.OutputObject
  >;
  getEvent(
    key: "LogRemoved"
  ): TypedContractEvent<
    LogRemovedEvent.InputTuple,
    LogRemovedEvent.OutputTuple,
    LogRemovedEvent.OutputObject
  >;
  getEvent(
    key: "LogRemovedGovernor"
  ): TypedContractEvent<
    LogRemovedGovernorEvent.InputTuple,
    LogRemovedGovernorEvent.OutputTuple,
    LogRemovedGovernorEvent.OutputObject
  >;
  getEvent(
    key: "LogRootUpdate"
  ): TypedContractEvent<
    LogRootUpdateEvent.InputTuple,
    LogRootUpdateEvent.OutputTuple,
    LogRootUpdateEvent.OutputObject
  >;
  getEvent(
    key: "LogStateTransitionFact"
  ): TypedContractEvent<
    LogStateTransitionFactEvent.InputTuple,
    LogStateTransitionFactEvent.OutputTuple,
    LogStateTransitionFactEvent.OutputObject
  >;
  getEvent(
    key: "LogTokenAdminAdded"
  ): TypedContractEvent<
    LogTokenAdminAddedEvent.InputTuple,
    LogTokenAdminAddedEvent.OutputTuple,
    LogTokenAdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "LogTokenAdminRemoved"
  ): TypedContractEvent<
    LogTokenAdminRemovedEvent.InputTuple,
    LogTokenAdminRemovedEvent.OutputTuple,
    LogTokenAdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "LogTokenRegistered"
  ): TypedContractEvent<
    LogTokenRegisteredEvent.InputTuple,
    LogTokenRegisteredEvent.OutputTuple,
    LogTokenRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "LogUnFrozen"
  ): TypedContractEvent<
    LogUnFrozenEvent.InputTuple,
    LogUnFrozenEvent.OutputTuple,
    LogUnFrozenEvent.OutputObject
  >;
  getEvent(
    key: "LogUserRegistered"
  ): TypedContractEvent<
    LogUserRegisteredEvent.InputTuple,
    LogUserRegisteredEvent.OutputTuple,
    LogUserRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "LogVaultBalanceChangeApplied"
  ): TypedContractEvent<
    LogVaultBalanceChangeAppliedEvent.InputTuple,
    LogVaultBalanceChangeAppliedEvent.OutputTuple,
    LogVaultBalanceChangeAppliedEvent.OutputObject
  >;
  getEvent(
    key: "LogVaultWithdrawalLockSet"
  ): TypedContractEvent<
    LogVaultWithdrawalLockSetEvent.InputTuple,
    LogVaultWithdrawalLockSetEvent.OutputTuple,
    LogVaultWithdrawalLockSetEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawalAllowed"
  ): TypedContractEvent<
    LogWithdrawalAllowedEvent.InputTuple,
    LogWithdrawalAllowedEvent.OutputTuple,
    LogWithdrawalAllowedEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawalFromVault"
  ): TypedContractEvent<
    LogWithdrawalFromVaultEvent.InputTuple,
    LogWithdrawalFromVaultEvent.OutputTuple,
    LogWithdrawalFromVaultEvent.OutputObject
  >;
  getEvent(
    key: "LogWithdrawalPerformed"
  ): TypedContractEvent<
    LogWithdrawalPerformedEvent.InputTuple,
    LogWithdrawalPerformedEvent.OutputTuple,
    LogWithdrawalPerformedEvent.OutputObject
  >;

  filters: {
    "ImplementationActivationRescheduled(address,uint256)": TypedContractEvent<
      ImplementationActivationRescheduledEvent.InputTuple,
      ImplementationActivationRescheduledEvent.OutputTuple,
      ImplementationActivationRescheduledEvent.OutputObject
    >;
    ImplementationActivationRescheduled: TypedContractEvent<
      ImplementationActivationRescheduledEvent.InputTuple,
      ImplementationActivationRescheduledEvent.OutputTuple,
      ImplementationActivationRescheduledEvent.OutputObject
    >;

    "LogDefaultVaultWithdrawalLockSet(uint256)": TypedContractEvent<
      LogDefaultVaultWithdrawalLockSetEvent.InputTuple,
      LogDefaultVaultWithdrawalLockSetEvent.OutputTuple,
      LogDefaultVaultWithdrawalLockSetEvent.OutputObject
    >;
    LogDefaultVaultWithdrawalLockSet: TypedContractEvent<
      LogDefaultVaultWithdrawalLockSetEvent.InputTuple,
      LogDefaultVaultWithdrawalLockSetEvent.OutputTuple,
      LogDefaultVaultWithdrawalLockSetEvent.OutputObject
    >;

    "LogDeposit(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogDepositEvent.InputTuple,
      LogDepositEvent.OutputTuple,
      LogDepositEvent.OutputObject
    >;
    LogDeposit: TypedContractEvent<
      LogDepositEvent.InputTuple,
      LogDepositEvent.OutputTuple,
      LogDepositEvent.OutputObject
    >;

    "LogDepositCancel(uint256,uint256,uint256)": TypedContractEvent<
      LogDepositCancelEvent.InputTuple,
      LogDepositCancelEvent.OutputTuple,
      LogDepositCancelEvent.OutputObject
    >;
    LogDepositCancel: TypedContractEvent<
      LogDepositCancelEvent.InputTuple,
      LogDepositCancelEvent.OutputTuple,
      LogDepositCancelEvent.OutputObject
    >;

    "LogDepositCancelReclaimed(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogDepositCancelReclaimedEvent.InputTuple,
      LogDepositCancelReclaimedEvent.OutputTuple,
      LogDepositCancelReclaimedEvent.OutputObject
    >;
    LogDepositCancelReclaimed: TypedContractEvent<
      LogDepositCancelReclaimedEvent.InputTuple,
      LogDepositCancelReclaimedEvent.OutputTuple,
      LogDepositCancelReclaimedEvent.OutputObject
    >;

    "LogDepositNftCancelReclaimed(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogDepositNftCancelReclaimedEvent.InputTuple,
      LogDepositNftCancelReclaimedEvent.OutputTuple,
      LogDepositNftCancelReclaimedEvent.OutputObject
    >;
    LogDepositNftCancelReclaimed: TypedContractEvent<
      LogDepositNftCancelReclaimedEvent.InputTuple,
      LogDepositNftCancelReclaimedEvent.OutputTuple,
      LogDepositNftCancelReclaimedEvent.OutputObject
    >;

    "LogDepositToVault(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogDepositToVaultEvent.InputTuple,
      LogDepositToVaultEvent.OutputTuple,
      LogDepositToVaultEvent.OutputObject
    >;
    LogDepositToVault: TypedContractEvent<
      LogDepositToVaultEvent.InputTuple,
      LogDepositToVaultEvent.OutputTuple,
      LogDepositToVaultEvent.OutputObject
    >;

    "LogFrozen()": TypedContractEvent<
      LogFrozenEvent.InputTuple,
      LogFrozenEvent.OutputTuple,
      LogFrozenEvent.OutputObject
    >;
    LogFrozen: TypedContractEvent<
      LogFrozenEvent.InputTuple,
      LogFrozenEvent.OutputTuple,
      LogFrozenEvent.OutputObject
    >;

    "LogFullWithdrawalRequest(uint256,uint256)": TypedContractEvent<
      LogFullWithdrawalRequestEvent.InputTuple,
      LogFullWithdrawalRequestEvent.OutputTuple,
      LogFullWithdrawalRequestEvent.OutputObject
    >;
    LogFullWithdrawalRequest: TypedContractEvent<
      LogFullWithdrawalRequestEvent.InputTuple,
      LogFullWithdrawalRequestEvent.OutputTuple,
      LogFullWithdrawalRequestEvent.OutputObject
    >;

    "LogMintWithdrawalPerformed(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogMintWithdrawalPerformedEvent.InputTuple,
      LogMintWithdrawalPerformedEvent.OutputTuple,
      LogMintWithdrawalPerformedEvent.OutputObject
    >;
    LogMintWithdrawalPerformed: TypedContractEvent<
      LogMintWithdrawalPerformedEvent.InputTuple,
      LogMintWithdrawalPerformedEvent.OutputTuple,
      LogMintWithdrawalPerformedEvent.OutputObject
    >;

    "LogMintableWithdrawalAllowed(uint256,uint256,uint256)": TypedContractEvent<
      LogMintableWithdrawalAllowedEvent.InputTuple,
      LogMintableWithdrawalAllowedEvent.OutputTuple,
      LogMintableWithdrawalAllowedEvent.OutputObject
    >;
    LogMintableWithdrawalAllowed: TypedContractEvent<
      LogMintableWithdrawalAllowedEvent.InputTuple,
      LogMintableWithdrawalAllowedEvent.OutputTuple,
      LogMintableWithdrawalAllowedEvent.OutputObject
    >;

    "LogNewGovernorAccepted(address)": TypedContractEvent<
      LogNewGovernorAcceptedEvent.InputTuple,
      LogNewGovernorAcceptedEvent.OutputTuple,
      LogNewGovernorAcceptedEvent.OutputObject
    >;
    LogNewGovernorAccepted: TypedContractEvent<
      LogNewGovernorAcceptedEvent.InputTuple,
      LogNewGovernorAcceptedEvent.OutputTuple,
      LogNewGovernorAcceptedEvent.OutputObject
    >;

    "LogNftDeposit(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogNftDepositEvent.InputTuple,
      LogNftDepositEvent.OutputTuple,
      LogNftDepositEvent.OutputObject
    >;
    LogNftDeposit: TypedContractEvent<
      LogNftDepositEvent.InputTuple,
      LogNftDepositEvent.OutputTuple,
      LogNftDepositEvent.OutputObject
    >;

    "LogNftWithdrawalAllowed(uint256,uint256)": TypedContractEvent<
      LogNftWithdrawalAllowedEvent.InputTuple,
      LogNftWithdrawalAllowedEvent.OutputTuple,
      LogNftWithdrawalAllowedEvent.OutputObject
    >;
    LogNftWithdrawalAllowed: TypedContractEvent<
      LogNftWithdrawalAllowedEvent.InputTuple,
      LogNftWithdrawalAllowedEvent.OutputTuple,
      LogNftWithdrawalAllowedEvent.OutputObject
    >;

    "LogNftWithdrawalPerformed(uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      LogNftWithdrawalPerformedEvent.InputTuple,
      LogNftWithdrawalPerformedEvent.OutputTuple,
      LogNftWithdrawalPerformedEvent.OutputObject
    >;
    LogNftWithdrawalPerformed: TypedContractEvent<
      LogNftWithdrawalPerformedEvent.InputTuple,
      LogNftWithdrawalPerformedEvent.OutputTuple,
      LogNftWithdrawalPerformedEvent.OutputObject
    >;

    "LogNominatedGovernor(address)": TypedContractEvent<
      LogNominatedGovernorEvent.InputTuple,
      LogNominatedGovernorEvent.OutputTuple,
      LogNominatedGovernorEvent.OutputObject
    >;
    LogNominatedGovernor: TypedContractEvent<
      LogNominatedGovernorEvent.InputTuple,
      LogNominatedGovernorEvent.OutputTuple,
      LogNominatedGovernorEvent.OutputObject
    >;

    "LogNominationCancelled()": TypedContractEvent<
      LogNominationCancelledEvent.InputTuple,
      LogNominationCancelledEvent.OutputTuple,
      LogNominationCancelledEvent.OutputObject
    >;
    LogNominationCancelled: TypedContractEvent<
      LogNominationCancelledEvent.InputTuple,
      LogNominationCancelledEvent.OutputTuple,
      LogNominationCancelledEvent.OutputObject
    >;

    "LogOperatorAdded(address)": TypedContractEvent<
      LogOperatorAddedEvent.InputTuple,
      LogOperatorAddedEvent.OutputTuple,
      LogOperatorAddedEvent.OutputObject
    >;
    LogOperatorAdded: TypedContractEvent<
      LogOperatorAddedEvent.InputTuple,
      LogOperatorAddedEvent.OutputTuple,
      LogOperatorAddedEvent.OutputObject
    >;

    "LogOperatorRemoved(address)": TypedContractEvent<
      LogOperatorRemovedEvent.InputTuple,
      LogOperatorRemovedEvent.OutputTuple,
      LogOperatorRemovedEvent.OutputObject
    >;
    LogOperatorRemoved: TypedContractEvent<
      LogOperatorRemovedEvent.InputTuple,
      LogOperatorRemovedEvent.OutputTuple,
      LogOperatorRemovedEvent.OutputObject
    >;

    "LogRegistered(address,string)": TypedContractEvent<
      LogRegisteredEvent.InputTuple,
      LogRegisteredEvent.OutputTuple,
      LogRegisteredEvent.OutputObject
    >;
    LogRegistered: TypedContractEvent<
      LogRegisteredEvent.InputTuple,
      LogRegisteredEvent.OutputTuple,
      LogRegisteredEvent.OutputObject
    >;

    "LogRemovalIntent(address,string)": TypedContractEvent<
      LogRemovalIntentEvent.InputTuple,
      LogRemovalIntentEvent.OutputTuple,
      LogRemovalIntentEvent.OutputObject
    >;
    LogRemovalIntent: TypedContractEvent<
      LogRemovalIntentEvent.InputTuple,
      LogRemovalIntentEvent.OutputTuple,
      LogRemovalIntentEvent.OutputObject
    >;

    "LogRemoved(address,string)": TypedContractEvent<
      LogRemovedEvent.InputTuple,
      LogRemovedEvent.OutputTuple,
      LogRemovedEvent.OutputObject
    >;
    LogRemoved: TypedContractEvent<
      LogRemovedEvent.InputTuple,
      LogRemovedEvent.OutputTuple,
      LogRemovedEvent.OutputObject
    >;

    "LogRemovedGovernor(address)": TypedContractEvent<
      LogRemovedGovernorEvent.InputTuple,
      LogRemovedGovernorEvent.OutputTuple,
      LogRemovedGovernorEvent.OutputObject
    >;
    LogRemovedGovernor: TypedContractEvent<
      LogRemovedGovernorEvent.InputTuple,
      LogRemovedGovernorEvent.OutputTuple,
      LogRemovedGovernorEvent.OutputObject
    >;

    "LogRootUpdate(uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogRootUpdateEvent.InputTuple,
      LogRootUpdateEvent.OutputTuple,
      LogRootUpdateEvent.OutputObject
    >;
    LogRootUpdate: TypedContractEvent<
      LogRootUpdateEvent.InputTuple,
      LogRootUpdateEvent.OutputTuple,
      LogRootUpdateEvent.OutputObject
    >;

    "LogStateTransitionFact(bytes32)": TypedContractEvent<
      LogStateTransitionFactEvent.InputTuple,
      LogStateTransitionFactEvent.OutputTuple,
      LogStateTransitionFactEvent.OutputObject
    >;
    LogStateTransitionFact: TypedContractEvent<
      LogStateTransitionFactEvent.InputTuple,
      LogStateTransitionFactEvent.OutputTuple,
      LogStateTransitionFactEvent.OutputObject
    >;

    "LogTokenAdminAdded(address)": TypedContractEvent<
      LogTokenAdminAddedEvent.InputTuple,
      LogTokenAdminAddedEvent.OutputTuple,
      LogTokenAdminAddedEvent.OutputObject
    >;
    LogTokenAdminAdded: TypedContractEvent<
      LogTokenAdminAddedEvent.InputTuple,
      LogTokenAdminAddedEvent.OutputTuple,
      LogTokenAdminAddedEvent.OutputObject
    >;

    "LogTokenAdminRemoved(address)": TypedContractEvent<
      LogTokenAdminRemovedEvent.InputTuple,
      LogTokenAdminRemovedEvent.OutputTuple,
      LogTokenAdminRemovedEvent.OutputObject
    >;
    LogTokenAdminRemoved: TypedContractEvent<
      LogTokenAdminRemovedEvent.InputTuple,
      LogTokenAdminRemovedEvent.OutputTuple,
      LogTokenAdminRemovedEvent.OutputObject
    >;

    "LogTokenRegistered(uint256,bytes,uint256)": TypedContractEvent<
      LogTokenRegisteredEvent.InputTuple,
      LogTokenRegisteredEvent.OutputTuple,
      LogTokenRegisteredEvent.OutputObject
    >;
    LogTokenRegistered: TypedContractEvent<
      LogTokenRegisteredEvent.InputTuple,
      LogTokenRegisteredEvent.OutputTuple,
      LogTokenRegisteredEvent.OutputObject
    >;

    "LogUnFrozen()": TypedContractEvent<
      LogUnFrozenEvent.InputTuple,
      LogUnFrozenEvent.OutputTuple,
      LogUnFrozenEvent.OutputObject
    >;
    LogUnFrozen: TypedContractEvent<
      LogUnFrozenEvent.InputTuple,
      LogUnFrozenEvent.OutputTuple,
      LogUnFrozenEvent.OutputObject
    >;

    "LogUserRegistered(address,uint256,address)": TypedContractEvent<
      LogUserRegisteredEvent.InputTuple,
      LogUserRegisteredEvent.OutputTuple,
      LogUserRegisteredEvent.OutputObject
    >;
    LogUserRegistered: TypedContractEvent<
      LogUserRegisteredEvent.InputTuple,
      LogUserRegisteredEvent.OutputTuple,
      LogUserRegisteredEvent.OutputObject
    >;

    "LogVaultBalanceChangeApplied(address,uint256,uint256,int256)": TypedContractEvent<
      LogVaultBalanceChangeAppliedEvent.InputTuple,
      LogVaultBalanceChangeAppliedEvent.OutputTuple,
      LogVaultBalanceChangeAppliedEvent.OutputObject
    >;
    LogVaultBalanceChangeApplied: TypedContractEvent<
      LogVaultBalanceChangeAppliedEvent.InputTuple,
      LogVaultBalanceChangeAppliedEvent.OutputTuple,
      LogVaultBalanceChangeAppliedEvent.OutputObject
    >;

    "LogVaultWithdrawalLockSet(address,uint256,uint256,uint256)": TypedContractEvent<
      LogVaultWithdrawalLockSetEvent.InputTuple,
      LogVaultWithdrawalLockSetEvent.OutputTuple,
      LogVaultWithdrawalLockSetEvent.OutputObject
    >;
    LogVaultWithdrawalLockSet: TypedContractEvent<
      LogVaultWithdrawalLockSetEvent.InputTuple,
      LogVaultWithdrawalLockSetEvent.OutputTuple,
      LogVaultWithdrawalLockSetEvent.OutputObject
    >;

    "LogWithdrawalAllowed(uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogWithdrawalAllowedEvent.InputTuple,
      LogWithdrawalAllowedEvent.OutputTuple,
      LogWithdrawalAllowedEvent.OutputObject
    >;
    LogWithdrawalAllowed: TypedContractEvent<
      LogWithdrawalAllowedEvent.InputTuple,
      LogWithdrawalAllowedEvent.OutputTuple,
      LogWithdrawalAllowedEvent.OutputObject
    >;

    "LogWithdrawalFromVault(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      LogWithdrawalFromVaultEvent.InputTuple,
      LogWithdrawalFromVaultEvent.OutputTuple,
      LogWithdrawalFromVaultEvent.OutputObject
    >;
    LogWithdrawalFromVault: TypedContractEvent<
      LogWithdrawalFromVaultEvent.InputTuple,
      LogWithdrawalFromVaultEvent.OutputTuple,
      LogWithdrawalFromVaultEvent.OutputObject
    >;

    "LogWithdrawalPerformed(uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      LogWithdrawalPerformedEvent.InputTuple,
      LogWithdrawalPerformedEvent.OutputTuple,
      LogWithdrawalPerformedEvent.OutputObject
    >;
    LogWithdrawalPerformed: TypedContractEvent<
      LogWithdrawalPerformedEvent.InputTuple,
      LogWithdrawalPerformedEvent.OutputTuple,
      LogWithdrawalPerformedEvent.OutputObject
    >;
  };
}
