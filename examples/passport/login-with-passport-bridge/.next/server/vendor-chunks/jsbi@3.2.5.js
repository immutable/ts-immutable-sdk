"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsbi@3.2.5";
exports.ids = ["vendor-chunks/jsbi@3.2.5"];
exports.modules = {

/***/ "(ssr)/../../../node_modules/.pnpm/jsbi@3.2.5/node_modules/jsbi/dist/jsbi.mjs":
/*!******************************************************************************!*\
  !*** ../../../node_modules/.pnpm/jsbi@3.2.5/node_modules/jsbi/dist/jsbi.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass JSBI extends Array{constructor(i,_){if(super(i),this.sign=_,i>JSBI.__kMaxLength)throw new RangeError(\"Maximum BigInt size exceeded\")}static BigInt(i){var _=Math.floor,t=Number.isFinite;if(\"number\"==typeof i){if(0===i)return JSBI.__zero();if(JSBI.__isOneDigitInt(i))return 0>i?JSBI.__oneDigit(-i,!0):JSBI.__oneDigit(i,!1);if(!t(i)||_(i)!==i)throw new RangeError(\"The number \"+i+\" cannot be converted to BigInt because it is not an integer\");return JSBI.__fromDouble(i)}if(\"string\"==typeof i){const _=JSBI.__fromString(i);if(null===_)throw new SyntaxError(\"Cannot convert \"+i+\" to a BigInt\");return _}if(\"boolean\"==typeof i)return!0===i?JSBI.__oneDigit(1,!1):JSBI.__zero();if(\"object\"==typeof i){if(i.constructor===JSBI)return i;const _=JSBI.__toPrimitive(i);return JSBI.BigInt(_)}throw new TypeError(\"Cannot convert \"+i+\" to a BigInt\")}toDebugString(){const i=[\"BigInt[\"];for(const _ of this)i.push((_?(_>>>0).toString(16):_)+\", \");return i.push(\"]\"),i.join(\"\")}toString(i=10){if(2>i||36<i)throw new RangeError(\"toString() radix argument must be between 2 and 36\");return 0===this.length?\"0\":0==(i&i-1)?JSBI.__toStringBasePowerOfTwo(this,i):JSBI.__toStringGeneric(this,i,!1)}static toNumber(i){const _=i.length;if(0===_)return 0;if(1===_){const _=i.__unsignedDigit(0);return i.sign?-_:_}const t=i.__digit(_-1),e=JSBI.__clz30(t),n=30*_-e;if(1024<n)return i.sign?-Infinity:1/0;let g=n-1,o=t,s=_-1;const l=e+3;let r=32===l?0:o<<l;r>>>=12;const a=l-12;let u=12<=l?0:o<<20+l,d=20+l;for(0<a&&0<s&&(s--,o=i.__digit(s),r|=o>>>30-a,u=o<<a+2,d=a+2);0<d&&0<s;)s--,o=i.__digit(s),u|=30<=d?o<<d-30:o>>>30-d,d-=30;const h=JSBI.__decideRounding(i,d,s,o);if((1===h||0===h&&1==(1&u))&&(u=u+1>>>0,0===u&&(r++,0!=r>>>20&&(r=0,g++,1023<g))))return i.sign?-Infinity:1/0;const m=i.sign?-2147483648:0;return g=g+1023<<20,JSBI.__kBitConversionInts[1]=m|g|r,JSBI.__kBitConversionInts[0]=u,JSBI.__kBitConversionDouble[0]}static unaryMinus(i){if(0===i.length)return i;const _=i.__copy();return _.sign=!i.sign,_}static bitwiseNot(i){return i.sign?JSBI.__absoluteSubOne(i).__trim():JSBI.__absoluteAddOne(i,!0)}static exponentiate(i,_){if(_.sign)throw new RangeError(\"Exponent must be positive\");if(0===_.length)return JSBI.__oneDigit(1,!1);if(0===i.length)return i;if(1===i.length&&1===i.__digit(0))return i.sign&&0==(1&_.__digit(0))?JSBI.unaryMinus(i):i;if(1<_.length)throw new RangeError(\"BigInt too big\");let t=_.__unsignedDigit(0);if(1===t)return i;if(t>=JSBI.__kMaxLengthBits)throw new RangeError(\"BigInt too big\");if(1===i.length&&2===i.__digit(0)){const _=1+(0|t/30),e=i.sign&&0!=(1&t),n=new JSBI(_,e);n.__initializeDigits();const g=1<<t%30;return n.__setDigit(_-1,g),n}let e=null,n=i;for(0!=(1&t)&&(e=i),t>>=1;0!==t;t>>=1)n=JSBI.multiply(n,n),0!=(1&t)&&(null===e?e=n:e=JSBI.multiply(e,n));return e}static multiply(_,t){if(0===_.length)return _;if(0===t.length)return t;let i=_.length+t.length;30<=_.__clzmsd()+t.__clzmsd()&&i--;const e=new JSBI(i,_.sign!==t.sign);e.__initializeDigits();for(let n=0;n<_.length;n++)JSBI.__multiplyAccumulate(t,_.__digit(n),e,n);return e.__trim()}static divide(i,_){if(0===_.length)throw new RangeError(\"Division by zero\");if(0>JSBI.__absoluteCompare(i,_))return JSBI.__zero();const t=i.sign!==_.sign,e=_.__unsignedDigit(0);let n;if(1===_.length&&32767>=e){if(1===e)return t===i.sign?i:JSBI.unaryMinus(i);n=JSBI.__absoluteDivSmall(i,e,null)}else n=JSBI.__absoluteDivLarge(i,_,!0,!1);return n.sign=t,n.__trim()}static remainder(i,_){if(0===_.length)throw new RangeError(\"Division by zero\");if(0>JSBI.__absoluteCompare(i,_))return i;const t=_.__unsignedDigit(0);if(1===_.length&&32767>=t){if(1===t)return JSBI.__zero();const _=JSBI.__absoluteModSmall(i,t);return 0===_?JSBI.__zero():JSBI.__oneDigit(_,i.sign)}const e=JSBI.__absoluteDivLarge(i,_,!1,!0);return e.sign=i.sign,e.__trim()}static add(i,_){const t=i.sign;return t===_.sign?JSBI.__absoluteAdd(i,_,t):0<=JSBI.__absoluteCompare(i,_)?JSBI.__absoluteSub(i,_,t):JSBI.__absoluteSub(_,i,!t)}static subtract(i,_){const t=i.sign;return t===_.sign?0<=JSBI.__absoluteCompare(i,_)?JSBI.__absoluteSub(i,_,t):JSBI.__absoluteSub(_,i,!t):JSBI.__absoluteAdd(i,_,t)}static leftShift(i,_){return 0===_.length||0===i.length?i:_.sign?JSBI.__rightShiftByAbsolute(i,_):JSBI.__leftShiftByAbsolute(i,_)}static signedRightShift(i,_){return 0===_.length||0===i.length?i:_.sign?JSBI.__leftShiftByAbsolute(i,_):JSBI.__rightShiftByAbsolute(i,_)}static unsignedRightShift(){throw new TypeError(\"BigInts have no unsigned right shift; use >> instead\")}static lessThan(i,_){return 0>JSBI.__compareToBigInt(i,_)}static lessThanOrEqual(i,_){return 0>=JSBI.__compareToBigInt(i,_)}static greaterThan(i,_){return 0<JSBI.__compareToBigInt(i,_)}static greaterThanOrEqual(i,_){return 0<=JSBI.__compareToBigInt(i,_)}static equal(_,t){if(_.sign!==t.sign)return!1;if(_.length!==t.length)return!1;for(let e=0;e<_.length;e++)if(_.__digit(e)!==t.__digit(e))return!1;return!0}static notEqual(i,_){return!JSBI.equal(i,_)}static bitwiseAnd(i,_){var t=Math.max;if(!i.sign&&!_.sign)return JSBI.__absoluteAnd(i,_).__trim();if(i.sign&&_.sign){const e=t(i.length,_.length)+1;let n=JSBI.__absoluteSubOne(i,e);const g=JSBI.__absoluteSubOne(_);return n=JSBI.__absoluteOr(n,g,n),JSBI.__absoluteAddOne(n,!0,n).__trim()}return i.sign&&([i,_]=[_,i]),JSBI.__absoluteAndNot(i,JSBI.__absoluteSubOne(_)).__trim()}static bitwiseXor(i,_){var t=Math.max;if(!i.sign&&!_.sign)return JSBI.__absoluteXor(i,_).__trim();if(i.sign&&_.sign){const e=t(i.length,_.length),n=JSBI.__absoluteSubOne(i,e),g=JSBI.__absoluteSubOne(_);return JSBI.__absoluteXor(n,g,n).__trim()}const e=t(i.length,_.length)+1;i.sign&&([i,_]=[_,i]);let n=JSBI.__absoluteSubOne(_,e);return n=JSBI.__absoluteXor(n,i,n),JSBI.__absoluteAddOne(n,!0,n).__trim()}static bitwiseOr(i,_){var t=Math.max;const e=t(i.length,_.length);if(!i.sign&&!_.sign)return JSBI.__absoluteOr(i,_).__trim();if(i.sign&&_.sign){let t=JSBI.__absoluteSubOne(i,e);const n=JSBI.__absoluteSubOne(_);return t=JSBI.__absoluteAnd(t,n,t),JSBI.__absoluteAddOne(t,!0,t).__trim()}i.sign&&([i,_]=[_,i]);let n=JSBI.__absoluteSubOne(_,e);return n=JSBI.__absoluteAndNot(n,i,n),JSBI.__absoluteAddOne(n,!0,n).__trim()}static asIntN(_,t){var i=Math.floor;if(0===t.length)return t;if(_=i(_),0>_)throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");if(0===_)return JSBI.__zero();if(_>=JSBI.__kMaxLengthBits)return t;const e=0|(_+29)/30;if(t.length<e)return t;const g=t.__unsignedDigit(e-1),o=1<<(_-1)%30;if(t.length===e&&g<o)return t;if(!((g&o)===o))return JSBI.__truncateToNBits(_,t);if(!t.sign)return JSBI.__truncateAndSubFromPowerOfTwo(_,t,!0);if(0==(g&o-1)){for(let n=e-2;0<=n;n--)if(0!==t.__digit(n))return JSBI.__truncateAndSubFromPowerOfTwo(_,t,!1);return t.length===e&&g===o?t:JSBI.__truncateToNBits(_,t)}return JSBI.__truncateAndSubFromPowerOfTwo(_,t,!1)}static asUintN(i,_){var t=Math.floor;if(0===_.length)return _;if(i=t(i),0>i)throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");if(0===i)return JSBI.__zero();if(_.sign){if(i>JSBI.__kMaxLengthBits)throw new RangeError(\"BigInt too big\");return JSBI.__truncateAndSubFromPowerOfTwo(i,_,!1)}if(i>=JSBI.__kMaxLengthBits)return _;const e=0|(i+29)/30;if(_.length<e)return _;const g=i%30;if(_.length==e){if(0===g)return _;const i=_.__digit(e-1);if(0==i>>>g)return _}return JSBI.__truncateToNBits(i,_)}static ADD(i,_){if(i=JSBI.__toPrimitive(i),_=JSBI.__toPrimitive(_),\"string\"==typeof i)return\"string\"!=typeof _&&(_=_.toString()),i+_;if(\"string\"==typeof _)return i.toString()+_;if(i=JSBI.__toNumeric(i),_=JSBI.__toNumeric(_),JSBI.__isBigInt(i)&&JSBI.__isBigInt(_))return JSBI.add(i,_);if(\"number\"==typeof i&&\"number\"==typeof _)return i+_;throw new TypeError(\"Cannot mix BigInt and other types, use explicit conversions\")}static LT(i,_){return JSBI.__compare(i,_,0)}static LE(i,_){return JSBI.__compare(i,_,1)}static GT(i,_){return JSBI.__compare(i,_,2)}static GE(i,_){return JSBI.__compare(i,_,3)}static EQ(i,_){for(;;){if(JSBI.__isBigInt(i))return JSBI.__isBigInt(_)?JSBI.equal(i,_):JSBI.EQ(_,i);if(\"number\"==typeof i){if(JSBI.__isBigInt(_))return JSBI.__equalToNumber(_,i);if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"string\"==typeof i){if(JSBI.__isBigInt(_))return i=JSBI.__fromString(i),null!==i&&JSBI.equal(i,_);if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"boolean\"==typeof i){if(JSBI.__isBigInt(_))return JSBI.__equalToNumber(_,+i);if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"symbol\"==typeof i){if(JSBI.__isBigInt(_))return!1;if(\"object\"!=typeof _)return i==_;_=JSBI.__toPrimitive(_)}else if(\"object\"==typeof i){if(\"object\"==typeof _&&_.constructor!==JSBI)return i==_;i=JSBI.__toPrimitive(i)}else return i==_}}static NE(i,_){return!JSBI.EQ(i,_)}static __zero(){return new JSBI(0,!1)}static __oneDigit(i,_){const t=new JSBI(1,_);return t.__setDigit(0,i),t}__copy(){const _=new JSBI(this.length,this.sign);for(let t=0;t<this.length;t++)_[t]=this[t];return _}__trim(){let i=this.length,_=this[i-1];for(;0===_;)i--,_=this[i-1],this.pop();return 0===i&&(this.sign=!1),this}__initializeDigits(){for(let _=0;_<this.length;_++)this[_]=0}static __decideRounding(i,_,t,e){if(0<_)return-1;let n;if(0>_)n=-_-1;else{if(0===t)return-1;t--,e=i.__digit(t),n=29}let g=1<<n;if(0==(e&g))return-1;if(g-=1,0!=(e&g))return 1;for(;0<t;)if(t--,0!==i.__digit(t))return 1;return 0}static __fromDouble(i){JSBI.__kBitConversionDouble[0]=i;const _=2047&JSBI.__kBitConversionInts[1]>>>20,t=_-1023,e=(0|t/30)+1,n=new JSBI(e,0>i);let g=1048575&JSBI.__kBitConversionInts[1]|1048576,o=JSBI.__kBitConversionInts[0];const s=20,l=t%30;let r,a=0;if(l<20){const i=s-l;a=i+32,r=g>>>i,g=g<<32-i|o>>>i,o<<=32-i}else if(l===20)a=32,r=g,g=o,o=0;else{const i=l-s;a=32-i,r=g<<i|o>>>32-i,g=o<<i,o=0}n.__setDigit(e-1,r);for(let _=e-2;0<=_;_--)0<a?(a-=30,r=g>>>2,g=g<<30|o>>>2,o<<=30):r=0,n.__setDigit(_,r);return n.__trim()}static __isWhitespace(i){return!!(13>=i&&9<=i)||(159>=i?32==i:131071>=i?160==i||5760==i:196607>=i?(i&=131071,10>=i||40==i||41==i||47==i||95==i||4096==i):65279==i)}static __fromString(i,_=0){let t=0;const e=i.length;let n=0;if(n===e)return JSBI.__zero();let g=i.charCodeAt(n);for(;JSBI.__isWhitespace(g);){if(++n===e)return JSBI.__zero();g=i.charCodeAt(n)}if(43===g){if(++n===e)return null;g=i.charCodeAt(n),t=1}else if(45===g){if(++n===e)return null;g=i.charCodeAt(n),t=-1}if(0===_){if(_=10,48===g){if(++n===e)return JSBI.__zero();if(g=i.charCodeAt(n),88===g||120===g){if(_=16,++n===e)return null;g=i.charCodeAt(n)}else if(79===g||111===g){if(_=8,++n===e)return null;g=i.charCodeAt(n)}else if(66===g||98===g){if(_=2,++n===e)return null;g=i.charCodeAt(n)}}}else if(16===_&&48===g){if(++n===e)return JSBI.__zero();if(g=i.charCodeAt(n),88===g||120===g){if(++n===e)return null;g=i.charCodeAt(n)}}if(0!=t&&10!==_)return null;for(;48===g;){if(++n===e)return JSBI.__zero();g=i.charCodeAt(n)}const o=e-n;let s=JSBI.__kMaxBitsPerChar[_],l=JSBI.__kBitsPerCharTableMultiplier-1;if(o>1073741824/s)return null;const r=s*o+l>>>JSBI.__kBitsPerCharTableShift,a=new JSBI(0|(r+29)/30,!1),u=10>_?_:10,h=10<_?_-10:0;if(0==(_&_-1)){s>>=JSBI.__kBitsPerCharTableShift;const _=[],t=[];let o=!1;do{let l=0,r=0;for(;;){let _;if(g-48>>>0<u)_=g-48;else if((32|g)-97>>>0<h)_=(32|g)-87;else{o=!0;break}if(r+=s,l=l<<s|_,++n===e){o=!0;break}if(g=i.charCodeAt(n),30<r+s)break}_.push(l),t.push(r)}while(!o);JSBI.__fillFromParts(a,_,t)}else{a.__initializeDigits();let t=!1,o=0;do{let r=0,b=1;for(;;){let s;if(g-48>>>0<u)s=g-48;else if((32|g)-97>>>0<h)s=(32|g)-87;else{t=!0;break}const l=b*_;if(1073741823<l)break;if(b=l,r=r*_+s,o++,++n===e){t=!0;break}g=i.charCodeAt(n)}l=30*JSBI.__kBitsPerCharTableMultiplier-1;const D=0|(s*o+l>>>JSBI.__kBitsPerCharTableShift)/30;a.__inplaceMultiplyAdd(b,r,D)}while(!t)}if(n!==e){if(!JSBI.__isWhitespace(g))return null;for(n++;n<e;n++)if(g=i.charCodeAt(n),!JSBI.__isWhitespace(g))return null}return a.sign=-1==t,a.__trim()}static __fillFromParts(_,t,e){let n=0,g=0,o=0;for(let s=t.length-1;0<=s;s--){const i=t[s],l=e[s];g|=i<<o,o+=l,30===o?(_.__setDigit(n++,g),o=0,g=0):30<o&&(_.__setDigit(n++,1073741823&g),o-=30,g=i>>>l-o)}if(0!==g){if(n>=_.length)throw new Error(\"implementation bug\");_.__setDigit(n++,g)}for(;n<_.length;n++)_.__setDigit(n,0)}static __toStringBasePowerOfTwo(_,i){const t=_.length;let e=i-1;e=(85&e>>>1)+(85&e),e=(51&e>>>2)+(51&e),e=(15&e>>>4)+(15&e);const n=e,g=i-1,o=_.__digit(t-1),s=JSBI.__clz30(o);let l=0|(30*t-s+n-1)/n;if(_.sign&&l++,268435456<l)throw new Error(\"string too long\");const r=Array(l);let a=l-1,u=0,d=0;for(let e=0;e<t-1;e++){const i=_.__digit(e),t=(u|i<<d)&g;r[a--]=JSBI.__kConversionChars[t];const o=n-d;for(u=i>>>o,d=30-o;d>=n;)r[a--]=JSBI.__kConversionChars[u&g],u>>>=n,d-=n}const h=(u|o<<d)&g;for(r[a--]=JSBI.__kConversionChars[h],u=o>>>n-d;0!==u;)r[a--]=JSBI.__kConversionChars[u&g],u>>>=n;if(_.sign&&(r[a--]=\"-\"),-1!=a)throw new Error(\"implementation bug\");return r.join(\"\")}static __toStringGeneric(_,i,t){const e=_.length;if(0===e)return\"\";if(1===e){let e=_.__unsignedDigit(0).toString(i);return!1===t&&_.sign&&(e=\"-\"+e),e}const n=30*e-JSBI.__clz30(_.__digit(e-1)),g=JSBI.__kMaxBitsPerChar[i],o=g-1;let s=n*JSBI.__kBitsPerCharTableMultiplier;s+=o-1,s=0|s/o;const l=s+1>>1,r=JSBI.exponentiate(JSBI.__oneDigit(i,!1),JSBI.__oneDigit(l,!1));let a,u;const d=r.__unsignedDigit(0);if(1===r.length&&32767>=d){a=new JSBI(_.length,!1),a.__initializeDigits();let t=0;for(let e=2*_.length-1;0<=e;e--){const i=t<<15|_.__halfDigit(e);a.__setHalfDigit(e,0|i/d),t=0|i%d}u=t.toString(i)}else{const t=JSBI.__absoluteDivLarge(_,r,!0,!0);a=t.quotient;const e=t.remainder.__trim();u=JSBI.__toStringGeneric(e,i,!0)}a.__trim();let h=JSBI.__toStringGeneric(a,i,!0);for(;u.length<l;)u=\"0\"+u;return!1===t&&_.sign&&(h=\"-\"+h),h+u}static __unequalSign(i){return i?-1:1}static __absoluteGreater(i){return i?-1:1}static __absoluteLess(i){return i?1:-1}static __compareToBigInt(i,_){const t=i.sign;if(t!==_.sign)return JSBI.__unequalSign(t);const e=JSBI.__absoluteCompare(i,_);return 0<e?JSBI.__absoluteGreater(t):0>e?JSBI.__absoluteLess(t):0}static __compareToNumber(i,_){if(JSBI.__isOneDigitInt(_)){const t=i.sign,e=0>_;if(t!==e)return JSBI.__unequalSign(t);if(0===i.length){if(e)throw new Error(\"implementation bug\");return 0===_?0:-1}if(1<i.length)return JSBI.__absoluteGreater(t);const n=Math.abs(_),g=i.__unsignedDigit(0);return g>n?JSBI.__absoluteGreater(t):g<n?JSBI.__absoluteLess(t):0}return JSBI.__compareToDouble(i,_)}static __compareToDouble(i,_){if(_!==_)return _;if(_===1/0)return-1;if(_===-Infinity)return 1;const t=i.sign;if(t!==0>_)return JSBI.__unequalSign(t);if(0===_)throw new Error(\"implementation bug: should be handled elsewhere\");if(0===i.length)return-1;JSBI.__kBitConversionDouble[0]=_;const e=2047&JSBI.__kBitConversionInts[1]>>>20;if(2047==e)throw new Error(\"implementation bug: handled elsewhere\");const n=e-1023;if(0>n)return JSBI.__absoluteGreater(t);const g=i.length;let o=i.__digit(g-1);const s=JSBI.__clz30(o),l=30*g-s,r=n+1;if(l<r)return JSBI.__absoluteLess(t);if(l>r)return JSBI.__absoluteGreater(t);let a=1048576|1048575&JSBI.__kBitConversionInts[1],u=JSBI.__kBitConversionInts[0];const d=20,h=29-s;if(h!==(0|(l-1)%30))throw new Error(\"implementation bug\");let m,b=0;if(20>h){const i=d-h;b=i+32,m=a>>>i,a=a<<32-i|u>>>i,u<<=32-i}else if(20===h)b=32,m=a,a=u,u=0;else{const i=h-d;b=32-i,m=a<<i|u>>>32-i,a=u<<i,u=0}if(o>>>=0,m>>>=0,o>m)return JSBI.__absoluteGreater(t);if(o<m)return JSBI.__absoluteLess(t);for(let e=g-2;0<=e;e--){0<b?(b-=30,m=a>>>2,a=a<<30|u>>>2,u<<=30):m=0;const _=i.__unsignedDigit(e);if(_>m)return JSBI.__absoluteGreater(t);if(_<m)return JSBI.__absoluteLess(t)}if(0!==a||0!==u){if(0===b)throw new Error(\"implementation bug\");return JSBI.__absoluteLess(t)}return 0}static __equalToNumber(i,_){var t=Math.abs;return JSBI.__isOneDigitInt(_)?0===_?0===i.length:1===i.length&&i.sign===0>_&&i.__unsignedDigit(0)===t(_):0===JSBI.__compareToDouble(i,_)}static __comparisonResultToBool(i,_){return 0===_?0>i:1===_?0>=i:2===_?0<i:3===_?0<=i:void 0}static __compare(i,_,t){if(i=JSBI.__toPrimitive(i),_=JSBI.__toPrimitive(_),\"string\"==typeof i&&\"string\"==typeof _)switch(t){case 0:return i<_;case 1:return i<=_;case 2:return i>_;case 3:return i>=_;}if(JSBI.__isBigInt(i)&&\"string\"==typeof _)return _=JSBI.__fromString(_),null!==_&&JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i,_),t);if(\"string\"==typeof i&&JSBI.__isBigInt(_))return i=JSBI.__fromString(i),null!==i&&JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i,_),t);if(i=JSBI.__toNumeric(i),_=JSBI.__toNumeric(_),JSBI.__isBigInt(i)){if(JSBI.__isBigInt(_))return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(i,_),t);if(\"number\"!=typeof _)throw new Error(\"implementation bug\");return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(i,_),t)}if(\"number\"!=typeof i)throw new Error(\"implementation bug\");if(JSBI.__isBigInt(_))return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(_,i),2^t);if(\"number\"!=typeof _)throw new Error(\"implementation bug\");return 0===t?i<_:1===t?i<=_:2===t?i>_:3===t?i>=_:void 0}__clzmsd(){return JSBI.__clz30(this.__digit(this.length-1))}static __absoluteAdd(_,t,e){if(_.length<t.length)return JSBI.__absoluteAdd(t,_,e);if(0===_.length)return _;if(0===t.length)return _.sign===e?_:JSBI.unaryMinus(_);let n=_.length;(0===_.__clzmsd()||t.length===_.length&&0===t.__clzmsd())&&n++;const g=new JSBI(n,e);let o=0,s=0;for(;s<t.length;s++){const i=_.__digit(s)+t.__digit(s)+o;o=i>>>30,g.__setDigit(s,1073741823&i)}for(;s<_.length;s++){const i=_.__digit(s)+o;o=i>>>30,g.__setDigit(s,1073741823&i)}return s<g.length&&g.__setDigit(s,o),g.__trim()}static __absoluteSub(_,t,e){if(0===_.length)return _;if(0===t.length)return _.sign===e?_:JSBI.unaryMinus(_);const n=new JSBI(_.length,e);let g=0,o=0;for(;o<t.length;o++){const i=_.__digit(o)-t.__digit(o)-g;g=1&i>>>30,n.__setDigit(o,1073741823&i)}for(;o<_.length;o++){const i=_.__digit(o)-g;g=1&i>>>30,n.__setDigit(o,1073741823&i)}return n.__trim()}static __absoluteAddOne(_,i,t=null){const e=_.length;null===t?t=new JSBI(e,i):t.sign=i;let n=1;for(let g=0;g<e;g++){const i=_.__digit(g)+n;n=i>>>30,t.__setDigit(g,1073741823&i)}return 0!=n&&t.__setDigitGrow(e,1),t}static __absoluteSubOne(_,t){const e=_.length;t=t||e;const n=new JSBI(t,!1);let g=1;for(let o=0;o<e;o++){const i=_.__digit(o)-g;g=1&i>>>30,n.__setDigit(o,1073741823&i)}if(0!=g)throw new Error(\"implementation bug\");for(let g=e;g<t;g++)n.__setDigit(g,0);return n}static __absoluteAnd(_,t,e=null){let n=_.length,g=t.length,o=g;if(n<g){o=n;const i=_,e=n;_=t,n=g,t=i,g=e}let s=o;null===e?e=new JSBI(s,!1):s=e.length;let l=0;for(;l<o;l++)e.__setDigit(l,_.__digit(l)&t.__digit(l));for(;l<s;l++)e.__setDigit(l,0);return e}static __absoluteAndNot(_,t,e=null){const n=_.length,g=t.length;let o=g;n<g&&(o=n);let s=n;null===e?e=new JSBI(s,!1):s=e.length;let l=0;for(;l<o;l++)e.__setDigit(l,_.__digit(l)&~t.__digit(l));for(;l<n;l++)e.__setDigit(l,_.__digit(l));for(;l<s;l++)e.__setDigit(l,0);return e}static __absoluteOr(_,t,e=null){let n=_.length,g=t.length,o=g;if(n<g){o=n;const i=_,e=n;_=t,n=g,t=i,g=e}let s=n;null===e?e=new JSBI(s,!1):s=e.length;let l=0;for(;l<o;l++)e.__setDigit(l,_.__digit(l)|t.__digit(l));for(;l<n;l++)e.__setDigit(l,_.__digit(l));for(;l<s;l++)e.__setDigit(l,0);return e}static __absoluteXor(_,t,e=null){let n=_.length,g=t.length,o=g;if(n<g){o=n;const i=_,e=n;_=t,n=g,t=i,g=e}let s=n;null===e?e=new JSBI(s,!1):s=e.length;let l=0;for(;l<o;l++)e.__setDigit(l,_.__digit(l)^t.__digit(l));for(;l<n;l++)e.__setDigit(l,_.__digit(l));for(;l<s;l++)e.__setDigit(l,0);return e}static __absoluteCompare(_,t){const e=_.length-t.length;if(0!=e)return e;let n=_.length-1;for(;0<=n&&_.__digit(n)===t.__digit(n);)n--;return 0>n?0:_.__unsignedDigit(n)>t.__unsignedDigit(n)?1:-1}static __multiplyAccumulate(_,t,e,n){if(0===t)return;const g=32767&t,o=t>>>15;let s=0,l=0;for(let r,a=0;a<_.length;a++,n++){r=e.__digit(n);const i=_.__digit(a),t=32767&i,u=i>>>15,d=JSBI.__imul(t,g),h=JSBI.__imul(t,o),m=JSBI.__imul(u,g),b=JSBI.__imul(u,o);r+=l+d+s,s=r>>>30,r&=1073741823,r+=((32767&h)<<15)+((32767&m)<<15),s+=r>>>30,l=b+(h>>>15)+(m>>>15),e.__setDigit(n,1073741823&r)}for(;0!=s||0!==l;n++){let i=e.__digit(n);i+=s+l,l=0,s=i>>>30,e.__setDigit(n,1073741823&i)}}static __internalMultiplyAdd(_,t,e,g,o){let s=e,l=0;for(let n=0;n<g;n++){const i=_.__digit(n),e=JSBI.__imul(32767&i,t),g=JSBI.__imul(i>>>15,t),a=e+((32767&g)<<15)+l+s;s=a>>>30,l=g>>>15,o.__setDigit(n,1073741823&a)}if(o.length>g)for(o.__setDigit(g++,s+l);g<o.length;)o.__setDigit(g++,0);else if(0!==s+l)throw new Error(\"implementation bug\")}__inplaceMultiplyAdd(i,_,t){t>this.length&&(t=this.length);const e=32767&i,n=i>>>15;let g=0,o=_;for(let s=0;s<t;s++){const i=this.__digit(s),_=32767&i,t=i>>>15,l=JSBI.__imul(_,e),r=JSBI.__imul(_,n),a=JSBI.__imul(t,e),u=JSBI.__imul(t,n);let d=o+l+g;g=d>>>30,d&=1073741823,d+=((32767&r)<<15)+((32767&a)<<15),g+=d>>>30,o=u+(r>>>15)+(a>>>15),this.__setDigit(s,1073741823&d)}if(0!=g||0!==o)throw new Error(\"implementation bug\")}static __absoluteDivSmall(_,t,e=null){null===e&&(e=new JSBI(_.length,!1));let n=0;for(let g,o=2*_.length-1;0<=o;o-=2){g=(n<<15|_.__halfDigit(o))>>>0;const i=0|g/t;n=0|g%t,g=(n<<15|_.__halfDigit(o-1))>>>0;const s=0|g/t;n=0|g%t,e.__setDigit(o>>>1,i<<15|s)}return e}static __absoluteModSmall(_,t){let e=0;for(let n=2*_.length-1;0<=n;n--){const i=(e<<15|_.__halfDigit(n))>>>0;e=0|i%t}return e}static __absoluteDivLarge(i,_,t,e){const g=_.__halfDigitLength(),n=_.length,o=i.__halfDigitLength()-g;let s=null;t&&(s=new JSBI(o+2>>>1,!1),s.__initializeDigits());const l=new JSBI(g+2>>>1,!1);l.__initializeDigits();const r=JSBI.__clz15(_.__halfDigit(g-1));0<r&&(_=JSBI.__specialLeftShift(_,r,0));const a=JSBI.__specialLeftShift(i,r,1),u=_.__halfDigit(g-1);let d=0;for(let r,h=o;0<=h;h--){r=32767;const i=a.__halfDigit(h+g);if(i!==u){const t=(i<<15|a.__halfDigit(h+g-1))>>>0;r=0|t/u;let e=0|t%u;const n=_.__halfDigit(g-2),o=a.__halfDigit(h+g-2);for(;JSBI.__imul(r,n)>>>0>(e<<16|o)>>>0&&(r--,e+=u,!(32767<e)););}JSBI.__internalMultiplyAdd(_,r,0,n,l);let e=a.__inplaceSub(l,h,g+1);0!==e&&(e=a.__inplaceAdd(_,h,g),a.__setHalfDigit(h+g,32767&a.__halfDigit(h+g)+e),r--),t&&(1&h?d=r<<15:s.__setDigit(h>>>1,d|r))}if(e)return a.__inplaceRightShift(r),t?{quotient:s,remainder:a}:a;if(t)return s;throw new Error(\"unreachable\")}static __clz15(i){return JSBI.__clz30(i)-15}__inplaceAdd(_,t,e){let n=0;for(let g=0;g<e;g++){const i=this.__halfDigit(t+g)+_.__halfDigit(g)+n;n=i>>>15,this.__setHalfDigit(t+g,32767&i)}return n}__inplaceSub(_,t,e){let n=0;if(1&t){t>>=1;let g=this.__digit(t),o=32767&g,s=0;for(;s<e-1>>>1;s++){const i=_.__digit(s),e=(g>>>15)-(32767&i)-n;n=1&e>>>15,this.__setDigit(t+s,(32767&e)<<15|32767&o),g=this.__digit(t+s+1),o=(32767&g)-(i>>>15)-n,n=1&o>>>15}const i=_.__digit(s),l=(g>>>15)-(32767&i)-n;n=1&l>>>15,this.__setDigit(t+s,(32767&l)<<15|32767&o);if(t+s+1>=this.length)throw new RangeError(\"out of bounds\");0==(1&e)&&(g=this.__digit(t+s+1),o=(32767&g)-(i>>>15)-n,n=1&o>>>15,this.__setDigit(t+_.length,1073709056&g|32767&o))}else{t>>=1;let g=0;for(;g<_.length-1;g++){const i=this.__digit(t+g),e=_.__digit(g),o=(32767&i)-(32767&e)-n;n=1&o>>>15;const s=(i>>>15)-(e>>>15)-n;n=1&s>>>15,this.__setDigit(t+g,(32767&s)<<15|32767&o)}const i=this.__digit(t+g),o=_.__digit(g),s=(32767&i)-(32767&o)-n;n=1&s>>>15;let l=0;0==(1&e)&&(l=(i>>>15)-(o>>>15)-n,n=1&l>>>15),this.__setDigit(t+g,(32767&l)<<15|32767&s)}return n}__inplaceRightShift(_){if(0===_)return;let t=this.__digit(0)>>>_;const e=this.length-1;for(let n=0;n<e;n++){const i=this.__digit(n+1);this.__setDigit(n,1073741823&i<<30-_|t),t=i>>>_}this.__setDigit(e,t)}static __specialLeftShift(_,t,e){const g=_.length,n=new JSBI(g+e,!1);if(0===t){for(let t=0;t<g;t++)n.__setDigit(t,_.__digit(t));return 0<e&&n.__setDigit(g,0),n}let o=0;for(let s=0;s<g;s++){const i=_.__digit(s);n.__setDigit(s,1073741823&i<<t|o),o=i>>>30-t}return 0<e&&n.__setDigit(g,o),n}static __leftShiftByAbsolute(_,i){const t=JSBI.__toShiftAmount(i);if(0>t)throw new RangeError(\"BigInt too big\");const e=0|t/30,n=t%30,g=_.length,o=0!==n&&0!=_.__digit(g-1)>>>30-n,s=g+e+(o?1:0),l=new JSBI(s,_.sign);if(0===n){let t=0;for(;t<e;t++)l.__setDigit(t,0);for(;t<s;t++)l.__setDigit(t,_.__digit(t-e))}else{let t=0;for(let _=0;_<e;_++)l.__setDigit(_,0);for(let o=0;o<g;o++){const i=_.__digit(o);l.__setDigit(o+e,1073741823&i<<n|t),t=i>>>30-n}if(o)l.__setDigit(g+e,t);else if(0!==t)throw new Error(\"implementation bug\")}return l.__trim()}static __rightShiftByAbsolute(_,i){const t=_.length,e=_.sign,n=JSBI.__toShiftAmount(i);if(0>n)return JSBI.__rightShiftByMaximum(e);const g=0|n/30,o=n%30;let s=t-g;if(0>=s)return JSBI.__rightShiftByMaximum(e);let l=!1;if(e){if(0!=(_.__digit(g)&(1<<o)-1))l=!0;else for(let t=0;t<g;t++)if(0!==_.__digit(t)){l=!0;break}}if(l&&0===o){const i=_.__digit(t-1);0==~i&&s++}let r=new JSBI(s,e);if(0===o){r.__setDigit(s-1,0);for(let e=g;e<t;e++)r.__setDigit(e-g,_.__digit(e))}else{let e=_.__digit(g)>>>o;const n=t-g-1;for(let t=0;t<n;t++){const i=_.__digit(t+g+1);r.__setDigit(t,1073741823&i<<30-o|e),e=i>>>o}r.__setDigit(n,e)}return l&&(r=JSBI.__absoluteAddOne(r,!0,r)),r.__trim()}static __rightShiftByMaximum(i){return i?JSBI.__oneDigit(1,!0):JSBI.__zero()}static __toShiftAmount(i){if(1<i.length)return-1;const _=i.__unsignedDigit(0);return _>JSBI.__kMaxLengthBits?-1:_}static __toPrimitive(i,_=\"default\"){if(\"object\"!=typeof i)return i;if(i.constructor===JSBI)return i;if(\"undefined\"!=typeof Symbol&&\"symbol\"==typeof Symbol.toPrimitive){const t=i[Symbol.toPrimitive];if(t){const i=t(_);if(\"object\"!=typeof i)return i;throw new TypeError(\"Cannot convert object to primitive value\")}}const t=i.valueOf;if(t){const _=t.call(i);if(\"object\"!=typeof _)return _}const e=i.toString;if(e){const _=e.call(i);if(\"object\"!=typeof _)return _}throw new TypeError(\"Cannot convert object to primitive value\")}static __toNumeric(i){return JSBI.__isBigInt(i)?i:+i}static __isBigInt(i){return\"object\"==typeof i&&null!==i&&i.constructor===JSBI}static __truncateToNBits(i,_){const t=0|(i+29)/30,e=new JSBI(t,_.sign),n=t-1;for(let t=0;t<n;t++)e.__setDigit(t,_.__digit(t));let g=_.__digit(n);if(0!=i%30){const _=32-i%30;g=g<<_>>>_}return e.__setDigit(n,g),e.__trim()}static __truncateAndSubFromPowerOfTwo(_,t,e){var n=Math.min;const g=0|(_+29)/30,o=new JSBI(g,e);let s=0;const l=g-1;let a=0;for(const i=n(l,t.length);s<i;s++){const i=0-t.__digit(s)-a;a=1&i>>>30,o.__setDigit(s,1073741823&i)}for(;s<l;s++)o.__setDigit(s,0|1073741823&-a);let u=l<t.length?t.__digit(l):0;const d=_%30;let h;if(0==d)h=0-u-a,h&=1073741823;else{const i=32-d;u=u<<i>>>i;const _=1<<32-i;h=_-u-a,h&=_-1}return o.__setDigit(l,h),o.__trim()}__digit(_){return this[_]}__unsignedDigit(_){return this[_]>>>0}__setDigit(_,i){this[_]=0|i}__setDigitGrow(_,i){this[_]=0|i}__halfDigitLength(){const i=this.length;return 32767>=this.__unsignedDigit(i-1)?2*i-1:2*i}__halfDigit(_){return 32767&this[_>>>1]>>>15*(1&_)}__setHalfDigit(_,i){const t=_>>>1,e=this.__digit(t),n=1&_?32767&e|i<<15:1073709056&e|32767&i;this.__setDigit(t,n)}static __digitPow(i,_){let t=1;for(;0<_;)1&_&&(t*=i),_>>>=1,i*=i;return t}static __isOneDigitInt(i){return(1073741823&i)===i}}JSBI.__kMaxLength=33554432,JSBI.__kMaxLengthBits=JSBI.__kMaxLength<<5,JSBI.__kMaxBitsPerChar=[0,0,32,51,64,75,83,90,96,102,107,111,115,119,122,126,128,131,134,136,139,141,143,145,147,149,151,153,154,156,158,159,160,162,163,165,166],JSBI.__kBitsPerCharTableShift=5,JSBI.__kBitsPerCharTableMultiplier=1<<JSBI.__kBitsPerCharTableShift,JSBI.__kConversionChars=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"],JSBI.__kBitConversionBuffer=new ArrayBuffer(8),JSBI.__kBitConversionDouble=new Float64Array(JSBI.__kBitConversionBuffer),JSBI.__kBitConversionInts=new Int32Array(JSBI.__kBitConversionBuffer),JSBI.__clz30=Math.clz32?function(i){return Math.clz32(i)-2}:function(i){return 0===i?30:0|29-(0|Math.log(i>>>0)/Math.LN2)},JSBI.__imul=Math.imul||function(i,_){return 0|i*_};/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (JSBI);\n//# sourceMappingURL=jsbi.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2pzYmlAMy4yLjUvbm9kZV9tb2R1bGVzL2pzYmkvZGlzdC9qc2JpLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEseUJBQXlCLGlCQUFpQixpR0FBaUcsaUJBQWlCLG1DQUFtQyx1QkFBdUIsOEJBQThCLG1GQUFtRix1SEFBdUgsNEJBQTRCLHVCQUF1Qiw2QkFBNkIsc0VBQXNFLFNBQVMsd0VBQXdFLHVCQUF1QixpQ0FBaUMsOEJBQThCLHNCQUFzQix3REFBd0QsZ0JBQWdCLG9CQUFvQiw0REFBNEQsOEJBQThCLGVBQWUsd0ZBQXdGLDhHQUE4RyxtQkFBbUIsaUJBQWlCLGtCQUFrQixVQUFVLDZCQUE2QixtQkFBbUIsa0RBQWtELHNDQUFzQyxvQkFBb0IsWUFBWSxvQkFBb0IsUUFBUSxhQUFhLDZCQUE2Qiw4REFBOEQsU0FBUyxvREFBb0QsdUNBQXVDLDhHQUE4Ryw2QkFBNkIscUhBQXFILHFCQUFxQix5QkFBeUIsbUJBQW1CLHdCQUF3QixxQkFBcUIsNEVBQTRFLHlCQUF5Qiw0REFBNEQsNkNBQTZDLHlCQUF5QiwwRkFBMEYscURBQXFELDJCQUEyQixrQkFBa0IsbUVBQW1FLG1DQUFtQyxzREFBc0QsdUJBQXVCLGdCQUFnQiw2QkFBNkIsZUFBZSwwQkFBMEIsTUFBTSx5RUFBeUUsU0FBUyxxQkFBcUIseUJBQXlCLHlCQUF5Qix3QkFBd0IsbUNBQW1DLG9DQUFvQyx1QkFBdUIsWUFBWSxXQUFXLGtEQUFrRCxrQkFBa0IsbUJBQW1CLHlEQUF5RCxzREFBc0QsK0NBQStDLE1BQU0sMkJBQTJCLGdEQUFnRCxvQ0FBb0MsMENBQTBDLDJCQUEyQixzQkFBc0IseURBQXlELDBDQUEwQyw2QkFBNkIsMkJBQTJCLDhCQUE4QixxQ0FBcUMscURBQXFELDJDQUEyQyxnQ0FBZ0MsZ0JBQWdCLGVBQWUsZ0lBQWdJLHFCQUFxQixlQUFlLGdJQUFnSSxzQkFBc0IsNEdBQTRHLDZCQUE2Qiw0R0FBNEcsNEJBQTRCLDJEQUEy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RCxzQ0FBc0MsY0FBYyxpRUFBZSxJQUFJLEVBQUM7QUFDaHoyQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BleGFtcGxlcy9sb2dpbi13aXRoLXBhc3Nwb3J0LWJyaWRnZS8uLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vanNiaUAzLjIuNS9ub2RlX21vZHVsZXMvanNiaS9kaXN0L2pzYmkubWpzPzYwMGMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgSlNCSSBleHRlbmRzIEFycmF5e2NvbnN0cnVjdG9yKGksXyl7aWYoc3VwZXIoaSksdGhpcy5zaWduPV8saT5KU0JJLl9fa01heExlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk1heGltdW0gQmlnSW50IHNpemUgZXhjZWVkZWRcIil9c3RhdGljIEJpZ0ludChpKXt2YXIgXz1NYXRoLmZsb29yLHQ9TnVtYmVyLmlzRmluaXRlO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBpKXtpZigwPT09aSlyZXR1cm4gSlNCSS5fX3plcm8oKTtpZihKU0JJLl9faXNPbmVEaWdpdEludChpKSlyZXR1cm4gMD5pP0pTQkkuX19vbmVEaWdpdCgtaSwhMCk6SlNCSS5fX29uZURpZ2l0KGksITEpO2lmKCF0KGkpfHxfKGkpIT09aSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSBudW1iZXIgXCIraStcIiBjYW5ub3QgYmUgY29udmVydGVkIHRvIEJpZ0ludCBiZWNhdXNlIGl0IGlzIG5vdCBhbiBpbnRlZ2VyXCIpO3JldHVybiBKU0JJLl9fZnJvbURvdWJsZShpKX1pZihcInN0cmluZ1wiPT10eXBlb2YgaSl7Y29uc3QgXz1KU0JJLl9fZnJvbVN0cmluZyhpKTtpZihudWxsPT09Xyl0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJDYW5ub3QgY29udmVydCBcIitpK1wiIHRvIGEgQmlnSW50XCIpO3JldHVybiBffWlmKFwiYm9vbGVhblwiPT10eXBlb2YgaSlyZXR1cm4hMD09PWk/SlNCSS5fX29uZURpZ2l0KDEsITEpOkpTQkkuX196ZXJvKCk7aWYoXCJvYmplY3RcIj09dHlwZW9mIGkpe2lmKGkuY29uc3RydWN0b3I9PT1KU0JJKXJldHVybiBpO2NvbnN0IF89SlNCSS5fX3RvUHJpbWl0aXZlKGkpO3JldHVybiBKU0JJLkJpZ0ludChfKX10aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgXCIraStcIiB0byBhIEJpZ0ludFwiKX10b0RlYnVnU3RyaW5nKCl7Y29uc3QgaT1bXCJCaWdJbnRbXCJdO2Zvcihjb25zdCBfIG9mIHRoaXMpaS5wdXNoKChfPyhfPj4+MCkudG9TdHJpbmcoMTYpOl8pK1wiLCBcIik7cmV0dXJuIGkucHVzaChcIl1cIiksaS5qb2luKFwiXCIpfXRvU3RyaW5nKGk9MTApe2lmKDI+aXx8MzY8aSl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInRvU3RyaW5nKCkgcmFkaXggYXJndW1lbnQgbXVzdCBiZSBiZXR3ZWVuIDIgYW5kIDM2XCIpO3JldHVybiAwPT09dGhpcy5sZW5ndGg/XCIwXCI6MD09KGkmaS0xKT9KU0JJLl9fdG9TdHJpbmdCYXNlUG93ZXJPZlR3byh0aGlzLGkpOkpTQkkuX190b1N0cmluZ0dlbmVyaWModGhpcyxpLCExKX1zdGF0aWMgdG9OdW1iZXIoaSl7Y29uc3QgXz1pLmxlbmd0aDtpZigwPT09XylyZXR1cm4gMDtpZigxPT09Xyl7Y29uc3QgXz1pLl9fdW5zaWduZWREaWdpdCgwKTtyZXR1cm4gaS5zaWduPy1fOl99Y29uc3QgdD1pLl9fZGlnaXQoXy0xKSxlPUpTQkkuX19jbHozMCh0KSxuPTMwKl8tZTtpZigxMDI0PG4pcmV0dXJuIGkuc2lnbj8tSW5maW5pdHk6MS8wO2xldCBnPW4tMSxvPXQscz1fLTE7Y29uc3QgbD1lKzM7bGV0IHI9MzI9PT1sPzA6bzw8bDtyPj4+PTEyO2NvbnN0IGE9bC0xMjtsZXQgdT0xMjw9bD8wOm88PDIwK2wsZD0yMCtsO2ZvcigwPGEmJjA8cyYmKHMtLSxvPWkuX19kaWdpdChzKSxyfD1vPj4+MzAtYSx1PW88PGErMixkPWErMik7MDxkJiYwPHM7KXMtLSxvPWkuX19kaWdpdChzKSx1fD0zMDw9ZD9vPDxkLTMwOm8+Pj4zMC1kLGQtPTMwO2NvbnN0IGg9SlNCSS5fX2RlY2lkZVJvdW5kaW5nKGksZCxzLG8pO2lmKCgxPT09aHx8MD09PWgmJjE9PSgxJnUpKSYmKHU9dSsxPj4+MCwwPT09dSYmKHIrKywwIT1yPj4+MjAmJihyPTAsZysrLDEwMjM8ZykpKSlyZXR1cm4gaS5zaWduPy1JbmZpbml0eToxLzA7Y29uc3QgbT1pLnNpZ24/LTIxNDc0ODM2NDg6MDtyZXR1cm4gZz1nKzEwMjM8PDIwLEpTQkkuX19rQml0Q29udmVyc2lvbkludHNbMV09bXxnfHIsSlNCSS5fX2tCaXRDb252ZXJzaW9uSW50c1swXT11LEpTQkkuX19rQml0Q29udmVyc2lvbkRvdWJsZVswXX1zdGF0aWMgdW5hcnlNaW51cyhpKXtpZigwPT09aS5sZW5ndGgpcmV0dXJuIGk7Y29uc3QgXz1pLl9fY29weSgpO3JldHVybiBfLnNpZ249IWkuc2lnbixffXN0YXRpYyBiaXR3aXNlTm90KGkpe3JldHVybiBpLnNpZ24/SlNCSS5fX2Fic29sdXRlU3ViT25lKGkpLl9fdHJpbSgpOkpTQkkuX19hYnNvbHV0ZUFkZE9uZShpLCEwKX1zdGF0aWMgZXhwb25lbnRpYXRlKGksXyl7aWYoXy5zaWduKXRocm93IG5ldyBSYW5nZUVycm9yKFwiRXhwb25lbnQgbXVzdCBiZSBwb3NpdGl2ZVwiKTtpZigwPT09Xy5sZW5ndGgpcmV0dXJuIEpTQkkuX19vbmVEaWdpdCgxLCExKTtpZigwPT09aS5sZW5ndGgpcmV0dXJuIGk7aWYoMT09PWkubGVuZ3RoJiYxPT09aS5fX2RpZ2l0KDApKXJldHVybiBpLnNpZ24mJjA9PSgxJl8uX19kaWdpdCgwKSk/SlNCSS51bmFyeU1pbnVzKGkpOmk7aWYoMTxfLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJpZ0ludCB0b28gYmlnXCIpO2xldCB0PV8uX191bnNpZ25lZERpZ2l0KDApO2lmKDE9PT10KXJldHVybiBpO2lmKHQ+PUpTQkkuX19rTWF4TGVuZ3RoQml0cyl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJpZ0ludCB0b28gYmlnXCIpO2lmKDE9PT1pLmxlbmd0aCYmMj09PWkuX19kaWdpdCgwKSl7Y29uc3QgXz0xKygwfHQvMzApLGU9aS5zaWduJiYwIT0oMSZ0KSxuPW5ldyBKU0JJKF8sZSk7bi5fX2luaXRpYWxpemVEaWdpdHMoKTtjb25zdCBnPTE8PHQlMzA7cmV0dXJuIG4uX19zZXREaWdpdChfLTEsZyksbn1sZXQgZT1udWxsLG49aTtmb3IoMCE9KDEmdCkmJihlPWkpLHQ+Pj0xOzAhPT10O3Q+Pj0xKW49SlNCSS5tdWx0aXBseShuLG4pLDAhPSgxJnQpJiYobnVsbD09PWU/ZT1uOmU9SlNCSS5tdWx0aXBseShlLG4pKTtyZXR1cm4gZX1zdGF0aWMgbXVsdGlwbHkoXyx0KXtpZigwPT09Xy5sZW5ndGgpcmV0dXJuIF87aWYoMD09PXQubGVuZ3RoKXJldHVybiB0O2xldCBpPV8ubGVuZ3RoK3QubGVuZ3RoOzMwPD1fLl9fY2x6bXNkKCkrdC5fX2Nsem1zZCgpJiZpLS07Y29uc3QgZT1uZXcgSlNCSShpLF8uc2lnbiE9PXQuc2lnbik7ZS5fX2luaXRpYWxpemVEaWdpdHMoKTtmb3IobGV0IG49MDtuPF8ubGVuZ3RoO24rKylKU0JJLl9fbXVsdGlwbHlBY2N1bXVsYXRlKHQsXy5fX2RpZ2l0KG4pLGUsbik7cmV0dXJuIGUuX190cmltKCl9c3RhdGljIGRpdmlkZShpLF8pe2lmKDA9PT1fLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkRpdmlzaW9uIGJ5IHplcm9cIik7aWYoMD5KU0JJLl9fYWJzb2x1dGVDb21wYXJlKGksXykpcmV0dXJuIEpTQkkuX196ZXJvKCk7Y29uc3QgdD1pLnNpZ24hPT1fLnNpZ24sZT1fLl9fdW5zaWduZWREaWdpdCgwKTtsZXQgbjtpZigxPT09Xy5sZW5ndGgmJjMyNzY3Pj1lKXtpZigxPT09ZSlyZXR1cm4gdD09PWkuc2lnbj9pOkpTQkkudW5hcnlNaW51cyhpKTtuPUpTQkkuX19hYnNvbHV0ZURpdlNtYWxsKGksZSxudWxsKX1lbHNlIG49SlNCSS5fX2Fic29sdXRlRGl2TGFyZ2UoaSxfLCEwLCExKTtyZXR1cm4gbi5zaWduPXQsbi5fX3RyaW0oKX1zdGF0aWMgcmVtYWluZGVyKGksXyl7aWYoMD09PV8ubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiRGl2aXNpb24gYnkgemVyb1wiKTtpZigwPkpTQkkuX19hYnNvbHV0ZUNvbXBhcmUoaSxfKSlyZXR1cm4gaTtjb25zdCB0PV8uX191bnNpZ25lZERpZ2l0KDApO2lmKDE9PT1fLmxlbmd0aCYmMzI3Njc+PXQpe2lmKDE9PT10KXJldHVybiBKU0JJLl9femVybygpO2NvbnN0IF89SlNCSS5fX2Fic29sdXRlTW9kU21hbGwoaSx0KTtyZXR1cm4gMD09PV8/SlNCSS5fX3plcm8oKTpKU0JJLl9fb25lRGlnaXQoXyxpLnNpZ24pfWNvbnN0IGU9SlNCSS5fX2Fic29sdXRlRGl2TGFyZ2UoaSxfLCExLCEwKTtyZXR1cm4gZS5zaWduPWkuc2lnbixlLl9fdHJpbSgpfXN0YXRpYyBhZGQoaSxfKXtjb25zdCB0PWkuc2lnbjtyZXR1cm4gdD09PV8uc2lnbj9KU0JJLl9fYWJzb2x1dGVBZGQoaSxfLHQpOjA8PUpTQkkuX19hYnNvbHV0ZUNvbXBhcmUoaSxfKT9KU0JJLl9fYWJzb2x1dGVTdWIoaSxfLHQpOkpTQkkuX19hYnNvbHV0ZVN1YihfLGksIXQpfXN0YXRpYyBzdWJ0cmFjdChpLF8pe2NvbnN0IHQ9aS5zaWduO3JldHVybiB0PT09Xy5zaWduPzA8PUpTQkkuX19hYnNvbHV0ZUNvbXBhcmUoaSxfKT9KU0JJLl9fYWJzb2x1dGVTdWIoaSxfLHQpOkpTQkkuX19hYnNvbHV0ZVN1YihfLGksIXQpOkpTQkkuX19hYnNvbHV0ZUFkZChpLF8sdCl9c3RhdGljIGxlZnRTaGlmdChpLF8pe3JldHVybiAwPT09Xy5sZW5ndGh8fDA9PT1pLmxlbmd0aD9pOl8uc2lnbj9KU0JJLl9fcmlnaHRTaGlmdEJ5QWJzb2x1dGUoaSxfKTpKU0JJLl9fbGVmdFNoaWZ0QnlBYnNvbHV0ZShpLF8pfXN0YXRpYyBzaWduZWRSaWdodFNoaWZ0KGksXyl7cmV0dXJuIDA9PT1fLmxlbmd0aHx8MD09PWkubGVuZ3RoP2k6Xy5zaWduP0pTQkkuX19sZWZ0U2hpZnRCeUFic29sdXRlKGksXyk6SlNCSS5fX3JpZ2h0U2hpZnRCeUFic29sdXRlKGksXyl9c3RhdGljIHVuc2lnbmVkUmlnaHRTaGlmdCgpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJCaWdJbnRzIGhhdmUgbm8gdW5zaWduZWQgcmlnaHQgc2hpZnQ7IHVzZSA+PiBpbnN0ZWFkXCIpfXN0YXRpYyBsZXNzVGhhbihpLF8pe3JldHVybiAwPkpTQkkuX19jb21wYXJlVG9CaWdJbnQoaSxfKX1zdGF0aWMgbGVzc1RoYW5PckVxdWFsKGksXyl7cmV0dXJuIDA+PUpTQkkuX19jb21wYXJlVG9CaWdJbnQoaSxfKX1zdGF0aWMgZ3JlYXRlclRoYW4oaSxfKXtyZXR1cm4gMDxKU0JJLl9fY29tcGFyZVRvQmlnSW50KGksXyl9c3RhdGljIGdyZWF0ZXJUaGFuT3JFcXVhbChpLF8pe3JldHVybiAwPD1KU0JJLl9fY29tcGFyZVRvQmlnSW50KGksXyl9c3RhdGljIGVxdWFsKF8sdCl7aWYoXy5zaWduIT09dC5zaWduKXJldHVybiExO2lmKF8ubGVuZ3RoIT09dC5sZW5ndGgpcmV0dXJuITE7Zm9yKGxldCBlPTA7ZTxfLmxlbmd0aDtlKyspaWYoXy5fX2RpZ2l0KGUpIT09dC5fX2RpZ2l0KGUpKXJldHVybiExO3JldHVybiEwfXN0YXRpYyBub3RFcXVhbChpLF8pe3JldHVybiFKU0JJLmVxdWFsKGksXyl9c3RhdGljIGJpdHdpc2VBbmQoaSxfKXt2YXIgdD1NYXRoLm1heDtpZighaS5zaWduJiYhXy5zaWduKXJldHVybiBKU0JJLl9fYWJzb2x1dGVBbmQoaSxfKS5fX3RyaW0oKTtpZihpLnNpZ24mJl8uc2lnbil7Y29uc3QgZT10KGkubGVuZ3RoLF8ubGVuZ3RoKSsxO2xldCBuPUpTQkkuX19hYnNvbHV0ZVN1Yk9uZShpLGUpO2NvbnN0IGc9SlNCSS5fX2Fic29sdXRlU3ViT25lKF8pO3JldHVybiBuPUpTQkkuX19hYnNvbHV0ZU9yKG4sZyxuKSxKU0JJLl9fYWJzb2x1dGVBZGRPbmUobiwhMCxuKS5fX3RyaW0oKX1yZXR1cm4gaS5zaWduJiYoW2ksX109W18saV0pLEpTQkkuX19hYnNvbHV0ZUFuZE5vdChpLEpTQkkuX19hYnNvbHV0ZVN1Yk9uZShfKSkuX190cmltKCl9c3RhdGljIGJpdHdpc2VYb3IoaSxfKXt2YXIgdD1NYXRoLm1heDtpZighaS5zaWduJiYhXy5zaWduKXJldHVybiBKU0JJLl9fYWJzb2x1dGVYb3IoaSxfKS5fX3RyaW0oKTtpZihpLnNpZ24mJl8uc2lnbil7Y29uc3QgZT10KGkubGVuZ3RoLF8ubGVuZ3RoKSxuPUpTQkkuX19hYnNvbHV0ZVN1Yk9uZShpLGUpLGc9SlNCSS5fX2Fic29sdXRlU3ViT25lKF8pO3JldHVybiBKU0JJLl9fYWJzb2x1dGVYb3IobixnLG4pLl9fdHJpbSgpfWNvbnN0IGU9dChpLmxlbmd0aCxfLmxlbmd0aCkrMTtpLnNpZ24mJihbaSxfXT1bXyxpXSk7bGV0IG49SlNCSS5fX2Fic29sdXRlU3ViT25lKF8sZSk7cmV0dXJuIG49SlNCSS5fX2Fic29sdXRlWG9yKG4saSxuKSxKU0JJLl9fYWJzb2x1dGVBZGRPbmUobiwhMCxuKS5fX3RyaW0oKX1zdGF0aWMgYml0d2lzZU9yKGksXyl7dmFyIHQ9TWF0aC5tYXg7Y29uc3QgZT10KGkubGVuZ3RoLF8ubGVuZ3RoKTtpZighaS5zaWduJiYhXy5zaWduKXJldHVybiBKU0JJLl9fYWJzb2x1dGVPcihpLF8pLl9fdHJpbSgpO2lmKGkuc2lnbiYmXy5zaWduKXtsZXQgdD1KU0JJLl9fYWJzb2x1dGVTdWJPbmUoaSxlKTtjb25zdCBuPUpTQkkuX19hYnNvbHV0ZVN1Yk9uZShfKTtyZXR1cm4gdD1KU0JJLl9fYWJzb2x1dGVBbmQodCxuLHQpLEpTQkkuX19hYnNvbHV0ZUFkZE9uZSh0LCEwLHQpLl9fdHJpbSgpfWkuc2lnbiYmKFtpLF9dPVtfLGldKTtsZXQgbj1KU0JJLl9fYWJzb2x1dGVTdWJPbmUoXyxlKTtyZXR1cm4gbj1KU0JJLl9fYWJzb2x1dGVBbmROb3QobixpLG4pLEpTQkkuX19hYnNvbHV0ZUFkZE9uZShuLCEwLG4pLl9fdHJpbSgpfXN0YXRpYyBhc0ludE4oXyx0KXt2YXIgaT1NYXRoLmZsb29yO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gdDtpZihfPWkoXyksMD5fKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB2YWx1ZTogbm90IChjb252ZXJ0aWJsZSB0bykgYSBzYWZlIGludGVnZXJcIik7aWYoMD09PV8pcmV0dXJuIEpTQkkuX196ZXJvKCk7aWYoXz49SlNCSS5fX2tNYXhMZW5ndGhCaXRzKXJldHVybiB0O2NvbnN0IGU9MHwoXysyOSkvMzA7aWYodC5sZW5ndGg8ZSlyZXR1cm4gdDtjb25zdCBnPXQuX191bnNpZ25lZERpZ2l0KGUtMSksbz0xPDwoXy0xKSUzMDtpZih0Lmxlbmd0aD09PWUmJmc8bylyZXR1cm4gdDtpZighKChnJm8pPT09bykpcmV0dXJuIEpTQkkuX190cnVuY2F0ZVRvTkJpdHMoXyx0KTtpZighdC5zaWduKXJldHVybiBKU0JJLl9fdHJ1bmNhdGVBbmRTdWJGcm9tUG93ZXJPZlR3byhfLHQsITApO2lmKDA9PShnJm8tMSkpe2ZvcihsZXQgbj1lLTI7MDw9bjtuLS0paWYoMCE9PXQuX19kaWdpdChuKSlyZXR1cm4gSlNCSS5fX3RydW5jYXRlQW5kU3ViRnJvbVBvd2VyT2ZUd28oXyx0LCExKTtyZXR1cm4gdC5sZW5ndGg9PT1lJiZnPT09bz90OkpTQkkuX190cnVuY2F0ZVRvTkJpdHMoXyx0KX1yZXR1cm4gSlNCSS5fX3RydW5jYXRlQW5kU3ViRnJvbVBvd2VyT2ZUd28oXyx0LCExKX1zdGF0aWMgYXNVaW50TihpLF8pe3ZhciB0PU1hdGguZmxvb3I7aWYoMD09PV8ubGVuZ3RoKXJldHVybiBfO2lmKGk9dChpKSwwPmkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHZhbHVlOiBub3QgKGNvbnZlcnRpYmxlIHRvKSBhIHNhZmUgaW50ZWdlclwiKTtpZigwPT09aSlyZXR1cm4gSlNCSS5fX3plcm8oKTtpZihfLnNpZ24pe2lmKGk+SlNCSS5fX2tNYXhMZW5ndGhCaXRzKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQmlnSW50IHRvbyBiaWdcIik7cmV0dXJuIEpTQkkuX190cnVuY2F0ZUFuZFN1YkZyb21Qb3dlck9mVHdvKGksXywhMSl9aWYoaT49SlNCSS5fX2tNYXhMZW5ndGhCaXRzKXJldHVybiBfO2NvbnN0IGU9MHwoaSsyOSkvMzA7aWYoXy5sZW5ndGg8ZSlyZXR1cm4gXztjb25zdCBnPWklMzA7aWYoXy5sZW5ndGg9PWUpe2lmKDA9PT1nKXJldHVybiBfO2NvbnN0IGk9Xy5fX2RpZ2l0KGUtMSk7aWYoMD09aT4+PmcpcmV0dXJuIF99cmV0dXJuIEpTQkkuX190cnVuY2F0ZVRvTkJpdHMoaSxfKX1zdGF0aWMgQUREKGksXyl7aWYoaT1KU0JJLl9fdG9QcmltaXRpdmUoaSksXz1KU0JJLl9fdG9QcmltaXRpdmUoXyksXCJzdHJpbmdcIj09dHlwZW9mIGkpcmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIF8mJihfPV8udG9TdHJpbmcoKSksaStfO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBfKXJldHVybiBpLnRvU3RyaW5nKCkrXztpZihpPUpTQkkuX190b051bWVyaWMoaSksXz1KU0JJLl9fdG9OdW1lcmljKF8pLEpTQkkuX19pc0JpZ0ludChpKSYmSlNCSS5fX2lzQmlnSW50KF8pKXJldHVybiBKU0JJLmFkZChpLF8pO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBpJiZcIm51bWJlclwiPT10eXBlb2YgXylyZXR1cm4gaStfO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgbWl4IEJpZ0ludCBhbmQgb3RoZXIgdHlwZXMsIHVzZSBleHBsaWNpdCBjb252ZXJzaW9uc1wiKX1zdGF0aWMgTFQoaSxfKXtyZXR1cm4gSlNCSS5fX2NvbXBhcmUoaSxfLDApfXN0YXRpYyBMRShpLF8pe3JldHVybiBKU0JJLl9fY29tcGFyZShpLF8sMSl9c3RhdGljIEdUKGksXyl7cmV0dXJuIEpTQkkuX19jb21wYXJlKGksXywyKX1zdGF0aWMgR0UoaSxfKXtyZXR1cm4gSlNCSS5fX2NvbXBhcmUoaSxfLDMpfXN0YXRpYyBFUShpLF8pe2Zvcig7Oyl7aWYoSlNCSS5fX2lzQmlnSW50KGkpKXJldHVybiBKU0JJLl9faXNCaWdJbnQoXyk/SlNCSS5lcXVhbChpLF8pOkpTQkkuRVEoXyxpKTtpZihcIm51bWJlclwiPT10eXBlb2YgaSl7aWYoSlNCSS5fX2lzQmlnSW50KF8pKXJldHVybiBKU0JJLl9fZXF1YWxUb051bWJlcihfLGkpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBfKXJldHVybiBpPT1fO189SlNCSS5fX3RvUHJpbWl0aXZlKF8pfWVsc2UgaWYoXCJzdHJpbmdcIj09dHlwZW9mIGkpe2lmKEpTQkkuX19pc0JpZ0ludChfKSlyZXR1cm4gaT1KU0JJLl9fZnJvbVN0cmluZyhpKSxudWxsIT09aSYmSlNCSS5lcXVhbChpLF8pO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBfKXJldHVybiBpPT1fO189SlNCSS5fX3RvUHJpbWl0aXZlKF8pfWVsc2UgaWYoXCJib29sZWFuXCI9PXR5cGVvZiBpKXtpZihKU0JJLl9faXNCaWdJbnQoXykpcmV0dXJuIEpTQkkuX19lcXVhbFRvTnVtYmVyKF8sK2kpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBfKXJldHVybiBpPT1fO189SlNCSS5fX3RvUHJpbWl0aXZlKF8pfWVsc2UgaWYoXCJzeW1ib2xcIj09dHlwZW9mIGkpe2lmKEpTQkkuX19pc0JpZ0ludChfKSlyZXR1cm4hMTtpZihcIm9iamVjdFwiIT10eXBlb2YgXylyZXR1cm4gaT09XztfPUpTQkkuX190b1ByaW1pdGl2ZShfKX1lbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBpKXtpZihcIm9iamVjdFwiPT10eXBlb2YgXyYmXy5jb25zdHJ1Y3RvciE9PUpTQkkpcmV0dXJuIGk9PV87aT1KU0JJLl9fdG9QcmltaXRpdmUoaSl9ZWxzZSByZXR1cm4gaT09X319c3RhdGljIE5FKGksXyl7cmV0dXJuIUpTQkkuRVEoaSxfKX1zdGF0aWMgX196ZXJvKCl7cmV0dXJuIG5ldyBKU0JJKDAsITEpfXN0YXRpYyBfX29uZURpZ2l0KGksXyl7Y29uc3QgdD1uZXcgSlNCSSgxLF8pO3JldHVybiB0Ll9fc2V0RGlnaXQoMCxpKSx0fV9fY29weSgpe2NvbnN0IF89bmV3IEpTQkkodGhpcy5sZW5ndGgsdGhpcy5zaWduKTtmb3IobGV0IHQ9MDt0PHRoaXMubGVuZ3RoO3QrKylfW3RdPXRoaXNbdF07cmV0dXJuIF99X190cmltKCl7bGV0IGk9dGhpcy5sZW5ndGgsXz10aGlzW2ktMV07Zm9yKDswPT09XzspaS0tLF89dGhpc1tpLTFdLHRoaXMucG9wKCk7cmV0dXJuIDA9PT1pJiYodGhpcy5zaWduPSExKSx0aGlzfV9faW5pdGlhbGl6ZURpZ2l0cygpe2ZvcihsZXQgXz0wO188dGhpcy5sZW5ndGg7XysrKXRoaXNbX109MH1zdGF0aWMgX19kZWNpZGVSb3VuZGluZyhpLF8sdCxlKXtpZigwPF8pcmV0dXJuLTE7bGV0IG47aWYoMD5fKW49LV8tMTtlbHNle2lmKDA9PT10KXJldHVybi0xO3QtLSxlPWkuX19kaWdpdCh0KSxuPTI5fWxldCBnPTE8PG47aWYoMD09KGUmZykpcmV0dXJuLTE7aWYoZy09MSwwIT0oZSZnKSlyZXR1cm4gMTtmb3IoOzA8dDspaWYodC0tLDAhPT1pLl9fZGlnaXQodCkpcmV0dXJuIDE7cmV0dXJuIDB9c3RhdGljIF9fZnJvbURvdWJsZShpKXtKU0JJLl9fa0JpdENvbnZlcnNpb25Eb3VibGVbMF09aTtjb25zdCBfPTIwNDcmSlNCSS5fX2tCaXRDb252ZXJzaW9uSW50c1sxXT4+PjIwLHQ9Xy0xMDIzLGU9KDB8dC8zMCkrMSxuPW5ldyBKU0JJKGUsMD5pKTtsZXQgZz0xMDQ4NTc1JkpTQkkuX19rQml0Q29udmVyc2lvbkludHNbMV18MTA0ODU3NixvPUpTQkkuX19rQml0Q29udmVyc2lvbkludHNbMF07Y29uc3Qgcz0yMCxsPXQlMzA7bGV0IHIsYT0wO2lmKGw8MjApe2NvbnN0IGk9cy1sO2E9aSszMixyPWc+Pj5pLGc9Zzw8MzItaXxvPj4+aSxvPDw9MzItaX1lbHNlIGlmKGw9PT0yMClhPTMyLHI9ZyxnPW8sbz0wO2Vsc2V7Y29uc3QgaT1sLXM7YT0zMi1pLHI9Zzw8aXxvPj4+MzItaSxnPW88PGksbz0wfW4uX19zZXREaWdpdChlLTEscik7Zm9yKGxldCBfPWUtMjswPD1fO18tLSkwPGE/KGEtPTMwLHI9Zz4+PjIsZz1nPDwzMHxvPj4+MixvPDw9MzApOnI9MCxuLl9fc2V0RGlnaXQoXyxyKTtyZXR1cm4gbi5fX3RyaW0oKX1zdGF0aWMgX19pc1doaXRlc3BhY2UoaSl7cmV0dXJuISEoMTM+PWkmJjk8PWkpfHwoMTU5Pj1pPzMyPT1pOjEzMTA3MT49aT8xNjA9PWl8fDU3NjA9PWk6MTk2NjA3Pj1pPyhpJj0xMzEwNzEsMTA+PWl8fDQwPT1pfHw0MT09aXx8NDc9PWl8fDk1PT1pfHw0MDk2PT1pKTo2NTI3OT09aSl9c3RhdGljIF9fZnJvbVN0cmluZyhpLF89MCl7bGV0IHQ9MDtjb25zdCBlPWkubGVuZ3RoO2xldCBuPTA7aWYobj09PWUpcmV0dXJuIEpTQkkuX196ZXJvKCk7bGV0IGc9aS5jaGFyQ29kZUF0KG4pO2Zvcig7SlNCSS5fX2lzV2hpdGVzcGFjZShnKTspe2lmKCsrbj09PWUpcmV0dXJuIEpTQkkuX196ZXJvKCk7Zz1pLmNoYXJDb2RlQXQobil9aWYoNDM9PT1nKXtpZigrK249PT1lKXJldHVybiBudWxsO2c9aS5jaGFyQ29kZUF0KG4pLHQ9MX1lbHNlIGlmKDQ1PT09Zyl7aWYoKytuPT09ZSlyZXR1cm4gbnVsbDtnPWkuY2hhckNvZGVBdChuKSx0PS0xfWlmKDA9PT1fKXtpZihfPTEwLDQ4PT09Zyl7aWYoKytuPT09ZSlyZXR1cm4gSlNCSS5fX3plcm8oKTtpZihnPWkuY2hhckNvZGVBdChuKSw4OD09PWd8fDEyMD09PWcpe2lmKF89MTYsKytuPT09ZSlyZXR1cm4gbnVsbDtnPWkuY2hhckNvZGVBdChuKX1lbHNlIGlmKDc5PT09Z3x8MTExPT09Zyl7aWYoXz04LCsrbj09PWUpcmV0dXJuIG51bGw7Zz1pLmNoYXJDb2RlQXQobil9ZWxzZSBpZig2Nj09PWd8fDk4PT09Zyl7aWYoXz0yLCsrbj09PWUpcmV0dXJuIG51bGw7Zz1pLmNoYXJDb2RlQXQobil9fX1lbHNlIGlmKDE2PT09XyYmNDg9PT1nKXtpZigrK249PT1lKXJldHVybiBKU0JJLl9femVybygpO2lmKGc9aS5jaGFyQ29kZUF0KG4pLDg4PT09Z3x8MTIwPT09Zyl7aWYoKytuPT09ZSlyZXR1cm4gbnVsbDtnPWkuY2hhckNvZGVBdChuKX19aWYoMCE9dCYmMTAhPT1fKXJldHVybiBudWxsO2Zvcig7NDg9PT1nOyl7aWYoKytuPT09ZSlyZXR1cm4gSlNCSS5fX3plcm8oKTtnPWkuY2hhckNvZGVBdChuKX1jb25zdCBvPWUtbjtsZXQgcz1KU0JJLl9fa01heEJpdHNQZXJDaGFyW19dLGw9SlNCSS5fX2tCaXRzUGVyQ2hhclRhYmxlTXVsdGlwbGllci0xO2lmKG8+MTA3Mzc0MTgyNC9zKXJldHVybiBudWxsO2NvbnN0IHI9cypvK2w+Pj5KU0JJLl9fa0JpdHNQZXJDaGFyVGFibGVTaGlmdCxhPW5ldyBKU0JJKDB8KHIrMjkpLzMwLCExKSx1PTEwPl8/XzoxMCxoPTEwPF8/Xy0xMDowO2lmKDA9PShfJl8tMSkpe3M+Pj1KU0JJLl9fa0JpdHNQZXJDaGFyVGFibGVTaGlmdDtjb25zdCBfPVtdLHQ9W107bGV0IG89ITE7ZG97bGV0IGw9MCxyPTA7Zm9yKDs7KXtsZXQgXztpZihnLTQ4Pj4+MDx1KV89Zy00ODtlbHNlIGlmKCgzMnxnKS05Nz4+PjA8aClfPSgzMnxnKS04NztlbHNle289ITA7YnJlYWt9aWYocis9cyxsPWw8PHN8XywrK249PT1lKXtvPSEwO2JyZWFrfWlmKGc9aS5jaGFyQ29kZUF0KG4pLDMwPHIrcylicmVha31fLnB1c2gobCksdC5wdXNoKHIpfXdoaWxlKCFvKTtKU0JJLl9fZmlsbEZyb21QYXJ0cyhhLF8sdCl9ZWxzZXthLl9faW5pdGlhbGl6ZURpZ2l0cygpO2xldCB0PSExLG89MDtkb3tsZXQgcj0wLGI9MTtmb3IoOzspe2xldCBzO2lmKGctNDg+Pj4wPHUpcz1nLTQ4O2Vsc2UgaWYoKDMyfGcpLTk3Pj4+MDxoKXM9KDMyfGcpLTg3O2Vsc2V7dD0hMDticmVha31jb25zdCBsPWIqXztpZigxMDczNzQxODIzPGwpYnJlYWs7aWYoYj1sLHI9cipfK3MsbysrLCsrbj09PWUpe3Q9ITA7YnJlYWt9Zz1pLmNoYXJDb2RlQXQobil9bD0zMCpKU0JJLl9fa0JpdHNQZXJDaGFyVGFibGVNdWx0aXBsaWVyLTE7Y29uc3QgRD0wfChzKm8rbD4+PkpTQkkuX19rQml0c1BlckNoYXJUYWJsZVNoaWZ0KS8zMDthLl9faW5wbGFjZU11bHRpcGx5QWRkKGIscixEKX13aGlsZSghdCl9aWYobiE9PWUpe2lmKCFKU0JJLl9faXNXaGl0ZXNwYWNlKGcpKXJldHVybiBudWxsO2ZvcihuKys7bjxlO24rKylpZihnPWkuY2hhckNvZGVBdChuKSwhSlNCSS5fX2lzV2hpdGVzcGFjZShnKSlyZXR1cm4gbnVsbH1yZXR1cm4gYS5zaWduPS0xPT10LGEuX190cmltKCl9c3RhdGljIF9fZmlsbEZyb21QYXJ0cyhfLHQsZSl7bGV0IG49MCxnPTAsbz0wO2ZvcihsZXQgcz10Lmxlbmd0aC0xOzA8PXM7cy0tKXtjb25zdCBpPXRbc10sbD1lW3NdO2d8PWk8PG8sbys9bCwzMD09PW8/KF8uX19zZXREaWdpdChuKyssZyksbz0wLGc9MCk6MzA8byYmKF8uX19zZXREaWdpdChuKyssMTA3Mzc0MTgyMyZnKSxvLT0zMCxnPWk+Pj5sLW8pfWlmKDAhPT1nKXtpZihuPj1fLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIik7Xy5fX3NldERpZ2l0KG4rKyxnKX1mb3IoO248Xy5sZW5ndGg7bisrKV8uX19zZXREaWdpdChuLDApfXN0YXRpYyBfX3RvU3RyaW5nQmFzZVBvd2VyT2ZUd28oXyxpKXtjb25zdCB0PV8ubGVuZ3RoO2xldCBlPWktMTtlPSg4NSZlPj4+MSkrKDg1JmUpLGU9KDUxJmU+Pj4yKSsoNTEmZSksZT0oMTUmZT4+PjQpKygxNSZlKTtjb25zdCBuPWUsZz1pLTEsbz1fLl9fZGlnaXQodC0xKSxzPUpTQkkuX19jbHozMChvKTtsZXQgbD0wfCgzMCp0LXMrbi0xKS9uO2lmKF8uc2lnbiYmbCsrLDI2ODQzNTQ1NjxsKXRocm93IG5ldyBFcnJvcihcInN0cmluZyB0b28gbG9uZ1wiKTtjb25zdCByPUFycmF5KGwpO2xldCBhPWwtMSx1PTAsZD0wO2ZvcihsZXQgZT0wO2U8dC0xO2UrKyl7Y29uc3QgaT1fLl9fZGlnaXQoZSksdD0odXxpPDxkKSZnO3JbYS0tXT1KU0JJLl9fa0NvbnZlcnNpb25DaGFyc1t0XTtjb25zdCBvPW4tZDtmb3IodT1pPj4+byxkPTMwLW87ZD49bjspclthLS1dPUpTQkkuX19rQ29udmVyc2lvbkNoYXJzW3UmZ10sdT4+Pj1uLGQtPW59Y29uc3QgaD0odXxvPDxkKSZnO2ZvcihyW2EtLV09SlNCSS5fX2tDb252ZXJzaW9uQ2hhcnNbaF0sdT1vPj4+bi1kOzAhPT11OylyW2EtLV09SlNCSS5fX2tDb252ZXJzaW9uQ2hhcnNbdSZnXSx1Pj4+PW47aWYoXy5zaWduJiYoclthLS1dPVwiLVwiKSwtMSE9YSl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIik7cmV0dXJuIHIuam9pbihcIlwiKX1zdGF0aWMgX190b1N0cmluZ0dlbmVyaWMoXyxpLHQpe2NvbnN0IGU9Xy5sZW5ndGg7aWYoMD09PWUpcmV0dXJuXCJcIjtpZigxPT09ZSl7bGV0IGU9Xy5fX3Vuc2lnbmVkRGlnaXQoMCkudG9TdHJpbmcoaSk7cmV0dXJuITE9PT10JiZfLnNpZ24mJihlPVwiLVwiK2UpLGV9Y29uc3Qgbj0zMCplLUpTQkkuX19jbHozMChfLl9fZGlnaXQoZS0xKSksZz1KU0JJLl9fa01heEJpdHNQZXJDaGFyW2ldLG89Zy0xO2xldCBzPW4qSlNCSS5fX2tCaXRzUGVyQ2hhclRhYmxlTXVsdGlwbGllcjtzKz1vLTEscz0wfHMvbztjb25zdCBsPXMrMT4+MSxyPUpTQkkuZXhwb25lbnRpYXRlKEpTQkkuX19vbmVEaWdpdChpLCExKSxKU0JJLl9fb25lRGlnaXQobCwhMSkpO2xldCBhLHU7Y29uc3QgZD1yLl9fdW5zaWduZWREaWdpdCgwKTtpZigxPT09ci5sZW5ndGgmJjMyNzY3Pj1kKXthPW5ldyBKU0JJKF8ubGVuZ3RoLCExKSxhLl9faW5pdGlhbGl6ZURpZ2l0cygpO2xldCB0PTA7Zm9yKGxldCBlPTIqXy5sZW5ndGgtMTswPD1lO2UtLSl7Y29uc3QgaT10PDwxNXxfLl9faGFsZkRpZ2l0KGUpO2EuX19zZXRIYWxmRGlnaXQoZSwwfGkvZCksdD0wfGklZH11PXQudG9TdHJpbmcoaSl9ZWxzZXtjb25zdCB0PUpTQkkuX19hYnNvbHV0ZURpdkxhcmdlKF8sciwhMCwhMCk7YT10LnF1b3RpZW50O2NvbnN0IGU9dC5yZW1haW5kZXIuX190cmltKCk7dT1KU0JJLl9fdG9TdHJpbmdHZW5lcmljKGUsaSwhMCl9YS5fX3RyaW0oKTtsZXQgaD1KU0JJLl9fdG9TdHJpbmdHZW5lcmljKGEsaSwhMCk7Zm9yKDt1Lmxlbmd0aDxsOyl1PVwiMFwiK3U7cmV0dXJuITE9PT10JiZfLnNpZ24mJihoPVwiLVwiK2gpLGgrdX1zdGF0aWMgX191bmVxdWFsU2lnbihpKXtyZXR1cm4gaT8tMToxfXN0YXRpYyBfX2Fic29sdXRlR3JlYXRlcihpKXtyZXR1cm4gaT8tMToxfXN0YXRpYyBfX2Fic29sdXRlTGVzcyhpKXtyZXR1cm4gaT8xOi0xfXN0YXRpYyBfX2NvbXBhcmVUb0JpZ0ludChpLF8pe2NvbnN0IHQ9aS5zaWduO2lmKHQhPT1fLnNpZ24pcmV0dXJuIEpTQkkuX191bmVxdWFsU2lnbih0KTtjb25zdCBlPUpTQkkuX19hYnNvbHV0ZUNvbXBhcmUoaSxfKTtyZXR1cm4gMDxlP0pTQkkuX19hYnNvbHV0ZUdyZWF0ZXIodCk6MD5lP0pTQkkuX19hYnNvbHV0ZUxlc3ModCk6MH1zdGF0aWMgX19jb21wYXJlVG9OdW1iZXIoaSxfKXtpZihKU0JJLl9faXNPbmVEaWdpdEludChfKSl7Y29uc3QgdD1pLnNpZ24sZT0wPl87aWYodCE9PWUpcmV0dXJuIEpTQkkuX191bmVxdWFsU2lnbih0KTtpZigwPT09aS5sZW5ndGgpe2lmKGUpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpO3JldHVybiAwPT09Xz8wOi0xfWlmKDE8aS5sZW5ndGgpcmV0dXJuIEpTQkkuX19hYnNvbHV0ZUdyZWF0ZXIodCk7Y29uc3Qgbj1NYXRoLmFicyhfKSxnPWkuX191bnNpZ25lZERpZ2l0KDApO3JldHVybiBnPm4/SlNCSS5fX2Fic29sdXRlR3JlYXRlcih0KTpnPG4/SlNCSS5fX2Fic29sdXRlTGVzcyh0KTowfXJldHVybiBKU0JJLl9fY29tcGFyZVRvRG91YmxlKGksXyl9c3RhdGljIF9fY29tcGFyZVRvRG91YmxlKGksXyl7aWYoXyE9PV8pcmV0dXJuIF87aWYoXz09PTEvMClyZXR1cm4tMTtpZihfPT09LUluZmluaXR5KXJldHVybiAxO2NvbnN0IHQ9aS5zaWduO2lmKHQhPT0wPl8pcmV0dXJuIEpTQkkuX191bmVxdWFsU2lnbih0KTtpZigwPT09Xyl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWc6IHNob3VsZCBiZSBoYW5kbGVkIGVsc2V3aGVyZVwiKTtpZigwPT09aS5sZW5ndGgpcmV0dXJuLTE7SlNCSS5fX2tCaXRDb252ZXJzaW9uRG91YmxlWzBdPV87Y29uc3QgZT0yMDQ3JkpTQkkuX19rQml0Q29udmVyc2lvbkludHNbMV0+Pj4yMDtpZigyMDQ3PT1lKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1ZzogaGFuZGxlZCBlbHNld2hlcmVcIik7Y29uc3Qgbj1lLTEwMjM7aWYoMD5uKXJldHVybiBKU0JJLl9fYWJzb2x1dGVHcmVhdGVyKHQpO2NvbnN0IGc9aS5sZW5ndGg7bGV0IG89aS5fX2RpZ2l0KGctMSk7Y29uc3Qgcz1KU0JJLl9fY2x6MzAobyksbD0zMCpnLXMscj1uKzE7aWYobDxyKXJldHVybiBKU0JJLl9fYWJzb2x1dGVMZXNzKHQpO2lmKGw+cilyZXR1cm4gSlNCSS5fX2Fic29sdXRlR3JlYXRlcih0KTtsZXQgYT0xMDQ4NTc2fDEwNDg1NzUmSlNCSS5fX2tCaXRDb252ZXJzaW9uSW50c1sxXSx1PUpTQkkuX19rQml0Q29udmVyc2lvbkludHNbMF07Y29uc3QgZD0yMCxoPTI5LXM7aWYoaCE9PSgwfChsLTEpJTMwKSl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIik7bGV0IG0sYj0wO2lmKDIwPmgpe2NvbnN0IGk9ZC1oO2I9aSszMixtPWE+Pj5pLGE9YTw8MzItaXx1Pj4+aSx1PDw9MzItaX1lbHNlIGlmKDIwPT09aCliPTMyLG09YSxhPXUsdT0wO2Vsc2V7Y29uc3QgaT1oLWQ7Yj0zMi1pLG09YTw8aXx1Pj4+MzItaSxhPXU8PGksdT0wfWlmKG8+Pj49MCxtPj4+PTAsbz5tKXJldHVybiBKU0JJLl9fYWJzb2x1dGVHcmVhdGVyKHQpO2lmKG88bSlyZXR1cm4gSlNCSS5fX2Fic29sdXRlTGVzcyh0KTtmb3IobGV0IGU9Zy0yOzA8PWU7ZS0tKXswPGI/KGItPTMwLG09YT4+PjIsYT1hPDwzMHx1Pj4+Mix1PDw9MzApOm09MDtjb25zdCBfPWkuX191bnNpZ25lZERpZ2l0KGUpO2lmKF8+bSlyZXR1cm4gSlNCSS5fX2Fic29sdXRlR3JlYXRlcih0KTtpZihfPG0pcmV0dXJuIEpTQkkuX19hYnNvbHV0ZUxlc3ModCl9aWYoMCE9PWF8fDAhPT11KXtpZigwPT09Yil0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIik7cmV0dXJuIEpTQkkuX19hYnNvbHV0ZUxlc3ModCl9cmV0dXJuIDB9c3RhdGljIF9fZXF1YWxUb051bWJlcihpLF8pe3ZhciB0PU1hdGguYWJzO3JldHVybiBKU0JJLl9faXNPbmVEaWdpdEludChfKT8wPT09Xz8wPT09aS5sZW5ndGg6MT09PWkubGVuZ3RoJiZpLnNpZ249PT0wPl8mJmkuX191bnNpZ25lZERpZ2l0KDApPT09dChfKTowPT09SlNCSS5fX2NvbXBhcmVUb0RvdWJsZShpLF8pfXN0YXRpYyBfX2NvbXBhcmlzb25SZXN1bHRUb0Jvb2woaSxfKXtyZXR1cm4gMD09PV8/MD5pOjE9PT1fPzA+PWk6Mj09PV8/MDxpOjM9PT1fPzA8PWk6dm9pZCAwfXN0YXRpYyBfX2NvbXBhcmUoaSxfLHQpe2lmKGk9SlNCSS5fX3RvUHJpbWl0aXZlKGkpLF89SlNCSS5fX3RvUHJpbWl0aXZlKF8pLFwic3RyaW5nXCI9PXR5cGVvZiBpJiZcInN0cmluZ1wiPT10eXBlb2YgXylzd2l0Y2godCl7Y2FzZSAwOnJldHVybiBpPF87Y2FzZSAxOnJldHVybiBpPD1fO2Nhc2UgMjpyZXR1cm4gaT5fO2Nhc2UgMzpyZXR1cm4gaT49Xzt9aWYoSlNCSS5fX2lzQmlnSW50KGkpJiZcInN0cmluZ1wiPT10eXBlb2YgXylyZXR1cm4gXz1KU0JJLl9fZnJvbVN0cmluZyhfKSxudWxsIT09XyYmSlNCSS5fX2NvbXBhcmlzb25SZXN1bHRUb0Jvb2woSlNCSS5fX2NvbXBhcmVUb0JpZ0ludChpLF8pLHQpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpJiZKU0JJLl9faXNCaWdJbnQoXykpcmV0dXJuIGk9SlNCSS5fX2Zyb21TdHJpbmcoaSksbnVsbCE9PWkmJkpTQkkuX19jb21wYXJpc29uUmVzdWx0VG9Cb29sKEpTQkkuX19jb21wYXJlVG9CaWdJbnQoaSxfKSx0KTtpZihpPUpTQkkuX190b051bWVyaWMoaSksXz1KU0JJLl9fdG9OdW1lcmljKF8pLEpTQkkuX19pc0JpZ0ludChpKSl7aWYoSlNCSS5fX2lzQmlnSW50KF8pKXJldHVybiBKU0JJLl9fY29tcGFyaXNvblJlc3VsdFRvQm9vbChKU0JJLl9fY29tcGFyZVRvQmlnSW50KGksXyksdCk7aWYoXCJudW1iZXJcIiE9dHlwZW9mIF8pdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpO3JldHVybiBKU0JJLl9fY29tcGFyaXNvblJlc3VsdFRvQm9vbChKU0JJLl9fY29tcGFyZVRvTnVtYmVyKGksXyksdCl9aWYoXCJudW1iZXJcIiE9dHlwZW9mIGkpdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpO2lmKEpTQkkuX19pc0JpZ0ludChfKSlyZXR1cm4gSlNCSS5fX2NvbXBhcmlzb25SZXN1bHRUb0Jvb2woSlNCSS5fX2NvbXBhcmVUb051bWJlcihfLGkpLDJedCk7aWYoXCJudW1iZXJcIiE9dHlwZW9mIF8pdGhyb3cgbmV3IEVycm9yKFwiaW1wbGVtZW50YXRpb24gYnVnXCIpO3JldHVybiAwPT09dD9pPF86MT09PXQ/aTw9XzoyPT09dD9pPl86Mz09PXQ/aT49Xzp2b2lkIDB9X19jbHptc2QoKXtyZXR1cm4gSlNCSS5fX2NsejMwKHRoaXMuX19kaWdpdCh0aGlzLmxlbmd0aC0xKSl9c3RhdGljIF9fYWJzb2x1dGVBZGQoXyx0LGUpe2lmKF8ubGVuZ3RoPHQubGVuZ3RoKXJldHVybiBKU0JJLl9fYWJzb2x1dGVBZGQodCxfLGUpO2lmKDA9PT1fLmxlbmd0aClyZXR1cm4gXztpZigwPT09dC5sZW5ndGgpcmV0dXJuIF8uc2lnbj09PWU/XzpKU0JJLnVuYXJ5TWludXMoXyk7bGV0IG49Xy5sZW5ndGg7KDA9PT1fLl9fY2x6bXNkKCl8fHQubGVuZ3RoPT09Xy5sZW5ndGgmJjA9PT10Ll9fY2x6bXNkKCkpJiZuKys7Y29uc3QgZz1uZXcgSlNCSShuLGUpO2xldCBvPTAscz0wO2Zvcig7czx0Lmxlbmd0aDtzKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KHMpK3QuX19kaWdpdChzKStvO289aT4+PjMwLGcuX19zZXREaWdpdChzLDEwNzM3NDE4MjMmaSl9Zm9yKDtzPF8ubGVuZ3RoO3MrKyl7Y29uc3QgaT1fLl9fZGlnaXQocykrbztvPWk+Pj4zMCxnLl9fc2V0RGlnaXQocywxMDczNzQxODIzJmkpfXJldHVybiBzPGcubGVuZ3RoJiZnLl9fc2V0RGlnaXQocyxvKSxnLl9fdHJpbSgpfXN0YXRpYyBfX2Fic29sdXRlU3ViKF8sdCxlKXtpZigwPT09Xy5sZW5ndGgpcmV0dXJuIF87aWYoMD09PXQubGVuZ3RoKXJldHVybiBfLnNpZ249PT1lP186SlNCSS51bmFyeU1pbnVzKF8pO2NvbnN0IG49bmV3IEpTQkkoXy5sZW5ndGgsZSk7bGV0IGc9MCxvPTA7Zm9yKDtvPHQubGVuZ3RoO28rKyl7Y29uc3QgaT1fLl9fZGlnaXQobyktdC5fX2RpZ2l0KG8pLWc7Zz0xJmk+Pj4zMCxuLl9fc2V0RGlnaXQobywxMDczNzQxODIzJmkpfWZvcig7bzxfLmxlbmd0aDtvKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KG8pLWc7Zz0xJmk+Pj4zMCxuLl9fc2V0RGlnaXQobywxMDczNzQxODIzJmkpfXJldHVybiBuLl9fdHJpbSgpfXN0YXRpYyBfX2Fic29sdXRlQWRkT25lKF8saSx0PW51bGwpe2NvbnN0IGU9Xy5sZW5ndGg7bnVsbD09PXQ/dD1uZXcgSlNCSShlLGkpOnQuc2lnbj1pO2xldCBuPTE7Zm9yKGxldCBnPTA7ZzxlO2crKyl7Y29uc3QgaT1fLl9fZGlnaXQoZykrbjtuPWk+Pj4zMCx0Ll9fc2V0RGlnaXQoZywxMDczNzQxODIzJmkpfXJldHVybiAwIT1uJiZ0Ll9fc2V0RGlnaXRHcm93KGUsMSksdH1zdGF0aWMgX19hYnNvbHV0ZVN1Yk9uZShfLHQpe2NvbnN0IGU9Xy5sZW5ndGg7dD10fHxlO2NvbnN0IG49bmV3IEpTQkkodCwhMSk7bGV0IGc9MTtmb3IobGV0IG89MDtvPGU7bysrKXtjb25zdCBpPV8uX19kaWdpdChvKS1nO2c9MSZpPj4+MzAsbi5fX3NldERpZ2l0KG8sMTA3Mzc0MTgyMyZpKX1pZigwIT1nKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKTtmb3IobGV0IGc9ZTtnPHQ7ZysrKW4uX19zZXREaWdpdChnLDApO3JldHVybiBufXN0YXRpYyBfX2Fic29sdXRlQW5kKF8sdCxlPW51bGwpe2xldCBuPV8ubGVuZ3RoLGc9dC5sZW5ndGgsbz1nO2lmKG48Zyl7bz1uO2NvbnN0IGk9XyxlPW47Xz10LG49Zyx0PWksZz1lfWxldCBzPW87bnVsbD09PWU/ZT1uZXcgSlNCSShzLCExKTpzPWUubGVuZ3RoO2xldCBsPTA7Zm9yKDtsPG87bCsrKWUuX19zZXREaWdpdChsLF8uX19kaWdpdChsKSZ0Ll9fZGlnaXQobCkpO2Zvcig7bDxzO2wrKyllLl9fc2V0RGlnaXQobCwwKTtyZXR1cm4gZX1zdGF0aWMgX19hYnNvbHV0ZUFuZE5vdChfLHQsZT1udWxsKXtjb25zdCBuPV8ubGVuZ3RoLGc9dC5sZW5ndGg7bGV0IG89ZztuPGcmJihvPW4pO2xldCBzPW47bnVsbD09PWU/ZT1uZXcgSlNCSShzLCExKTpzPWUubGVuZ3RoO2xldCBsPTA7Zm9yKDtsPG87bCsrKWUuX19zZXREaWdpdChsLF8uX19kaWdpdChsKSZ+dC5fX2RpZ2l0KGwpKTtmb3IoO2w8bjtsKyspZS5fX3NldERpZ2l0KGwsXy5fX2RpZ2l0KGwpKTtmb3IoO2w8cztsKyspZS5fX3NldERpZ2l0KGwsMCk7cmV0dXJuIGV9c3RhdGljIF9fYWJzb2x1dGVPcihfLHQsZT1udWxsKXtsZXQgbj1fLmxlbmd0aCxnPXQubGVuZ3RoLG89ZztpZihuPGcpe289bjtjb25zdCBpPV8sZT1uO189dCxuPWcsdD1pLGc9ZX1sZXQgcz1uO251bGw9PT1lP2U9bmV3IEpTQkkocywhMSk6cz1lLmxlbmd0aDtsZXQgbD0wO2Zvcig7bDxvO2wrKyllLl9fc2V0RGlnaXQobCxfLl9fZGlnaXQobCl8dC5fX2RpZ2l0KGwpKTtmb3IoO2w8bjtsKyspZS5fX3NldERpZ2l0KGwsXy5fX2RpZ2l0KGwpKTtmb3IoO2w8cztsKyspZS5fX3NldERpZ2l0KGwsMCk7cmV0dXJuIGV9c3RhdGljIF9fYWJzb2x1dGVYb3IoXyx0LGU9bnVsbCl7bGV0IG49Xy5sZW5ndGgsZz10Lmxlbmd0aCxvPWc7aWYobjxnKXtvPW47Y29uc3QgaT1fLGU9bjtfPXQsbj1nLHQ9aSxnPWV9bGV0IHM9bjtudWxsPT09ZT9lPW5ldyBKU0JJKHMsITEpOnM9ZS5sZW5ndGg7bGV0IGw9MDtmb3IoO2w8bztsKyspZS5fX3NldERpZ2l0KGwsXy5fX2RpZ2l0KGwpXnQuX19kaWdpdChsKSk7Zm9yKDtsPG47bCsrKWUuX19zZXREaWdpdChsLF8uX19kaWdpdChsKSk7Zm9yKDtsPHM7bCsrKWUuX19zZXREaWdpdChsLDApO3JldHVybiBlfXN0YXRpYyBfX2Fic29sdXRlQ29tcGFyZShfLHQpe2NvbnN0IGU9Xy5sZW5ndGgtdC5sZW5ndGg7aWYoMCE9ZSlyZXR1cm4gZTtsZXQgbj1fLmxlbmd0aC0xO2Zvcig7MDw9biYmXy5fX2RpZ2l0KG4pPT09dC5fX2RpZ2l0KG4pOyluLS07cmV0dXJuIDA+bj8wOl8uX191bnNpZ25lZERpZ2l0KG4pPnQuX191bnNpZ25lZERpZ2l0KG4pPzE6LTF9c3RhdGljIF9fbXVsdGlwbHlBY2N1bXVsYXRlKF8sdCxlLG4pe2lmKDA9PT10KXJldHVybjtjb25zdCBnPTMyNzY3JnQsbz10Pj4+MTU7bGV0IHM9MCxsPTA7Zm9yKGxldCByLGE9MDthPF8ubGVuZ3RoO2ErKyxuKyspe3I9ZS5fX2RpZ2l0KG4pO2NvbnN0IGk9Xy5fX2RpZ2l0KGEpLHQ9MzI3NjcmaSx1PWk+Pj4xNSxkPUpTQkkuX19pbXVsKHQsZyksaD1KU0JJLl9faW11bCh0LG8pLG09SlNCSS5fX2ltdWwodSxnKSxiPUpTQkkuX19pbXVsKHUsbyk7cis9bCtkK3Mscz1yPj4+MzAsciY9MTA3Mzc0MTgyMyxyKz0oKDMyNzY3JmgpPDwxNSkrKCgzMjc2NyZtKTw8MTUpLHMrPXI+Pj4zMCxsPWIrKGg+Pj4xNSkrKG0+Pj4xNSksZS5fX3NldERpZ2l0KG4sMTA3Mzc0MTgyMyZyKX1mb3IoOzAhPXN8fDAhPT1sO24rKyl7bGV0IGk9ZS5fX2RpZ2l0KG4pO2krPXMrbCxsPTAscz1pPj4+MzAsZS5fX3NldERpZ2l0KG4sMTA3Mzc0MTgyMyZpKX19c3RhdGljIF9faW50ZXJuYWxNdWx0aXBseUFkZChfLHQsZSxnLG8pe2xldCBzPWUsbD0wO2ZvcihsZXQgbj0wO248ZztuKyspe2NvbnN0IGk9Xy5fX2RpZ2l0KG4pLGU9SlNCSS5fX2ltdWwoMzI3NjcmaSx0KSxnPUpTQkkuX19pbXVsKGk+Pj4xNSx0KSxhPWUrKCgzMjc2NyZnKTw8MTUpK2wrcztzPWE+Pj4zMCxsPWc+Pj4xNSxvLl9fc2V0RGlnaXQobiwxMDczNzQxODIzJmEpfWlmKG8ubGVuZ3RoPmcpZm9yKG8uX19zZXREaWdpdChnKysscytsKTtnPG8ubGVuZ3RoOylvLl9fc2V0RGlnaXQoZysrLDApO2Vsc2UgaWYoMCE9PXMrbCl0aHJvdyBuZXcgRXJyb3IoXCJpbXBsZW1lbnRhdGlvbiBidWdcIil9X19pbnBsYWNlTXVsdGlwbHlBZGQoaSxfLHQpe3Q+dGhpcy5sZW5ndGgmJih0PXRoaXMubGVuZ3RoKTtjb25zdCBlPTMyNzY3Jmksbj1pPj4+MTU7bGV0IGc9MCxvPV87Zm9yKGxldCBzPTA7czx0O3MrKyl7Y29uc3QgaT10aGlzLl9fZGlnaXQocyksXz0zMjc2NyZpLHQ9aT4+PjE1LGw9SlNCSS5fX2ltdWwoXyxlKSxyPUpTQkkuX19pbXVsKF8sbiksYT1KU0JJLl9faW11bCh0LGUpLHU9SlNCSS5fX2ltdWwodCxuKTtsZXQgZD1vK2wrZztnPWQ+Pj4zMCxkJj0xMDczNzQxODIzLGQrPSgoMzI3Njcmcik8PDE1KSsoKDMyNzY3JmEpPDwxNSksZys9ZD4+PjMwLG89dSsocj4+PjE1KSsoYT4+PjE1KSx0aGlzLl9fc2V0RGlnaXQocywxMDczNzQxODIzJmQpfWlmKDAhPWd8fDAhPT1vKXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKX1zdGF0aWMgX19hYnNvbHV0ZURpdlNtYWxsKF8sdCxlPW51bGwpe251bGw9PT1lJiYoZT1uZXcgSlNCSShfLmxlbmd0aCwhMSkpO2xldCBuPTA7Zm9yKGxldCBnLG89MipfLmxlbmd0aC0xOzA8PW87by09Mil7Zz0objw8MTV8Xy5fX2hhbGZEaWdpdChvKSk+Pj4wO2NvbnN0IGk9MHxnL3Q7bj0wfGcldCxnPShuPDwxNXxfLl9faGFsZkRpZ2l0KG8tMSkpPj4+MDtjb25zdCBzPTB8Zy90O249MHxnJXQsZS5fX3NldERpZ2l0KG8+Pj4xLGk8PDE1fHMpfXJldHVybiBlfXN0YXRpYyBfX2Fic29sdXRlTW9kU21hbGwoXyx0KXtsZXQgZT0wO2ZvcihsZXQgbj0yKl8ubGVuZ3RoLTE7MDw9bjtuLS0pe2NvbnN0IGk9KGU8PDE1fF8uX19oYWxmRGlnaXQobikpPj4+MDtlPTB8aSV0fXJldHVybiBlfXN0YXRpYyBfX2Fic29sdXRlRGl2TGFyZ2UoaSxfLHQsZSl7Y29uc3QgZz1fLl9faGFsZkRpZ2l0TGVuZ3RoKCksbj1fLmxlbmd0aCxvPWkuX19oYWxmRGlnaXRMZW5ndGgoKS1nO2xldCBzPW51bGw7dCYmKHM9bmV3IEpTQkkobysyPj4+MSwhMSkscy5fX2luaXRpYWxpemVEaWdpdHMoKSk7Y29uc3QgbD1uZXcgSlNCSShnKzI+Pj4xLCExKTtsLl9faW5pdGlhbGl6ZURpZ2l0cygpO2NvbnN0IHI9SlNCSS5fX2NsejE1KF8uX19oYWxmRGlnaXQoZy0xKSk7MDxyJiYoXz1KU0JJLl9fc3BlY2lhbExlZnRTaGlmdChfLHIsMCkpO2NvbnN0IGE9SlNCSS5fX3NwZWNpYWxMZWZ0U2hpZnQoaSxyLDEpLHU9Xy5fX2hhbGZEaWdpdChnLTEpO2xldCBkPTA7Zm9yKGxldCByLGg9bzswPD1oO2gtLSl7cj0zMjc2Nztjb25zdCBpPWEuX19oYWxmRGlnaXQoaCtnKTtpZihpIT09dSl7Y29uc3QgdD0oaTw8MTV8YS5fX2hhbGZEaWdpdChoK2ctMSkpPj4+MDtyPTB8dC91O2xldCBlPTB8dCV1O2NvbnN0IG49Xy5fX2hhbGZEaWdpdChnLTIpLG89YS5fX2hhbGZEaWdpdChoK2ctMik7Zm9yKDtKU0JJLl9faW11bChyLG4pPj4+MD4oZTw8MTZ8byk+Pj4wJiYoci0tLGUrPXUsISgzMjc2NzxlKSk7KTt9SlNCSS5fX2ludGVybmFsTXVsdGlwbHlBZGQoXyxyLDAsbixsKTtsZXQgZT1hLl9faW5wbGFjZVN1YihsLGgsZysxKTswIT09ZSYmKGU9YS5fX2lucGxhY2VBZGQoXyxoLGcpLGEuX19zZXRIYWxmRGlnaXQoaCtnLDMyNzY3JmEuX19oYWxmRGlnaXQoaCtnKStlKSxyLS0pLHQmJigxJmg/ZD1yPDwxNTpzLl9fc2V0RGlnaXQoaD4+PjEsZHxyKSl9aWYoZSlyZXR1cm4gYS5fX2lucGxhY2VSaWdodFNoaWZ0KHIpLHQ/e3F1b3RpZW50OnMscmVtYWluZGVyOmF9OmE7aWYodClyZXR1cm4gczt0aHJvdyBuZXcgRXJyb3IoXCJ1bnJlYWNoYWJsZVwiKX1zdGF0aWMgX19jbHoxNShpKXtyZXR1cm4gSlNCSS5fX2NsejMwKGkpLTE1fV9faW5wbGFjZUFkZChfLHQsZSl7bGV0IG49MDtmb3IobGV0IGc9MDtnPGU7ZysrKXtjb25zdCBpPXRoaXMuX19oYWxmRGlnaXQodCtnKStfLl9faGFsZkRpZ2l0KGcpK247bj1pPj4+MTUsdGhpcy5fX3NldEhhbGZEaWdpdCh0K2csMzI3NjcmaSl9cmV0dXJuIG59X19pbnBsYWNlU3ViKF8sdCxlKXtsZXQgbj0wO2lmKDEmdCl7dD4+PTE7bGV0IGc9dGhpcy5fX2RpZ2l0KHQpLG89MzI3NjcmZyxzPTA7Zm9yKDtzPGUtMT4+PjE7cysrKXtjb25zdCBpPV8uX19kaWdpdChzKSxlPShnPj4+MTUpLSgzMjc2NyZpKS1uO249MSZlPj4+MTUsdGhpcy5fX3NldERpZ2l0KHQrcywoMzI3NjcmZSk8PDE1fDMyNzY3Jm8pLGc9dGhpcy5fX2RpZ2l0KHQrcysxKSxvPSgzMjc2NyZnKS0oaT4+PjE1KS1uLG49MSZvPj4+MTV9Y29uc3QgaT1fLl9fZGlnaXQocyksbD0oZz4+PjE1KS0oMzI3NjcmaSktbjtuPTEmbD4+PjE1LHRoaXMuX19zZXREaWdpdCh0K3MsKDMyNzY3JmwpPDwxNXwzMjc2NyZvKTtpZih0K3MrMT49dGhpcy5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJvdXQgb2YgYm91bmRzXCIpOzA9PSgxJmUpJiYoZz10aGlzLl9fZGlnaXQodCtzKzEpLG89KDMyNzY3JmcpLShpPj4+MTUpLW4sbj0xJm8+Pj4xNSx0aGlzLl9fc2V0RGlnaXQodCtfLmxlbmd0aCwxMDczNzA5MDU2Jmd8MzI3NjcmbykpfWVsc2V7dD4+PTE7bGV0IGc9MDtmb3IoO2c8Xy5sZW5ndGgtMTtnKyspe2NvbnN0IGk9dGhpcy5fX2RpZ2l0KHQrZyksZT1fLl9fZGlnaXQoZyksbz0oMzI3NjcmaSktKDMyNzY3JmUpLW47bj0xJm8+Pj4xNTtjb25zdCBzPShpPj4+MTUpLShlPj4+MTUpLW47bj0xJnM+Pj4xNSx0aGlzLl9fc2V0RGlnaXQodCtnLCgzMjc2NyZzKTw8MTV8MzI3Njcmbyl9Y29uc3QgaT10aGlzLl9fZGlnaXQodCtnKSxvPV8uX19kaWdpdChnKSxzPSgzMjc2NyZpKS0oMzI3NjcmbyktbjtuPTEmcz4+PjE1O2xldCBsPTA7MD09KDEmZSkmJihsPShpPj4+MTUpLShvPj4+MTUpLW4sbj0xJmw+Pj4xNSksdGhpcy5fX3NldERpZ2l0KHQrZywoMzI3NjcmbCk8PDE1fDMyNzY3JnMpfXJldHVybiBufV9faW5wbGFjZVJpZ2h0U2hpZnQoXyl7aWYoMD09PV8pcmV0dXJuO2xldCB0PXRoaXMuX19kaWdpdCgwKT4+Pl87Y29uc3QgZT10aGlzLmxlbmd0aC0xO2ZvcihsZXQgbj0wO248ZTtuKyspe2NvbnN0IGk9dGhpcy5fX2RpZ2l0KG4rMSk7dGhpcy5fX3NldERpZ2l0KG4sMTA3Mzc0MTgyMyZpPDwzMC1ffHQpLHQ9aT4+Pl99dGhpcy5fX3NldERpZ2l0KGUsdCl9c3RhdGljIF9fc3BlY2lhbExlZnRTaGlmdChfLHQsZSl7Y29uc3QgZz1fLmxlbmd0aCxuPW5ldyBKU0JJKGcrZSwhMSk7aWYoMD09PXQpe2ZvcihsZXQgdD0wO3Q8Zzt0Kyspbi5fX3NldERpZ2l0KHQsXy5fX2RpZ2l0KHQpKTtyZXR1cm4gMDxlJiZuLl9fc2V0RGlnaXQoZywwKSxufWxldCBvPTA7Zm9yKGxldCBzPTA7czxnO3MrKyl7Y29uc3QgaT1fLl9fZGlnaXQocyk7bi5fX3NldERpZ2l0KHMsMTA3Mzc0MTgyMyZpPDx0fG8pLG89aT4+PjMwLXR9cmV0dXJuIDA8ZSYmbi5fX3NldERpZ2l0KGcsbyksbn1zdGF0aWMgX19sZWZ0U2hpZnRCeUFic29sdXRlKF8saSl7Y29uc3QgdD1KU0JJLl9fdG9TaGlmdEFtb3VudChpKTtpZigwPnQpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCaWdJbnQgdG9vIGJpZ1wiKTtjb25zdCBlPTB8dC8zMCxuPXQlMzAsZz1fLmxlbmd0aCxvPTAhPT1uJiYwIT1fLl9fZGlnaXQoZy0xKT4+PjMwLW4scz1nK2UrKG8/MTowKSxsPW5ldyBKU0JJKHMsXy5zaWduKTtpZigwPT09bil7bGV0IHQ9MDtmb3IoO3Q8ZTt0KyspbC5fX3NldERpZ2l0KHQsMCk7Zm9yKDt0PHM7dCsrKWwuX19zZXREaWdpdCh0LF8uX19kaWdpdCh0LWUpKX1lbHNle2xldCB0PTA7Zm9yKGxldCBfPTA7XzxlO18rKylsLl9fc2V0RGlnaXQoXywwKTtmb3IobGV0IG89MDtvPGc7bysrKXtjb25zdCBpPV8uX19kaWdpdChvKTtsLl9fc2V0RGlnaXQobytlLDEwNzM3NDE4MjMmaTw8bnx0KSx0PWk+Pj4zMC1ufWlmKG8pbC5fX3NldERpZ2l0KGcrZSx0KTtlbHNlIGlmKDAhPT10KXRocm93IG5ldyBFcnJvcihcImltcGxlbWVudGF0aW9uIGJ1Z1wiKX1yZXR1cm4gbC5fX3RyaW0oKX1zdGF0aWMgX19yaWdodFNoaWZ0QnlBYnNvbHV0ZShfLGkpe2NvbnN0IHQ9Xy5sZW5ndGgsZT1fLnNpZ24sbj1KU0JJLl9fdG9TaGlmdEFtb3VudChpKTtpZigwPm4pcmV0dXJuIEpTQkkuX19yaWdodFNoaWZ0QnlNYXhpbXVtKGUpO2NvbnN0IGc9MHxuLzMwLG89biUzMDtsZXQgcz10LWc7aWYoMD49cylyZXR1cm4gSlNCSS5fX3JpZ2h0U2hpZnRCeU1heGltdW0oZSk7bGV0IGw9ITE7aWYoZSl7aWYoMCE9KF8uX19kaWdpdChnKSYoMTw8byktMSkpbD0hMDtlbHNlIGZvcihsZXQgdD0wO3Q8Zzt0KyspaWYoMCE9PV8uX19kaWdpdCh0KSl7bD0hMDticmVha319aWYobCYmMD09PW8pe2NvbnN0IGk9Xy5fX2RpZ2l0KHQtMSk7MD09fmkmJnMrK31sZXQgcj1uZXcgSlNCSShzLGUpO2lmKDA9PT1vKXtyLl9fc2V0RGlnaXQocy0xLDApO2ZvcihsZXQgZT1nO2U8dDtlKyspci5fX3NldERpZ2l0KGUtZyxfLl9fZGlnaXQoZSkpfWVsc2V7bGV0IGU9Xy5fX2RpZ2l0KGcpPj4+bztjb25zdCBuPXQtZy0xO2ZvcihsZXQgdD0wO3Q8bjt0Kyspe2NvbnN0IGk9Xy5fX2RpZ2l0KHQrZysxKTtyLl9fc2V0RGlnaXQodCwxMDczNzQxODIzJmk8PDMwLW98ZSksZT1pPj4+b31yLl9fc2V0RGlnaXQobixlKX1yZXR1cm4gbCYmKHI9SlNCSS5fX2Fic29sdXRlQWRkT25lKHIsITAscikpLHIuX190cmltKCl9c3RhdGljIF9fcmlnaHRTaGlmdEJ5TWF4aW11bShpKXtyZXR1cm4gaT9KU0JJLl9fb25lRGlnaXQoMSwhMCk6SlNCSS5fX3plcm8oKX1zdGF0aWMgX190b1NoaWZ0QW1vdW50KGkpe2lmKDE8aS5sZW5ndGgpcmV0dXJuLTE7Y29uc3QgXz1pLl9fdW5zaWduZWREaWdpdCgwKTtyZXR1cm4gXz5KU0JJLl9fa01heExlbmd0aEJpdHM/LTE6X31zdGF0aWMgX190b1ByaW1pdGl2ZShpLF89XCJkZWZhdWx0XCIpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBpKXJldHVybiBpO2lmKGkuY29uc3RydWN0b3I9PT1KU0JJKXJldHVybiBpO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wudG9QcmltaXRpdmUpe2NvbnN0IHQ9aVtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHQpe2NvbnN0IGk9dChfKTtpZihcIm9iamVjdFwiIT10eXBlb2YgaSlyZXR1cm4gaTt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKX19Y29uc3QgdD1pLnZhbHVlT2Y7aWYodCl7Y29uc3QgXz10LmNhbGwoaSk7aWYoXCJvYmplY3RcIiE9dHlwZW9mIF8pcmV0dXJuIF99Y29uc3QgZT1pLnRvU3RyaW5nO2lmKGUpe2NvbnN0IF89ZS5jYWxsKGkpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBfKXJldHVybiBffXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpfXN0YXRpYyBfX3RvTnVtZXJpYyhpKXtyZXR1cm4gSlNCSS5fX2lzQmlnSW50KGkpP2k6K2l9c3RhdGljIF9faXNCaWdJbnQoaSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGkmJm51bGwhPT1pJiZpLmNvbnN0cnVjdG9yPT09SlNCSX1zdGF0aWMgX190cnVuY2F0ZVRvTkJpdHMoaSxfKXtjb25zdCB0PTB8KGkrMjkpLzMwLGU9bmV3IEpTQkkodCxfLnNpZ24pLG49dC0xO2ZvcihsZXQgdD0wO3Q8bjt0KyspZS5fX3NldERpZ2l0KHQsXy5fX2RpZ2l0KHQpKTtsZXQgZz1fLl9fZGlnaXQobik7aWYoMCE9aSUzMCl7Y29uc3QgXz0zMi1pJTMwO2c9Zzw8Xz4+Pl99cmV0dXJuIGUuX19zZXREaWdpdChuLGcpLGUuX190cmltKCl9c3RhdGljIF9fdHJ1bmNhdGVBbmRTdWJGcm9tUG93ZXJPZlR3byhfLHQsZSl7dmFyIG49TWF0aC5taW47Y29uc3QgZz0wfChfKzI5KS8zMCxvPW5ldyBKU0JJKGcsZSk7bGV0IHM9MDtjb25zdCBsPWctMTtsZXQgYT0wO2Zvcihjb25zdCBpPW4obCx0Lmxlbmd0aCk7czxpO3MrKyl7Y29uc3QgaT0wLXQuX19kaWdpdChzKS1hO2E9MSZpPj4+MzAsby5fX3NldERpZ2l0KHMsMTA3Mzc0MTgyMyZpKX1mb3IoO3M8bDtzKyspby5fX3NldERpZ2l0KHMsMHwxMDczNzQxODIzJi1hKTtsZXQgdT1sPHQubGVuZ3RoP3QuX19kaWdpdChsKTowO2NvbnN0IGQ9XyUzMDtsZXQgaDtpZigwPT1kKWg9MC11LWEsaCY9MTA3Mzc0MTgyMztlbHNle2NvbnN0IGk9MzItZDt1PXU8PGk+Pj5pO2NvbnN0IF89MTw8MzItaTtoPV8tdS1hLGgmPV8tMX1yZXR1cm4gby5fX3NldERpZ2l0KGwsaCksby5fX3RyaW0oKX1fX2RpZ2l0KF8pe3JldHVybiB0aGlzW19dfV9fdW5zaWduZWREaWdpdChfKXtyZXR1cm4gdGhpc1tfXT4+PjB9X19zZXREaWdpdChfLGkpe3RoaXNbX109MHxpfV9fc2V0RGlnaXRHcm93KF8saSl7dGhpc1tfXT0wfGl9X19oYWxmRGlnaXRMZW5ndGgoKXtjb25zdCBpPXRoaXMubGVuZ3RoO3JldHVybiAzMjc2Nz49dGhpcy5fX3Vuc2lnbmVkRGlnaXQoaS0xKT8yKmktMToyKml9X19oYWxmRGlnaXQoXyl7cmV0dXJuIDMyNzY3JnRoaXNbXz4+PjFdPj4+MTUqKDEmXyl9X19zZXRIYWxmRGlnaXQoXyxpKXtjb25zdCB0PV8+Pj4xLGU9dGhpcy5fX2RpZ2l0KHQpLG49MSZfPzMyNzY3JmV8aTw8MTU6MTA3MzcwOTA1NiZlfDMyNzY3Jmk7dGhpcy5fX3NldERpZ2l0KHQsbil9c3RhdGljIF9fZGlnaXRQb3coaSxfKXtsZXQgdD0xO2Zvcig7MDxfOykxJl8mJih0Kj1pKSxfPj4+PTEsaSo9aTtyZXR1cm4gdH1zdGF0aWMgX19pc09uZURpZ2l0SW50KGkpe3JldHVybigxMDczNzQxODIzJmkpPT09aX19SlNCSS5fX2tNYXhMZW5ndGg9MzM1NTQ0MzIsSlNCSS5fX2tNYXhMZW5ndGhCaXRzPUpTQkkuX19rTWF4TGVuZ3RoPDw1LEpTQkkuX19rTWF4Qml0c1BlckNoYXI9WzAsMCwzMiw1MSw2NCw3NSw4Myw5MCw5NiwxMDIsMTA3LDExMSwxMTUsMTE5LDEyMiwxMjYsMTI4LDEzMSwxMzQsMTM2LDEzOSwxNDEsMTQzLDE0NSwxNDcsMTQ5LDE1MSwxNTMsMTU0LDE1NiwxNTgsMTU5LDE2MCwxNjIsMTYzLDE2NSwxNjZdLEpTQkkuX19rQml0c1BlckNoYXJUYWJsZVNoaWZ0PTUsSlNCSS5fX2tCaXRzUGVyQ2hhclRhYmxlTXVsdGlwbGllcj0xPDxKU0JJLl9fa0JpdHNQZXJDaGFyVGFibGVTaGlmdCxKU0JJLl9fa0NvbnZlcnNpb25DaGFycz1bXCIwXCIsXCIxXCIsXCIyXCIsXCIzXCIsXCI0XCIsXCI1XCIsXCI2XCIsXCI3XCIsXCI4XCIsXCI5XCIsXCJhXCIsXCJiXCIsXCJjXCIsXCJkXCIsXCJlXCIsXCJmXCIsXCJnXCIsXCJoXCIsXCJpXCIsXCJqXCIsXCJrXCIsXCJsXCIsXCJtXCIsXCJuXCIsXCJvXCIsXCJwXCIsXCJxXCIsXCJyXCIsXCJzXCIsXCJ0XCIsXCJ1XCIsXCJ2XCIsXCJ3XCIsXCJ4XCIsXCJ5XCIsXCJ6XCJdLEpTQkkuX19rQml0Q29udmVyc2lvbkJ1ZmZlcj1uZXcgQXJyYXlCdWZmZXIoOCksSlNCSS5fX2tCaXRDb252ZXJzaW9uRG91YmxlPW5ldyBGbG9hdDY0QXJyYXkoSlNCSS5fX2tCaXRDb252ZXJzaW9uQnVmZmVyKSxKU0JJLl9fa0JpdENvbnZlcnNpb25JbnRzPW5ldyBJbnQzMkFycmF5KEpTQkkuX19rQml0Q29udmVyc2lvbkJ1ZmZlciksSlNCSS5fX2NsejMwPU1hdGguY2x6MzI/ZnVuY3Rpb24oaSl7cmV0dXJuIE1hdGguY2x6MzIoaSktMn06ZnVuY3Rpb24oaSl7cmV0dXJuIDA9PT1pPzMwOjB8MjktKDB8TWF0aC5sb2coaT4+PjApL01hdGguTE4yKX0sSlNCSS5fX2ltdWw9TWF0aC5pbXVsfHxmdW5jdGlvbihpLF8pe3JldHVybiAwfGkqX307ZXhwb3J0IGRlZmF1bHQgSlNCSTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzYmkubWpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../node_modules/.pnpm/jsbi@3.2.5/node_modules/jsbi/dist/jsbi.mjs\n");

/***/ })

};
;