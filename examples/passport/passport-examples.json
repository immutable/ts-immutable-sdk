{
  "logged-in-user-with-nextjs": {
    "tutorial": "# Logged-in User Data with Next.js\n\nThis tutorial demonstrates how to retrieve and display user information, linked addresses, and verify tokens after login with Immutable Passport in a Next.js application.\n\n## Introduction\n\nThe Logged-in User Data with Next.js example app showcases how to work with user data after successful authentication with Immutable Passport. The app demonstrates three key post-login features:\n\n- Retrieving and displaying user profile information\n- Getting a list of linked wallet addresses\n- Retrieving and verifying ID and access tokens\n\nThis example serves as a reference implementation for developers who need to access user data after authentication in their Next.js applications.\n\n## Prerequisites\n\nTo run this example, you'll need:\n\n- Node.js (v18 or later)\n- npm, yarn, or pnpm for package management\n- An Immutable Developer Hub account\n- A registered application with Client ID and Publishable Key from the Immutable Developer Hub\n- Basic familiarity with Next.js and React\n\n## Project Structure\n\n```\nlogged-in-user-with-nextjs/\n├── src/\n│   ├── app/\n│   │   ├── user-info-with-passport/     # User profile info implementation\n│   │   ├── linked-addresses-with-passport/ # Linked addresses implementation\n│   │   ├── verify-tokens-with-nextjs/   # Token verification implementation\n│   │   ├── redirect/                    # Redirect handler for authentication flow\n│   │   ├── utils/                       # Setup utilities and configurations\n│   │   │   └── setupDefault.ts          # Default Passport configuration\n│   │   ├── page.tsx                     # Main navigation page\n│   │   └── layout.tsx                   # App layout with providers\n├── .env.example                         # Example environment variables\n├── package.json                         # Project dependencies\n└── tsconfig.json                        # TypeScript configuration\n```\n\n## Code Walkthrough\n\n### SDK Integration Walkthrough\n\n#### Initializing the Passport SDK\n\nThe Immutable Passport SDK is initialized in the `src/app/utils/setupDefault.ts` file:\n\n```typescript\nimport { config, passport } from '@imtbl/sdk';\n\nexport const passportInstance = new passport.Passport({\n    baseConfig: {\n      environment: config.Environment.SANDBOX, // or config.Environment.PRODUCTION\n      publishableKey:\n        process.env.NEXT_PUBLIC_PUBLISHABLE_KEY || '<YOUR_PUBLISHABLE_KEY>',\n    },\n    clientId: process.env.NEXT_PUBLIC_CLIENT_ID || '<YOUR_CLIENT_ID>',\n    redirectUri: 'http://localhost:3000/redirect',\n    logoutRedirectUri: 'http://localhost:3000/logout',\n    audience: 'platform_api',\n    scope: 'openid offline_access email transact',\n});\n```\n\nThis configuration initializes the Passport instance with the necessary parameters for authentication and user data access.\n\n#### Retrieving User Profile Information\n\nThe user profile information retrieval is implemented in `src/app/user-info-with-passport/page.tsx`. After successful login, you can retrieve the user's profile information:\n\n```typescript\nconst loginWithPassport = async () => {\n  if (!passportInstance) return;\n  try {\n    const provider = await passportInstance.connectEvm();\n    const accounts = await provider.request({ method: 'eth_requestAccounts' });\n    \n    // Retrieve user profile information\n    const userProfileData = await passportInstance.getUserInfo();\n    \n    if (accounts) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null);\n      setUserProfile(userProfileData || null);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThe `getUserInfo()` method returns an object containing user information such as email, nickname, and subject identifier (sub). This information is displayed in a table format to show the user's profile details.\n\n#### Getting Linked Addresses\n\nThe linked addresses retrieval is demonstrated in `src/app/linked-addresses-with-passport/page.tsx`. After authentication, you can get a list of wallet addresses linked to the user's Immutable Passport account:\n\n```typescript\nconst loginWithPassport = async () => {\n  if (!passportInstance) return;\n  try {\n    const provider = await passportInstance.connectEvm();\n    const accounts = await provider.request({ method: 'eth_requestAccounts' });\n    if (accounts) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null);\n      \n      // Retrieve linked addresses\n      const addresses = await passportInstance.getLinkedAddresses();\n      \n      setLinkedAddresses(addresses || []);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThe `getLinkedAddresses()` method returns an array of addresses associated with the user's account. This is useful for applications that need to verify wallet ownership or provide wallet-specific functionality.\n\n#### Retrieving and Verifying Tokens\n\nThe token verification feature is implemented in `src/app/verify-tokens-with-nextjs/page.tsx`. This component demonstrates how to retrieve the ID token and access token:\n\n```typescript\nconst loginWithPassport = async () => {\n  if (!passportInstance) return;\n  try {\n    const provider = await passportInstance.connectEvm();\n    const accounts = await provider.request({ method: 'eth_requestAccounts' });\n    \n    // Retrieve ID token\n    const idToken = await passportInstance.getIdToken();\n    \n    // Retrieve access token\n    const accessToken = await passportInstance.getAccessToken();\n    \n    if (accounts) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null);\n      setIdToken(idToken || null);\n      setAccessToken(accessToken || null);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThese tokens are important for:\n- **ID Token**: Contains user identity information and can be verified for authentication purposes\n- **Access Token**: Used for making authorized API requests to Immutable services\n\nThe tokens can be displayed for debugging purposes or used in API calls requiring authentication.\n\n### Navigation Structure\n\nThe main page (`src/app/page.tsx`) provides navigation buttons to the three different examples:\n\n```typescript\nexport default function Home() {\n  return (<>\n      <Heading size=\"medium\" className=\"mb-1\">\n        User Information after Logging In with NextJS\n      </Heading>\n      <Button className=\"mb-1\" size=\"medium\" \n        rc={<NextLink href=\"/linked-addresses-with-passport\" />}>\n        Linked Addresses with Passport\n      </Button> \n      <Button className=\"mb-1\" size=\"medium\" \n        rc={<NextLink href=\"/user-info-with-passport\" />}>\n        User Info with Passport\n      </Button> \n      <Button className=\"mb-1\" size=\"medium\" \n        rc={<NextLink href=\"/verify-tokens-with-nextjs\" />}>\n        Verify Tokens with NextJS\n      </Button> \n  </>);\n}\n```\n\nThis structure allows users to navigate between different user data retrieval examples easily.\n\n### Environment Configuration\n\nThe application uses environment variables for configuration. Required variables are defined in `.env.example`:\n\n```\nNEXT_PUBLIC_CLIENT_ID=\"your-client-id\"\nNEXT_PUBLIC_PUBLISHABLE_KEY=\"your-publishable-key\"\n```\n\nTo run the application, you need to:\n1. Copy `.env.example` to `.env.local`\n2. Replace placeholder values with your actual Client ID and Publishable Key from the Immutable Developer Hub\n\n## Running the App\n\nFollow these steps to run the example locally:\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   # or\n   yarn install\n   # or\n   pnpm install\n   ```\n3. Create a `.env.local` file with your credentials:\n   ```\n   NEXT_PUBLIC_CLIENT_ID=\"your-client-id\"\n   NEXT_PUBLIC_PUBLISHABLE_KEY=\"your-publishable-key\"\n   ```\n4. Start the development server:\n   ```bash\n   npm run dev\n   # or\n   yarn dev\n   # or\n   pnpm dev\n   ```\n5. Open [http://localhost:3000](http://localhost:3000) in your browser\n6. Try the different examples using the navigation buttons\n\n## Summary\n\nThis example demonstrates how to work with user data after authentication with Immutable Passport in a Next.js application:\n\n- **User Profile Information**: Retrieve and display user details such as email and nickname\n- **Linked Addresses**: Get a list of wallet addresses associated with the user's account\n- **Token Verification**: Retrieve and display ID and access tokens for authentication and API calls\n\nThe example provides a foundation for implementing user-related features in your Immutable-powered applications. By understanding these patterns, you can enhance your application with user-specific functionality while ensuring proper authentication and authorization. ",
    "metadata": {
      "title": "Logged-in User Data with Next.js",
      "description": "Example demonstrating how to retrieve and display user information, linked addresses, and verify tokens after login with Immutable Passport in a Next.js application",
      "keywords": [
        "Passport",
        "Next.js",
        "Authentication",
        "User Data",
        "Linked Addresses",
        "Token Verification",
        "Web3"
      ],
      "tech_stack": [
        "TypeScript",
        "Next.js",
        "React",
        "Immutable SDK"
      ],
      "category": "Passport",
      "programming_language": "TypeScript"
    }
  },
  "login-with-nextjs": {
    "tutorial": "# Passport Login with Next.js\n\nThis tutorial demonstrates various ways to implement login and logout flows with Immutable Passport in a Next.js application.\n\n## Introduction\n\nThe Passport Login with Next.js example app showcases different authentication approaches using Immutable Passport. The app demonstrates multiple implementation patterns for integrating Passport authentication in a Next.js application, including:\n\n- Standard Passport login flow\n- Integration with EtherJS for Web3 functionality\n- Identity-only login approach\n- Two different logout modes: redirect and silent\n\nThis example serves as a reference implementation for developers looking to integrate Immutable Passport authentication into their Next.js applications.\n\n## Prerequisites\n\nTo run this example, you'll need:\n\n- Node.js (v18 or later)\n- npm, yarn, or pnpm for package management\n- An Immutable Developer Hub account\n- A registered application with Client ID and Publishable Key from the Immutable Developer Hub\n- Basic familiarity with Next.js and React\n\n## Project Structure\n\n```\nlogin-with-nextjs/\n├── src/\n│   ├── app/\n│   │   ├── login-with-passport/      # Standard Passport login implementation\n│   │   ├── login-with-etherjs/       # EtherJS integration example\n│   │   ├── login-with-identity-only/ # Identity-only login approach\n│   │   ├── logout-with-redirect-mode/# Redirect mode logout implementation\n│   │   ├── logout-with-silent-mode/  # Silent mode logout implementation\n│   │   ├── redirect/                 # Redirect handler for authentication flow\n│   │   ├── logout/                   # Logout redirect handler\n│   │   ├── utils/                    # Setup utilities and configurations\n│   │   │   ├── setupDefault.ts       # Default Passport configuration\n│   │   │   ├── setupLogoutRedirect.ts# Redirect mode configuration\n│   │   │   ├── setupLogoutSilent.ts  # Silent mode configuration\n│   │   │   └── wrapper.tsx           # App wrapper component\n│   │   ├── page.tsx                  # Main navigation page\n│   │   └── layout.tsx                # App layout with providers\n├── .env.example                      # Example environment variables\n├── package.json                      # Project dependencies\n└── tsconfig.json                     # TypeScript configuration\n```\n\n## Code Walkthrough\n\n### SDK Integration Walkthrough\n\n#### Initializing the Passport SDK\n\nThe Immutable Passport SDK is initialized in the utility files located in the `src/app/utils/` directory. The default configuration is set up in `setupDefault.ts`:\n\n```typescript\nimport { config, passport } from '@imtbl/sdk';\n\nexport const passportInstance = new passport.Passport({\n    baseConfig: {\n      environment: config.Environment.SANDBOX, // or config.Environment.PRODUCTION\n      publishableKey:\n        process.env.NEXT_PUBLIC_PUBLISHABLE_KEY || '<YOUR_PUBLISHABLE_KEY>', // replace with your publishable API key from Hub\n    },\n    clientId: process.env.NEXT_PUBLIC_CLIENT_ID || '<YOUR_CLIENT_ID>', // replace with your client ID from Hub\n    redirectUri: 'http://localhost:3000/redirect', // replace with one of your redirect URIs from Hub\n    logoutRedirectUri: 'http://localhost:3000/logout', // replace with one of your logout URIs from Hub\n    audience: 'platform_api',\n    scope: 'openid offline_access email transact',\n});\n```\n\nKey configuration parameters include:\n- **environment**: Set to SANDBOX for testing or PRODUCTION for live applications\n- **publishableKey**: Your API key from the Immutable Developer Hub\n- **clientId**: Your client ID from the Immutable Developer Hub\n- **redirectUri**: The URI where users will be redirected after authentication\n- **logoutRedirectUri**: The URI where users will be redirected after logout\n- **audience**: The API audience for authentication tokens\n- **scope**: The permission scopes requested for the user\n\n#### Standard Login with Passport\n\nThe standard Passport login implementation is found in `src/app/login-with-passport/page.tsx`. This approach directly uses the Passport instance to connect to an EVM provider:\n\n```typescript\nconst loginWithPassport = async () => {\n  if (!passportInstance) return;\n  try {\n    const provider = await passportInstance.connectEvm();\n    const accounts = await provider.request({ method: 'eth_requestAccounts' });\n    if (accounts) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null); \n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThis implementation:\n1. Requests an EVM provider connection from the Passport instance\n2. Uses the provider to request user accounts\n3. Updates the application state with login status and account address\n\n#### Integration with EtherJS\n\nFor applications requiring EtherJS functionality, the example in `src/app/login-with-etherjs/page.tsx` demonstrates how to integrate EtherJS with Passport:\n\n```typescript\nconst loginWithEthersjs = async () => {\n  if (!passportInstance) return;\n  try {\n    const passportProvider = await passportInstance.connectEvm();\n    const web3Provider = new BrowserProvider(passportProvider);\n    const accounts = await web3Provider.send('eth_requestAccounts', []);\n    if (accounts && accounts.length > 0) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null);\n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport with Ethers.js:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThis approach:\n1. Obtains an EVM provider from Passport\n2. Wraps it with EtherJS's BrowserProvider for Web3 functionality\n3. Uses the EtherJS provider to request accounts\n\n#### Identity-Only Login\n\nThe Identity-only login approach provides a simplified authentication method for applications that only require user identity verification without wallet functionality. This implementation is found in the `src/app/login-with-identity-only/` directory and demonstrates how to authenticate users without requiring wallet access.\n\n#### Logout Implementations\n\nThe example demonstrates two different logout modes:\n\n##### Redirect Mode Logout\n\nFound in `src/app/logout-with-redirect-mode/page.tsx`, this implementation redirects users to the specified logout URI after logging out:\n\n```typescript\nconst logout = async () => {\n  if (!passportInstance || !isLoggedIn) return;\n  try {\n    await passportInstance.logout();\n    setIsLoggedIn(false);\n    setAccountAddress(null);\n  } catch (error) {\n    console.error('Error disconnecting:', error);\n  }\n};\n```\n\nThe redirect mode is configured in `setupLogoutRedirect.ts` with the `logoutMode: 'redirect'` option:\n\n```typescript\nexport const passportInstance = new passport.Passport({\n  // ...other config options\n  logoutMode: 'redirect',\n  logoutRedirectUri: 'http://localhost:3000/logout',\n  // ...other config options\n});\n```\n\nThis mode ensures that users are properly redirected to a specific page after logout, which can be useful for applications that need to display post-logout information or instructions.\n\n##### Silent Mode Logout\n\nThe silent mode logout implementation, found in `src/app/logout-with-silent-mode/page.tsx`, provides a logout experience without redirecting the user away from the application. This is configured in `setupLogoutSilent.ts`:\n\n```typescript\nexport const passportInstance = new passport.Passport({\n  // ...other config options\n  logoutMode: 'silent',\n  // ...other config options\n});\n```\n\nSilent mode maintains a better user experience by keeping users within the application context, making it ideal for single-page applications where maintaining the user's flow is important.\n\n### Environment Configuration\n\nThe application uses environment variables for configuration. Required variables are defined in `.env.example`:\n\n```\nNEXT_PUBLIC_CLIENT_ID=\"your-client-id\"\nNEXT_PUBLIC_PUBLISHABLE_KEY=\"your-publishable-key\"\n```\n\nTo run the application, you need to:\n1. Copy `.env.example` to `.env.local`\n2. Replace placeholder values with your actual Client ID and Publishable Key from the Immutable Developer Hub\n\n## Running the App\n\nFollow these steps to run the example locally:\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   # or\n   yarn install\n   # or\n   pnpm install\n   ```\n3. Create a `.env.local` file with your credentials:\n   ```\n   NEXT_PUBLIC_CLIENT_ID=\"your-client-id\"\n   NEXT_PUBLIC_PUBLISHABLE_KEY=\"your-publishable-key\"\n   ```\n4. Start the development server:\n   ```bash\n   npm run dev\n   # or\n   yarn dev\n   # or\n   pnpm dev\n   ```\n5. Open [http://localhost:3000](http://localhost:3000) in your browser\n6. Navigate through the different examples using the buttons on the home page\n\n## Summary\n\nThis example application demonstrates multiple approaches to integrating Immutable Passport authentication in a Next.js application:\n\n- **Standard Passport Login**: Direct integration with Passport for basic authentication\n- **EtherJS Integration**: Enhanced Web3 functionality using EtherJS with Passport\n- **Identity-only Login**: Simplified authentication for applications that don't require wallet functionality\n- **Multiple Logout Strategies**: Both redirect and silent modes for different user experience requirements\n\nThe example is structured to provide clear implementation patterns that developers can adapt for their own applications. By exploring these different approaches, you can select the authentication flow that best suits your application's needs, considering factors like user experience, security requirements, and integration complexity.\n\nThe modular organization of the codebase makes it easy to understand and extract specific components for use in your own projects, serving as both a reference implementation and a learning resource for Immutable Passport integration. ",
    "metadata": {
      "title": "Passport Login with Next.js",
      "description": "Example demonstrating different ways to implement login and logout flows with Immutable Passport in a Next.js application",
      "keywords": [
        "Passport",
        "Next.js",
        "Authentication",
        "Login",
        "Logout",
        "EtherJS",
        "Web3"
      ],
      "tech_stack": [
        "TypeScript",
        "Next.js",
        "React",
        "Immutable SDK",
        "EtherJS"
      ],
      "category": "Passport",
      "programming_language": "TypeScript"
    }
  },
  "telegram-mini-app": {
    "tutorial": "",
    "metadata": {}
  },
  "wallets-connect-with-nextjs": {
    "tutorial": "",
    "metadata": {}
  },
  "wallets-signing-with-nextjs": {
    "tutorial": "",
    "metadata": {}
  },
  "wallets-transactions-with-nextjs": {
    "tutorial": "",
    "metadata": {}
  }
}