FIRT PROMPT

I want you to go through the example app in the /examples/passport/login-with-nextjs directory. Here are the steps that you have to follow

1. Read the whole directory of the example app in /examples/passport/login-with-nextjs and get a very solid understanding of what the example app does and its detailed functionality, which includes the functionality of all code blocks.
2. Once you fully understand the example app, you must generate an MD file in the example app's root called tutorial.md. In this MD file, you must generate a code walkthrough of the example app with code snippets. Ensure that there is no ambiguity and all users will have a solid understanding of the implementation after reading the tutorial. Ensure that the MD file is formatted in a way where it can be rendered in the documentations website. The Code Snippets MUST be in the MD file.
3. Once you've completed the tutorial, in the example app's root, produce a JSON file called metadata.json which will include the metadata of the example app, including: title, description, keywords, Programming Language / Tech Stack, App Category, etc. This metadata JSON will also be a useful information to ensure that users are informed about the key characteristics of the example app. The JSON metadata content will also be surfaced in the documentations website.




SECOND PROMPT

I want you to analyze the example app in this directory. If this example app has no tutorial.md and metadata.json file, follow these steps:

1. Analyze the current directory and understand the app's functionality, covering key components, logic, and interactions.

Read and understand all relevant files in the example app directory.
Ensure a deep understanding of the app’s functionality, covering key components, logic, and interactions.
Identify core dependencies, frameworks, and technologies used.
2. Generate a Comprehensive Code Walkthrough (tutorial.md)

Create a tutorial.md file in the root of the example app.
The tutorial must be structured as follows:
Introduction: Overview of the app and its purpose.
Prerequisites: Dependencies and installation steps.
Project Structure: Brief breakdown of directories and key files.
Code Walkthrough:
SDK Integration Walkthrough:
How the SDK is initialized 
Explain core functionality with code snippets.
Highlight key files, their roles, and critical logic.
Ensure explanations are clear for both beginners and advanced users.
Running the App: Steps to execute the app locally.
Summary: A concise recap of the main points covered in the tutorial.
Ensure proper Markdown syntax, with consistent use of headings, code block formatting, bullet points, and other common Markdown elements to support readability on a documentation website.
3. Generate Metadata (metadata.json)

Create a metadata.json file in the root of the example app.
The JSON must include:
{
  "title": "<Example App Title>",
  "description": "<Brief overview of the app>",
  "keywords": ["<Keyword1>", "<Keyword2>", "..."],
  "tech_stack": ["<Language1>", "<Framework1>", "..."],
  "category": "<Type of SDK used by the example app (e.g., Passport, Checkout, Orderbook, etc.)>",
  "programming_language": "<Programming Language used by the example app (e.g., TypeScript, JavaScript, etc.)>"
}

Title: A short, descriptive title of the app.
Description: A brief but clear overview of the app's purpose and functionality.
Keywords: A list of relevant keywords that describe the app or its use cases.
Tech Stack: A list of major technologies, programming languages, and frameworks used in the app.
Category: The type of app (e.g., Web App, API, Mobile App, etc.).
Programming Language: The programming language used by the example app (e.g., TypeScript, JavaScript, etc.).
If tutorial.md or metadata.json exist but are incomplete, update them rather than creating new versions.

Notes on Edge Cases:
If an app has external dependencies or complex interactions (e.g., external APIs, cloud integrations), ensure the tutorial provides enough detail for users to understand and set these up.
For larger or more complex apps, consider breaking the tutorial into smaller, more manageable sections, such as separate tutorial files for different components of the app.


THIRD PROMPT

Task: Analyze the example app in the current directory. If it lacks tutorial.md and metadata.json, follow these steps:

1. Analyze the Example App (SDK Integration Focus)

Identify how the SDK is integrated into the Next.js app:
Where it is imported and initialized.
Which components or API routes interact with it.
What features of the SDK are demonstrated.
Document any required configurations (API keys, authentication tokens, environment variables).
Identify dependencies from package.json, especially SDK-related packages.
2. Generate tutorial.md (SDK-Centric Code Walkthrough)

Introduction: Explain what the SDK does and why this example app demonstrates it.
Prerequisites:
Required dependencies (package.json).
SDK installation and setup (npm install <sdk-package>).
Environment variables (API keys, authentication setup).
Project Structure: Highlight only files that deal with SDK integration.
SDK Integration Walkthrough (Main Section):
How the SDK is initialized 
How the SDK is used in key components (e.g., API routes, UI components).
How to customize or extend SDK usage.
Running the Example: Steps to start the app and test SDK functionality.
Summary: Recap the SDK’s key features demonstrated in the app.
3. Generate metadata.json (SDK-Centric Metadata)
{
  "title": "<SDK Name> Next.js Example",
  "description": "An example Next.js app demonstrating <SDK Name> integration.",
  "keywords": ["<SDK Name>", "Next.js", "<Feature1>", "<Feature2>"],
  "tech_stack": ["<SDK Name>", "Next.js", "React", "<Other Dependencies>"],
  "category": "SDK Example"
}
"SDK Name" must be included in "title", "keywords", and "tech_stack".
"category" should be "SDK Example" rather than "Web App".
4. Handling Existing Docs:

If tutorial.md exists but lacks SDK focus, rewrite the walkthrough to prioritize SDK integration.
If metadata.json exists but does not mention the SDK, update "title", "keywords", and "tech_stack" accordingly.