"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/sns-validator@0.3.5";
exports.ids = ["vendor-chunks/sns-validator@0.3.5"];
exports.modules = {

/***/ "(ssr)/../../../node_modules/.pnpm/sns-validator@0.3.5/node_modules/sns-validator/index.js":
/*!*******************************************************************************************!*\
  !*** ../../../node_modules/.pnpm/sns-validator@0.3.5/node_modules/sns-validator/index.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar url = __webpack_require__(/*! url */ \"url\"),\n    https = __webpack_require__(/*! https */ \"https\"),\n    crypto = __webpack_require__(/*! crypto */ \"crypto\"),\n    defaultEncoding = 'utf8',\n    defaultHostPattern = /^sns\\.[a-zA-Z0-9\\-]{3,}\\.amazonaws\\.com(\\.cn)?$/,\n    certCache = {},\n    subscriptionControlKeys = ['SubscribeURL', 'Token'],\n    subscriptionControlMessageTypes = [\n        'SubscriptionConfirmation',\n        'UnsubscribeConfirmation'\n    ],\n    requiredKeys = [\n        'Message',\n        'MessageId',\n        'Timestamp',\n        'TopicArn',\n        'Type',\n        'Signature',\n        'SigningCertURL',\n        'SignatureVersion'\n    ],\n    signableKeysForNotification = [\n        'Message',\n        'MessageId',\n        'Subject',\n        'SubscribeURL',\n        'Timestamp',\n        'TopicArn',\n        'Type'\n    ],\n    signableKeysForSubscription = [\n        'Message',\n        'MessageId',\n        'Subject',\n        'SubscribeURL',\n        'Timestamp',\n        'Token',\n        'TopicArn',\n        'Type'\n    ],\n    lambdaMessageKeys = {\n        'SigningCertUrl': 'SigningCertURL',\n        'UnsubscribeUrl': 'UnsubscribeURL'\n    };\n\nvar hashHasKeys = function (hash, keys) {\n    for (var i = 0; i < keys.length; i++) {\n        if (!(keys[i] in hash)) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nvar indexOf = function (array, value) {\n    for (var i = 0; i < array.length; i++) {\n        if (value === array[i]) {\n            return i;\n        }\n    }\n\n    return -1;\n};\n\nfunction convertLambdaMessage(message) {\n    for (var key in lambdaMessageKeys) {\n        if (key in message) {\n            message[lambdaMessageKeys[key]] = message[key];\n        }\n    }\n\n    if ('Subject' in message && message.Subject === null) {\n        delete message.Subject;\n    }\n\n    return message;\n}\n\nvar validateMessageStructure = function (message) {\n    var valid = hashHasKeys(message, requiredKeys);\n\n    if (indexOf(subscriptionControlMessageTypes, message['Type']) > -1) {\n        valid = valid && hashHasKeys(message, subscriptionControlKeys);\n    }\n\n    return valid;\n};\n\nvar validateUrl = function (urlToValidate, hostPattern) {\n    var parsed = url.parse(urlToValidate);\n\n    return parsed.protocol === 'https:'\n        && parsed.path.substr(-4) === '.pem'\n        && hostPattern.test(parsed.host);\n};\n\nvar getCertificate = function (certUrl, cb) {\n    if (certCache.hasOwnProperty(certUrl)) {\n        cb(null, certCache[certUrl]);\n        return;\n    }\n\n    https.get(certUrl, function (res) {\n        var chunks = [];\n\n        if(res.statusCode !== 200){\n            return cb(new Error('Certificate could not be retrieved'));\n        }\n\n        res\n            .on('data', function (data) {\n                chunks.push(data.toString());\n            })\n            .on('end', function () {\n                certCache[certUrl] = chunks.join('');\n                cb(null, certCache[certUrl]);\n            });\n    }).on('error', cb)\n};\n\nvar validateSignature = function (message, cb, encoding) {\n    var signatureVersion = message['SignatureVersion'];\n    if (signatureVersion !== '1' && signatureVersion !== '2') {\n        cb(new Error('The signature version '\n            + signatureVersion + ' is not supported.'));\n        return;\n    }\n\n    var signableKeys = [];\n    if (message.Type === 'SubscriptionConfirmation') {\n        signableKeys = signableKeysForSubscription.slice(0);\n    } else {\n        signableKeys = signableKeysForNotification.slice(0);\n    }\n\n    var verifier = (signatureVersion === '1') ? crypto.createVerify('RSA-SHA1') : crypto.createVerify('RSA-SHA256');\n    for (var i = 0; i < signableKeys.length; i++) {\n        if (signableKeys[i] in message) {\n            verifier.update(signableKeys[i] + \"\\n\"\n                + message[signableKeys[i]] + \"\\n\", encoding);\n        }\n    }\n\n    getCertificate(message['SigningCertURL'], function (err, certificate) {\n        if (err) {\n            cb(err);\n            return;\n        }\n        try {\n            if (verifier.verify(certificate, message['Signature'], 'base64')) {\n                cb(null, message);\n            } else {\n                cb(new Error('The message signature is invalid.'));\n            }\n        } catch (e) {\n            cb(e);\n        }\n    });\n};\n\n/**\n * A validator for inbound HTTP(S) SNS messages.\n *\n * @constructor\n * @param {RegExp} [hostPattern=/^sns\\.[a-zA-Z0-9\\-]{3,}\\.amazonaws\\.com(\\.cn)?$/] - A pattern used to validate that a message's certificate originates from a trusted domain.\n * @param {String} [encoding='utf8'] - The encoding of the messages being signed.\n */\nfunction MessageValidator(hostPattern, encoding) {\n    this.hostPattern = hostPattern || defaultHostPattern;\n    this.encoding = encoding || defaultEncoding;\n}\n\n/**\n * A callback to be called by the validator once it has verified a message's\n * signature.\n *\n * @callback validationCallback\n * @param {Error} error - Any error encountered attempting to validate a\n *                          message's signature.\n * @param {Object} message - The validated inbound SNS message.\n */\n\n/**\n * Validates a message's signature and passes it to the provided callback.\n *\n * @param {Object} hash\n * @param {validationCallback} cb\n */\nMessageValidator.prototype.validate = function (hash, cb) {\n    if (typeof hash === 'string') {\n        try {\n            hash = JSON.parse(hash);\n        } catch (err) {\n            cb(err);\n            return;\n        }\n    }\n\n    hash = convertLambdaMessage(hash);\n\n    if (!validateMessageStructure(hash)) {\n        cb(new Error('Message missing required keys.'));\n        return;\n    }\n\n    if (!validateUrl(hash['SigningCertURL'], this.hostPattern)) {\n        cb(new Error('The certificate is located on an invalid domain.'));\n        return;\n    }\n\n    validateSignature(hash, cb, this.encoding);\n};\n\nmodule.exports = MessageValidator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../node_modules/.pnpm/sns-validator@0.3.5/node_modules/sns-validator/index.js\n");

/***/ })

};
;