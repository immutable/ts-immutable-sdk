## Immutable Passport SDK Example App Generator - Part 2: Testing and Validation

# Overview
This prompt helps you test, build, and validate the event-handling example app for the Immutable Passport SDK. It provides a comprehensive testing checklist and validation steps to ensure the app is fully functional.

# Step 1: Validation Checklist
Before proceeding with testing, verify ALL of these items:

- [ ] Code follows existing structure and naming conventions
- [ ] All routes and pages are implemented correctly
- [ ] ALL imports are valid and components are properly exported
- [ ] No circular dependencies exist between components
- [ ] Error handling is implemented for ALL asynchronous operations and events
- [ ] Environment variables are documented in .env.example
- [ ] Events are properly defined and handled
- [ ] Event listeners and subscriptions are properly cleaned up
- [ ] Components render without errors in all possible states

# Step 2: Testing Process

## Unit Tests
Run the unit tests to ensure all event handling functionality works correctly:

1. Navigate to the event-handling-with-nextjs directory:
   ```
   cd examples/passport/event-handling-with-nextjs
   ```

2. Install dependencies:
   ```
   pnpm install
   ```

3. Run the tests:
   ```
   pnpm test
   ```

4. Ensure test coverage exceeds 70% for line coverage:
   ```
   pnpm test -- --coverage
   ```

5. Verify that all tests pass without failures

6. Check that all event-related tests are checking:
   - Event listener setup
   - Event listener cleanup
   - Event data handling
   - UI updates in response to events

## Development Testing
Start the development server and test the app functionality:

1. Start the server:
   ```
   pnpm dev
   ```

2. Manually test these scenarios:
   - Complete login flow works without errors
   - Redirect handling works correctly
   - Logout flow completes successfully
   - All event handlers function as expected (connect, disconnect, chainChanged, accountsChanged)
   - UI correctly reflects all event state changes
   - No error messages appear in the console during normal operation
   - Event listeners are properly cleaned up (check with React DevTools)

3. Check the browser console for any errors during the entire process

4. Verify all events are handled and displayed correctly

5. Check React DevTools for any component errors or unexpected re-renders

## Production Build Testing
Test the production build of the application:

1. Build the app:
   ```
   pnpm build
   ```

2. Start the production server:
   ```
   pnpm start
   ```

3. Verify that the production build works correctly:
   - All pages load without errors
   - Events are properly handled
   - UI reflects event state changes
   - No console errors appear

# Step 3: Event-Specific Testing

## Connect Event
- [ ] Test that the connect event is properly captured and displayed
- [ ] Verify connection state changes are shown in the UI
- [ ] Confirm cleanup of connect event listeners

## Disconnect Event
- [ ] Test that the disconnect event is properly captured and displayed
- [ ] Verify UI updates when disconnection occurs
- [ ] Confirm cleanup of disconnect event listeners

## Chain Changed Event
- [ ] Test that chain changes are properly captured and displayed
- [ ] Verify UI updates with chain information
- [ ] Confirm cleanup of chainChanged event listeners

## Accounts Changed Event
- [ ] Test that account changes are properly captured and displayed
- [ ] Verify UI updates with account information
- [ ] Confirm cleanup of accountsChanged event listeners

## Other Events
- [ ] Test any other events implemented in the app
- [ ] Verify proper event handling and UI updates
- [ ] Confirm cleanup of all other event listeners

# Step 4: Error Handling Testing

## Edge Cases
Test these edge cases to ensure proper error handling:

- [ ] Provider not connected when attempting to add event listeners
- [ ] Events firing with unexpected or missing data
- [ ] Multiple rapid events firing in succession
- [ ] Component unmounting while events are firing
- [ ] Network disconnection during event handling

## Error Recovery
Verify that the app properly recovers from errors:

- [ ] App doesn't crash when events fail
- [ ] Error states are displayed to the user
- [ ] User can retry after errors
- [ ] Event listeners are still properly cleaned up after errors

# Step 5: Performance Testing

## Event Handling Performance
Check that event handling performs efficiently:

- [ ] Events are processed without noticeable delay
- [ ] UI updates quickly in response to events
- [ ] No memory leaks from event listeners (check with Chrome DevTools Memory tab)
- [ ] No excessive re-renders when events fire (check with React DevTools Profiler)

# Step 6: Documentation Validation

## README Verification
Ensure the README.md includes:

- [ ] Clear description of the event handling features
- [ ] Complete setup instructions
- [ ] Detailed usage examples for each event type
- [ ] Troubleshooting information for common issues
- [ ] Best practices for event handling and cleanup

# Step 7: Final Checklist

Before considering the app complete, confirm ALL of these items:

- [ ] All tests pass with >90% coverage
- [ ] App builds successfully for production
- [ ] All pages and routes work correctly
- [ ] Event handling works properly in both development and production builds
- [ ] Error handling is robust and user-friendly
- [ ] Event listeners are properly cleaned up in all scenarios
- [ ] Documentation is complete and accurate
- [ ] Code follows best practices and standards
- [ ] UI is clean, intuitive, and demonstrates the event handling clearly
- [ ] No console errors or warnings during normal operation 