"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@0xsequence+utils@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_";
exports.ids = ["vendor-chunks/@0xsequence+utils@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_"];
exports.modules = {

/***/ "(ssr)/../../../node_modules/.pnpm/@0xsequence+utils@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_/node_modules/@0xsequence/utils/dist/0xsequence-utils.esm.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../../node_modules/.pnpm/@0xsequence+utils@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_/node_modules/@0xsequence/utils/dist/0xsequence-utils.esm.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Logger: () => (/* binding */ Logger),\n/* harmony export */   MAX_UINT_256: () => (/* binding */ MAX_UINT_256),\n/* harmony export */   MerkleTreeGenerator: () => (/* binding */ MerkleTreeGenerator),\n/* harmony export */   PromiseCache: () => (/* binding */ PromiseCache),\n/* harmony export */   base64Decode: () => (/* binding */ base64Decode),\n/* harmony export */   base64DecodeObject: () => (/* binding */ base64DecodeObject),\n/* harmony export */   base64Encode: () => (/* binding */ base64Encode),\n/* harmony export */   base64EncodeObject: () => (/* binding */ base64EncodeObject),\n/* harmony export */   bigintReplacer: () => (/* binding */ bigintReplacer),\n/* harmony export */   bigintReviver: () => (/* binding */ bigintReviver),\n/* harmony export */   configureLogger: () => (/* binding */ configureLogger),\n/* harmony export */   defineProperties: () => (/* binding */ defineProperties),\n/* harmony export */   encodeMessageDigest: () => (/* binding */ encodeMessageDigest),\n/* harmony export */   encodeTypedDataDigest: () => (/* binding */ encodeTypedDataDigest),\n/* harmony export */   encodeTypedDataHash: () => (/* binding */ encodeTypedDataHash),\n/* harmony export */   extractProjectIdFromAccessKey: () => (/* binding */ extractProjectIdFromAccessKey),\n/* harmony export */   formatEther: () => (/* binding */ formatEther),\n/* harmony export */   formatUnits: () => (/* binding */ formatUnits),\n/* harmony export */   getFetchRequest: () => (/* binding */ getFetchRequest),\n/* harmony export */   getRandomInt: () => (/* binding */ getRandomInt),\n/* harmony export */   getSaleItemsLeaf: () => (/* binding */ getSaleItemsLeaf),\n/* harmony export */   isBigNumberish: () => (/* binding */ isBigNumberish),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   jwtDecodeClaims: () => (/* binding */ jwtDecodeClaims),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   packMessageData: () => (/* binding */ packMessageData),\n/* harmony export */   parseEther: () => (/* binding */ parseEther),\n/* harmony export */   parseUnits: () => (/* binding */ parseUnits),\n/* harmony export */   promisify: () => (/* binding */ promisify),\n/* harmony export */   queryStringFromObject: () => (/* binding */ queryStringFromObject),\n/* harmony export */   queryStringToObject: () => (/* binding */ queryStringToObject),\n/* harmony export */   resolveProperties: () => (/* binding */ resolveProperties),\n/* harmony export */   sanitizeAlphanumeric: () => (/* binding */ sanitizeAlphanumeric),\n/* harmony export */   sanitizeHost: () => (/* binding */ sanitizeHost),\n/* harmony export */   sanitizeNumberString: () => (/* binding */ sanitizeNumberString),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   subDigestOf: () => (/* binding */ subDigestOf),\n/* harmony export */   toHexString: () => (/* binding */ toHexString),\n/* harmony export */   urlClean: () => (/* binding */ urlClean)\n/* harmony export */ });\n/* harmony import */ var js_base64__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-base64 */ \"(ssr)/../../../node_modules/.pnpm/js-base64@3.7.7/node_modules/js-base64/base64.mjs\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/id.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/solidity.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/fetch.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/typed-data.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/ethers.js\");\n\n\n\nconst extractProjectIdFromAccessKey = accessKey => {\n  // Convert URL-safe base64 string to standard base64 string\n  const base64String = accessKey.replace(/-/g, '+').replace(/_/g, '/');\n  // Decode the base64 string to a binary string\n  const binaryString = atob(base64String);\n\n  // Convert the binary string to a byte array (Uint8Array)\n  const byteArray = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    byteArray[i] = binaryString.charCodeAt(i);\n  }\n  if (byteArray[0] !== 1) {\n    throw new Error('UnsupportedVersion');\n  }\n\n  // Extract the project ID from bytes 2 to 9 (8 bytes)\n  const projectIdBytes = byteArray.slice(1, 9);\n  const projectId = projectIdBytes[7] | projectIdBytes[6] << 8 | projectIdBytes[5] << 16 | projectIdBytes[4] << 24 | projectIdBytes[3] << 32 | projectIdBytes[2] << 40 | projectIdBytes[1] << 48 | projectIdBytes[0] << 56;\n  return projectId;\n};\n\nconst MAX_UINT_256 = BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n\n// ethers implement this method but doesn't exports it\nconst isBigNumberish = value => {\n  return value != null && (typeof value === 'number' && value % 1 === 0 || typeof value === 'string' && !!value.match(/^-?[0-9]+$/) || ethers__WEBPACK_IMPORTED_MODULE_0__.isHexString(value) || typeof value === 'bigint');\n};\n\n// Even length zero-padded hex string with 0x prefix\nconst toHexString = value => {\n  const result = value.toString(16);\n  return `${result.length % 2 === 0 ? '0x' : '0x0'}${result}`;\n};\nconst parseUnits = (value, decimals = 18) => {\n  let [integer, fraction = '0'] = value.split('.');\n  const negative = integer.startsWith('-');\n  if (negative) {\n    integer = integer.slice(1);\n  }\n\n  // trim trailing zeros.\n  fraction = fraction.replace(/(0+)$/, '');\n\n  // round off if the fraction is larger than the number of decimals.\n  if (decimals === 0) {\n    integer = `${Math.round(Number(`${integer}.${fraction}`))}`;\n    fraction = '';\n  } else if (fraction.length > decimals) {\n    const [left, unit, right] = [fraction.slice(0, decimals - 1), fraction.slice(decimals - 1, decimals), fraction.slice(decimals)];\n    const rounded = Math.round(Number(`${unit}.${right}`));\n    if (rounded > 9) {\n      fraction = `${BigInt(left) + 1n}0`.padStart(left.length + 1, '0');\n    } else {\n      fraction = `${left}${rounded}`;\n    }\n    if (fraction.length > decimals) {\n      fraction = fraction.slice(1);\n      integer = `${BigInt(integer) + 1n}`;\n    }\n    fraction = fraction.slice(0, decimals);\n  } else {\n    fraction = fraction.padEnd(decimals, '0');\n  }\n  return BigInt(`${negative ? '-' : ''}${integer}${fraction}`);\n};\nconst parseEther = value => parseUnits(value, 18);\nconst formatUnits = (value, decimals = 18) => {\n  let display = value.toString();\n  const negative = display.startsWith('-');\n  if (negative) {\n    display = display.slice(1);\n  }\n  display = display.padStart(decimals, '0');\n  const integer = display.slice(0, display.length - decimals);\n  let fraction = display.slice(display.length - decimals);\n  fraction = fraction.replace(/(0+)$/, '');\n  return `${negative ? '-' : ''}${integer || '0'}${fraction ? `.${fraction}` : ''}`;\n};\nconst formatEther = value => formatUnits(value, 18);\n\n// JSON.stringify doesn't handle BigInts, so we need to replace them with objects\nconst bigintReplacer = (key, value) => {\n  if (typeof value === 'bigint') {\n    return {\n      $bigint: value.toString()\n    };\n  }\n  return value;\n};\n\n// JSON.parse will need to convert our serialized bigints back into BigInt\nconst bigintReviver = (key, value) => {\n  if (value !== null && typeof value === 'object' && '$bigint' in value && typeof value.$bigint === 'string') {\n    return BigInt(value.$bigint);\n  }\n\n  // BigNumber compatibility with older versions of sequence.js with ethers v5\n  if (value !== null && typeof value === 'object' && value.type === 'BigNumber' && ethers__WEBPACK_IMPORTED_MODULE_0__.isHexString(value.hex)) {\n    return BigInt(value.hex);\n  }\n  return value;\n};\n\nconst base64Encode = val => {\n  return js_base64__WEBPACK_IMPORTED_MODULE_1__.Base64.encode(val, true);\n};\nconst base64EncodeObject = obj => {\n  return js_base64__WEBPACK_IMPORTED_MODULE_1__.Base64.encode(JSON.stringify(obj, bigintReplacer), true);\n};\nconst base64Decode = encodedString => {\n  if (encodedString === null || encodedString === undefined) {\n    return undefined;\n  }\n  return js_base64__WEBPACK_IMPORTED_MODULE_1__.Base64.decode(encodedString);\n};\nconst base64DecodeObject = encodedObject => {\n  if (encodedObject === null || encodedObject === undefined) {\n    return undefined;\n  }\n  return JSON.parse(js_base64__WEBPACK_IMPORTED_MODULE_1__.Base64.decode(encodedObject), bigintReviver);\n};\n\nconst encodeMessageDigest = message => {\n  if (typeof message === 'string') {\n    return ethers__WEBPACK_IMPORTED_MODULE_0__.getBytes(ethers__WEBPACK_IMPORTED_MODULE_2__.id(message));\n  } else {\n    return ethers__WEBPACK_IMPORTED_MODULE_0__.getBytes(ethers__WEBPACK_IMPORTED_MODULE_3__.keccak256(message));\n  }\n};\n\n// packMessageData encodes the specified data ready for the Sequence Wallet contracts.\nconst packMessageData = (walletAddress, chainId, digest) => {\n  return ethers__WEBPACK_IMPORTED_MODULE_4__.solidityPacked(['string', 'uint256', 'address', 'bytes32'], ['\\x19\\x01', chainId, walletAddress, digest]);\n};\nconst subDigestOf = (address, chainId, digest) => {\n  return ethers__WEBPACK_IMPORTED_MODULE_3__.keccak256(packMessageData(address, chainId, digest));\n};\n\nconst isNode = () => {\n  if (typeof window === 'undefined' && typeof process === 'object') {\n    return true;\n  } else {\n    return false;\n  }\n};\nconst isBrowser = () => !isNode();\n\nconst jwtDecodeClaims = jwt => {\n  const parts = jwt.split('.');\n  if (parts.length !== 3) {\n    throw new Error('invalid jwt');\n  }\n  const claims = JSON.parse(js_base64__WEBPACK_IMPORTED_MODULE_1__.Base64.decode(parts[1]));\n  return claims;\n};\n\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\n\nvar logLevel = /*#__PURE__*/function (logLevel) {\n  logLevel[logLevel[\"DEBUG\"] = 1] = \"DEBUG\";\n  logLevel[logLevel[\"INFO\"] = 2] = \"INFO\";\n  logLevel[logLevel[\"WARN\"] = 3] = \"WARN\";\n  logLevel[logLevel[\"ERROR\"] = 4] = \"ERROR\";\n  logLevel[logLevel[\"DISABLED\"] = 5] = \"DISABLED\";\n  return logLevel;\n}(logLevel || {});\nclass Logger {\n  constructor(config) {\n    this.config = config;\n    this.logLevel = void 0;\n    this.configure(config);\n  }\n  configure(config) {\n    this.config = _extends({}, this.config, config);\n    switch (this.config.logLevel) {\n      case 'DEBUG':\n        this.logLevel = logLevel.DEBUG;\n        break;\n      case 'INFO':\n        this.logLevel = logLevel.INFO;\n        break;\n      case 'WARN':\n        this.logLevel = logLevel.WARN;\n        break;\n      case 'ERROR':\n        this.logLevel = logLevel.ERROR;\n        break;\n      case 'DISABLED':\n        this.logLevel = logLevel.DISABLED;\n        break;\n      default:\n        this.logLevel = logLevel.INFO;\n        break;\n    }\n\n    // undefined silence value will disable the default silence flag\n    if (this.config.silence === undefined) {\n      this.config.silence = false;\n    }\n  }\n  debug(message, ...optionalParams) {\n    if (this.config.silence === true) return;\n    if (this.logLevel === logLevel.DEBUG) {\n      console.log(message, ...optionalParams);\n    }\n  }\n  info(message, ...optionalParams) {\n    if (this.config.silence === true) return;\n    if (this.logLevel <= logLevel.INFO) {\n      console.log(message, ...optionalParams);\n    }\n  }\n  warn(message, ...optionalParams) {\n    if (this.config.silence === true) return;\n    if (this.logLevel <= logLevel.WARN) {\n      console.warn(message, ...optionalParams);\n      if (this.config.onwarn) {\n        this.config.onwarn(message, optionalParams);\n      }\n    }\n  }\n  error(message, ...optionalParams) {\n    if (this.config.silence === true) return;\n    if (this.logLevel <= logLevel.ERROR) {\n      console.error(message, ...optionalParams);\n      if (this.config.onerror) {\n        this.config.onerror(message, optionalParams);\n      }\n    }\n  }\n}\nconst logger = new Logger({\n  logLevel: 'INFO',\n  // By default we silence the logger. In tests we should call `configureLogger`\n  // below to set silence: false.\n  silence: true\n});\nconst configureLogger = config => logger.configure(config);\n\nclass Base {\n  static bufferIndexOf(array, element, isSorted = false) {\n    if (isSorted) {\n      return Base.binarySearch(array, element, Base.compare);\n    }\n    const eqChecker = (buffer1, buffer2) => {\n      if (buffer1 === buffer2) {\n        return true;\n      }\n      if (buffer1.length !== buffer2.length) {\n        return false;\n      }\n      for (let i = 0; i < buffer1.length; i++) {\n        if (buffer1[i] !== buffer2[i]) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return Base.linearSearch(array, element, eqChecker);\n  }\n  static binarySearch(array, element, compareFunction) {\n    let start = 0;\n    let end = array.length - 1;\n\n    // Iterate while start not meets end\n    while (start <= end) {\n      // Find the mid index\n      const mid = Math.floor((start + end) / 2);\n\n      // Check if the mid value is greater than, equal to, or less than search element.\n      const ordering = compareFunction(array[mid], element);\n\n      // If element is present at mid, start iterating for searching first appearance.\n      if (ordering === 0) {\n        // Linear reverse iteration until the first matching item index is found.\n        for (let i = mid - 1; i >= 0; i--) {\n          if (compareFunction(array[i], element) === 0) continue;\n          return i + 1;\n        }\n        return 0;\n      } /* Else look in left or right half accordingly */else if (ordering < 0) {\n        start = mid + 1;\n      } else {\n        end = mid - 1;\n      }\n    }\n    return -1;\n  }\n  static compare(a, b) {\n    // Determine the minimum length to compare\n    const len = Math.min(a.length, b.length);\n\n    // Compare byte by byte\n    for (let i = 0; i < len; i++) {\n      if (a[i] !== b[i]) {\n        return a[i] - b[i];\n      }\n    }\n\n    // If all compared bytes are equal, compare lengths\n    return a.length - b.length;\n  }\n  static linearSearch(array, element, eqChecker) {\n    for (let i = 0; i < array.length; i++) {\n      if (eqChecker(array[i], element)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  static bufferify(value) {\n    if (typeof value === 'string') {\n      return ethers__WEBPACK_IMPORTED_MODULE_0__.getBytes(value);\n    }\n    return value;\n  }\n  static isHexString(v) {\n    return typeof v === 'string' && /^(0x)?[0-9A-Fa-f]*$/.test(v);\n  }\n  static bufferToHex(value, withPrefix = true) {\n    const prefixed = ethers__WEBPACK_IMPORTED_MODULE_0__.hexlify(value);\n    return withPrefix ? prefixed : prefixed.substring(2);\n  }\n  static bufferifyFn(f) {\n    return value => {\n      return Base.bufferify(f(value));\n    };\n  }\n}\n\nclass MerkleTree extends Base {\n  constructor(leaves, options = {}) {\n    super();\n    this.hashFn = void 0;\n    this.leaves = [];\n    this.layers = [];\n    this.sortLeaves = false;\n    this.sortPairs = false;\n    this.sortLeaves = !!options.sortLeaves;\n    this.sortPairs = !!options.sortPairs;\n    this.hashFn = Base.bufferifyFn(ethers__WEBPACK_IMPORTED_MODULE_3__.keccak256);\n    this.processLeaves(leaves);\n  }\n  getOptions() {\n    return {\n      sortLeaves: this.sortLeaves,\n      sortPairs: this.sortPairs\n    };\n  }\n  processLeaves(leaves) {\n    this.leaves = leaves.map(Base.bufferify);\n    if (this.sortLeaves) {\n      this.leaves = this.leaves.sort(Base.compare);\n    }\n    this.createHashes(this.leaves);\n  }\n  createHashes(nodes) {\n    this.layers = [nodes];\n    while (nodes.length > 1) {\n      const layerIndex = this.layers.length;\n      this.layers.push([]);\n      const layerLimit = nodes.length;\n      for (let i = 0; i < nodes.length; i += 2) {\n        if (i >= layerLimit) {\n          this.layers[layerIndex].push(...nodes.slice(layerLimit));\n          break;\n        } else if (i + 1 === nodes.length) {\n          if (nodes.length % 2 === 1) {\n            // push copy of hash and continue iteration\n            this.layers[layerIndex].push(nodes[i]);\n            continue;\n          }\n        }\n        const left = nodes[i];\n        const right = i + 1 === nodes.length ? left : nodes[i + 1];\n        const combined = [left, right];\n        if (this.sortPairs) {\n          combined.sort(Base.compare);\n        }\n        const hash = this.hashFn(ethers__WEBPACK_IMPORTED_MODULE_0__.concat(combined));\n        this.layers[layerIndex].push(hash);\n      }\n      nodes = this.layers[layerIndex];\n    }\n  }\n  getRoot() {\n    if (this.layers.length === 0) {\n      return Uint8Array.from([]);\n    }\n    return this.layers[this.layers.length - 1][0] || Uint8Array.from([]);\n  }\n  getHexRoot() {\n    return Base.bufferToHex(this.getRoot());\n  }\n  getProof(leaf, index) {\n    if (typeof leaf === 'undefined') {\n      throw new Error('leaf is required');\n    }\n    leaf = Base.bufferify(leaf);\n    const proof = [];\n    if (!Number.isInteger(index)) {\n      index = -1;\n      for (let i = 0; i < this.leaves.length; i++) {\n        if (Base.compare(leaf, this.leaves[i]) === 0) {\n          index = i;\n        }\n      }\n    }\n\n    // Type fix\n    index = index;\n    if (index <= -1) {\n      return [];\n    }\n    for (let i = 0; i < this.layers.length; i++) {\n      const layer = this.layers[i];\n      const isRightNode = index % 2;\n      const pairIndex = isRightNode ? index - 1 : index + 1;\n      if (pairIndex < layer.length) {\n        proof.push({\n          position: isRightNode ? 'left' : 'right',\n          data: layer[pairIndex]\n        });\n      }\n\n      // set index to parent index\n      index = index / 2 | 0;\n    }\n    return proof;\n  }\n  getHexProof(leaf, index) {\n    return this.getProof(leaf, index).map(item => Base.bufferToHex(item.data));\n  }\n  verify(proof, targetNode, root) {\n    let hash = Base.bufferify(targetNode);\n    root = Base.bufferify(root);\n    if (!Array.isArray(proof) || !targetNode || !root) {\n      return false;\n    }\n    for (let i = 0; i < proof.length; i++) {\n      const node = proof[i];\n      let data;\n      let isLeftNode;\n      if (typeof node === 'string') {\n        data = Base.bufferify(node);\n        isLeftNode = true;\n      } else if (node instanceof Object) {\n        data = node.data;\n        isLeftNode = node.position === 'left';\n      } else {\n        throw new Error('Expected node to be of type string or object');\n      }\n      const buffers = [];\n      if (this.sortPairs) {\n        if (Base.compare(hash, data) < 0) {\n          buffers.push(hash, data);\n        } else {\n          buffers.push(data, hash);\n        }\n        hash = this.hashFn(ethers__WEBPACK_IMPORTED_MODULE_0__.concat(buffers));\n      } else {\n        buffers.push(hash);\n        buffers[isLeftNode ? 'unshift' : 'push'](data);\n        hash = this.hashFn(ethers__WEBPACK_IMPORTED_MODULE_0__.concat(buffers));\n      }\n    }\n    return Base.compare(hash, root) === 0;\n  }\n}\n\nclass MerkleTreeGenerator {\n  constructor(elements, toLeaf) {\n    this.elements = void 0;\n    this.toLeaf = void 0;\n    this.tree = void 0;\n    this.elements = elements;\n    this.toLeaf = toLeaf;\n  }\n  generateTree() {\n    const hashed = this.elements.map(e => this.toLeaf(e));\n    return new MerkleTree(hashed, {\n      sortPairs: true,\n      sortLeaves: true\n    });\n  }\n  generateRoot() {\n    if (!this.tree) this.tree = this.generateTree();\n    return this.tree.getHexRoot();\n  }\n  generateProof(element) {\n    if (!this.elements.includes(element)) throw new Error('Element not found');\n    if (!this.tree) this.tree = this.generateTree();\n    return this.tree.getHexProof(this.toLeaf(element));\n  }\n  verifyProof(element, proof) {\n    if (!this.elements.includes(element)) throw new Error('Element not found');\n    if (!this.tree) this.tree = this.generateTree();\n    return this.tree.verify(proof, this.toLeaf(element), this.generateRoot());\n  }\n}\nconst getSaleItemsLeaf = element => ethers__WEBPACK_IMPORTED_MODULE_4__.solidityPackedKeccak256(['address', 'uint256'], [element.address.toLowerCase(), element.tokenId]);\n\n// export const getEthersConnectionInfo = (url: string, projectAccessKey?: string, jwt?: string): ConnectionInfo => {\n//   const headers: {\n//     [key: string]: string | number\n//   } = {}\n\n//   if (jwt && jwt.length > 0) {\n//     headers['Authorization'] = `BEARER ${jwt}`\n//   }\n//   if (projectAccessKey && projectAccessKey.length > 0) {\n//     headers['X-Access-Key'] = projectAccessKey\n//   }\n\n//   return {\n//     url,\n//     headers,\n//     skipFetchSetup: true,\n//     fetchOptions: {\n//       mode: 'cors',\n//       cache: 'force-cache',\n//       credentials: 'same-origin',\n//       redirect: 'follow',\n//       referrer: 'client'\n//     }\n//   }\n// }\n\nconst getFetchRequest = (url, projectAccessKey, jwt) => {\n  const req = new ethers__WEBPACK_IMPORTED_MODULE_5__.FetchRequest(url);\n  if (jwt) {\n    req.setHeader('Authorization', `BEARER ${jwt}`);\n  }\n  if (projectAccessKey) {\n    req.setHeader('X-Access-Key', projectAccessKey);\n  }\n  return req;\n};\n\nclass PromiseCache {\n  constructor() {\n    this.cache = void 0;\n    this.cache = new Map();\n  }\n  do(key, validMilliseconds, task, ...args) {\n    key = `${key}:${ethers__WEBPACK_IMPORTED_MODULE_2__.id(JSON.stringify(args, deterministically))}`;\n    let entry = this.cache.get(key);\n    if (entry) {\n      if (entry.expiration) {\n        if (new Date() >= entry.expiration) {\n          entry = undefined;\n          this.cache.delete(key);\n        }\n      }\n    }\n    if (!entry) {\n      const entry_ = {\n        promise: task(...args)\n      };\n      if (validMilliseconds !== undefined) {\n        entry_.promise = entry_.promise.then(result => {\n          entry_.expiration = new Date(Date.now() + validMilliseconds);\n          return result;\n        });\n      }\n      entry = entry_;\n      this.cache.set(key, entry);\n    }\n    return entry.promise;\n  }\n}\nfunction deterministically(_key, value) {\n  if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n    return Object.fromEntries(Object.entries(value).sort());\n  }\n  return value;\n}\n\nfunction promisify(f, thisContext) {\n  return function (...a) {\n    const args = Array.prototype.slice.call(a);\n    return new Promise(async (resolve, reject) => {\n      try {\n        args.push((err, result) => err ? reject(err) : resolve(result));\n        await f.apply(thisContext, args);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n}\n\nfunction queryStringFromObject(name, obj) {\n  const k = encodeURIComponent(name);\n  const v = encodeURIComponent(JSON.stringify(obj));\n  return `${k}=${v}`;\n}\nfunction queryStringToObject(qs) {\n  const p = qs.split('&');\n  const o = {};\n  for (const v of p) {\n    const z = v.split('=');\n    o[decodeURIComponent(z[0])] = JSON.parse(decodeURIComponent(z[1]));\n  }\n  return o;\n}\n\nconst getRandomInt = (min = 0, max = Number.MAX_SAFE_INTEGER) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// sanitizeNumberString accepts a number string and returns back a clean number string.\n// For example, input '1234.5678' will return '1234.5678' but '12javascript:{}etc' will return '12'\nconst sanitizeNumberString = numString => {\n  if (!numString || typeof numString !== 'string') {\n    return '';\n  }\n  const v = numString.match(/[\\d.]+/);\n  return v && v.length > 0 ? v[0].trim() : '';\n};\n\n// sanitizeAlphanumeric accepts any string and returns alphanumeric contents only\nconst sanitizeAlphanumeric = alphanum => {\n  if (!alphanum || typeof alphanum !== 'string') {\n    return '';\n  }\n  const v = alphanum.match(/[\\w\\s\\d]+/);\n  return v && v.length > 0 ? v[0].trim() : '';\n};\n\n// sanitizeHost accepts any string and returns valid host string\nconst sanitizeHost = host => {\n  if (!host || typeof host !== 'string') {\n    return '';\n  }\n  const v = host.match(/[\\w\\d.\\-:\\/]+/);\n  return v && v.length > 0 ? v[0].trim() : '';\n};\n\nconst sleep = t => {\n  return new Promise(resolve => {\n    const timeout = setTimeout(() => {\n      clearTimeout(timeout);\n      resolve();\n    }, t);\n  });\n};\n\nconst encodeTypedDataHash = typedData => {\n  const types = _extends({}, typedData.types);\n\n  // remove EIP712Domain key from types as ethers will auto-gen it in\n  // the hash encoder below\n  delete types['EIP712Domain'];\n  return ethers__WEBPACK_IMPORTED_MODULE_6__.TypedDataEncoder.hash(typedData.domain, types, typedData.message);\n};\nconst encodeTypedDataDigest = typedData => {\n  return ethers__WEBPACK_IMPORTED_MODULE_0__.getBytes(encodeTypedDataHash(typedData));\n};\n\nconst {\n  defineProperties,\n  resolveProperties\n} = ethers__WEBPACK_IMPORTED_MODULE_7__;\n\n// urlClean removes double slashes from url path\nconst urlClean = url => url.replace(/([^:]\\/)\\/+/g, '$1');\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../node_modules/.pnpm/@0xsequence+utils@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_/node_modules/@0xsequence/utils/dist/0xsequence-utils.esm.js\n");

/***/ })

};
;