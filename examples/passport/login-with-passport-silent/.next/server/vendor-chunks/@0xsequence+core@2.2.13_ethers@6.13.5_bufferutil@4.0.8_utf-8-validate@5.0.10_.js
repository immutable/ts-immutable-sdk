"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@0xsequence+core@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_";
exports.ids = ["vendor-chunks/@0xsequence+core@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_"];
exports.modules = {

/***/ "(ssr)/../../../node_modules/.pnpm/@0xsequence+core@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_/node_modules/@0xsequence/core/dist/0xsequence-core.esm.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ../../../node_modules/.pnpm/@0xsequence+core@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_/node_modules/@0xsequence/core/dist/0xsequence-core.esm.js ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   allVersions: () => (/* binding */ allVersions),\n/* harmony export */   commons: () => (/* binding */ index$1),\n/* harmony export */   universal: () => (/* binding */ index),\n/* harmony export */   v1: () => (/* binding */ v1),\n/* harmony export */   v2: () => (/* binding */ v2)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/solidity.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/contract/contract.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/utils/data.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/transaction/address.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/hash/message.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/address/address.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/crypto/keccak.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/abi-coder.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/abi/interface.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/constants/hashes.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ethers */ \"(ssr)/../../../node_modules/.pnpm/ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10/node_modules/ethers/lib.esm/constants/addresses.js\");\n/* harmony import */ var _0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @0xsequence/abi */ \"(ssr)/../../../node_modules/.pnpm/@0xsequence+abi@2.2.13/node_modules/@0xsequence/abi/dist/0xsequence-abi.esm.js\");\n/* harmony import */ var _0xsequence_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @0xsequence/utils */ \"(ssr)/../../../node_modules/.pnpm/@0xsequence+utils@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_/node_modules/@0xsequence/utils/dist/0xsequence-utils.esm.js\");\n\n\n\n\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\n\nfunction subdigestOf(payload) {\n  return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPackedKeccak256(['bytes', 'uint256', 'address', 'bytes32'], ['0x1901', payload.chainId, payload.address, payload.digest]);\n}\nfunction isSignedPayload(payload) {\n  return payload.digest !== undefined && payload.chainId !== undefined && payload.address !== undefined;\n}\n\nvar signature$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  subdigestOf: subdigestOf,\n  isSignedPayload: isSignedPayload\n});\n\nconst EIP1271_MAGIC_VALUE = '0x1626ba7e';\nconst EIP1271_ABI = [{\n  inputs: [{\n    internalType: 'bytes32',\n    type: 'bytes32'\n  }, {\n    internalType: 'bytes',\n    type: 'bytes'\n  }],\n  name: 'isValidSignature',\n  outputs: [{\n    internalType: 'bytes4',\n    type: 'bytes4'\n  }],\n  stateMutability: 'view',\n  type: 'function'\n}];\nasync function isValidEIP1271Signature(address, digest, signature, provider) {\n  const contract = new ethers__WEBPACK_IMPORTED_MODULE_3__.Contract(address, EIP1271_ABI, provider);\n  const result = await contract.isValidSignature(digest, signature);\n  return result === EIP1271_MAGIC_VALUE;\n}\n\nvar validateEIP1271 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  isValidEIP1271Signature: isValidEIP1271Signature\n});\n\nlet SigType = /*#__PURE__*/function (SigType) {\n  SigType[SigType[\"EIP712\"] = 1] = \"EIP712\";\n  SigType[SigType[\"ETH_SIGN\"] = 2] = \"ETH_SIGN\";\n  SigType[SigType[\"WALLET_BYTES32\"] = 3] = \"WALLET_BYTES32\";\n  return SigType;\n}({});\nfunction canRecover(signature) {\n  const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(signature);\n  const type = bytes[bytes.length - 1];\n  return type === SigType.EIP712 || type === SigType.ETH_SIGN;\n}\nfunction recoverSigner(digest, signature) {\n  const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(signature);\n  const digestBytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(digest);\n\n  // type is last byte\n  const type = bytes[bytes.length - 1];\n\n  // Split r:s:v\n  const r = ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(bytes.slice(0, 32));\n  const s = ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(bytes.slice(32, 64));\n  const v = Number(ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(bytes.slice(64, 65)));\n  const splitSignature = {\n    r,\n    s,\n    v\n  };\n  if (type === SigType.EIP712) {\n    return ethers__WEBPACK_IMPORTED_MODULE_5__.recoverAddress(digestBytes, splitSignature);\n  }\n  if (type === SigType.ETH_SIGN) {\n    return ethers__WEBPACK_IMPORTED_MODULE_5__.recoverAddress(ethers__WEBPACK_IMPORTED_MODULE_6__.hashMessage(digestBytes), splitSignature);\n  }\n  throw new Error(`Unsupported signature type: ${type}`);\n}\nfunction isValidSignature(address, digest, signature, provider) {\n  const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(signature);\n\n  // type is last byte\n  const type = bytes[bytes.length - 1];\n  if (type === SigType.EIP712 || type === SigType.ETH_SIGN) {\n    return address === recoverSigner(digest, signature);\n  }\n  if (type === SigType.WALLET_BYTES32) {\n    return isValidEIP1271Signature(address, ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(digest), bytes.slice(0, -1), provider);\n  }\n  throw new Error(`Unsupported signature type: ${type}`);\n}\nfunction tryRecoverSigner(digest, signature) {\n  const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(signature);\n  if (bytes.length !== 66) return undefined;\n  try {\n    return recoverSigner(digest, bytes);\n  } catch (_unused) {}\n  return undefined;\n}\n\nvar signer = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SigType: SigType,\n  canRecover: canRecover,\n  recoverSigner: recoverSigner,\n  isValidSignature: isValidSignature,\n  tryRecoverSigner: tryRecoverSigner\n});\n\nlet SignaturePartType$1 = /*#__PURE__*/function (SignaturePartType) {\n  SignaturePartType[SignaturePartType[\"EOASignature\"] = 0] = \"EOASignature\";\n  SignaturePartType[SignaturePartType[\"Address\"] = 1] = \"Address\";\n  SignaturePartType[SignaturePartType[\"DynamicSignature\"] = 2] = \"DynamicSignature\";\n  return SignaturePartType;\n}({});\nfunction isAddressMember(member) {\n  return member.address !== undefined && !isUnrecoveredSignatureMember(member);\n}\nfunction isUnrecoveredSignatureMember(member) {\n  return member.signature !== undefined && member.weight !== undefined && member.isDynamic !== undefined;\n}\nfunction isUnrecoveredSignature$1(signature) {\n  return signature.threshold !== undefined && signature.signers !== undefined;\n}\nfunction decodeSignature$1(signature) {\n  const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(signature);\n  const threshold = bytes[0] << 8 | bytes[1];\n  const signers = [];\n  for (let i = 2; i < bytes.length;) {\n    const type = bytes[i++];\n    const weight = bytes[i++];\n    switch (type) {\n      case SignaturePartType$1.EOASignature:\n        signers.push({\n          unrecovered: true,\n          weight,\n          signature: ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(bytes.slice(i, i + 66)),\n          isDynamic: false\n        });\n        i += 66;\n        break;\n      case SignaturePartType$1.Address:\n        signers.push({\n          weight,\n          address: ethers__WEBPACK_IMPORTED_MODULE_7__.getAddress(ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(bytes.slice(i, i + 20)))\n        });\n        i += 20;\n        break;\n      case SignaturePartType$1.DynamicSignature:\n        const address = ethers__WEBPACK_IMPORTED_MODULE_7__.getAddress(ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(bytes.slice(i, i + 20)));\n        i += 20;\n        const size = bytes[i] << 8 | bytes[i + 1];\n        i += 2;\n        signers.push({\n          unrecovered: true,\n          weight,\n          signature: ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(bytes.slice(i, i + size)),\n          address,\n          isDynamic: true\n        });\n        i += size;\n        break;\n      default:\n        throw new Error(`Unknown signature part type: ${type}`);\n    }\n  }\n  return {\n    version: 1,\n    threshold,\n    signers\n  };\n}\nfunction encodeSignature$1(signature) {\n  if (ethers__WEBPACK_IMPORTED_MODULE_4__.isBytesLike(signature)) {\n    return ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(signature);\n  }\n  const {\n    signers,\n    threshold\n  } = isUnrecoveredSignature$1(signature) ? signature : signature.config;\n  const encodedSigners = signers.map(s => {\n    if (isAddressMember(s)) {\n      return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'address'], [SignaturePartType$1.Address, s.weight, s.address]);\n    }\n    if (s.isDynamic) {\n      const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(s.signature);\n      return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'address', 'uint16', 'bytes'], [SignaturePartType$1.DynamicSignature, s.weight, s.address, bytes.length, bytes]);\n    }\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'bytes'], [SignaturePartType$1.EOASignature, s.weight, s.signature]);\n  });\n  return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint16', ...new Array(encodedSigners.length).fill('bytes')], [threshold, ...encodedSigners]);\n}\nasync function recoverSignature$1(data, payload, provider) {\n  const subdigest = subdigestOf(payload);\n  const signers = await Promise.all(data.signers.map(async s => {\n    if (isAddressMember(s)) {\n      return s;\n    }\n    if (s.isDynamic) {\n      if (!s.address) throw new Error('Dynamic signature part must have address');\n      if (!isValidSignature(s.address, subdigest, s.signature, provider)) {\n        throw new Error(`Invalid dynamic signature part ${s.address}`);\n      }\n      return {\n        address: s.address,\n        weight: s.weight,\n        signature: s.signature\n      };\n    } else {\n      const address = recoverSigner(subdigest, s.signature);\n      return {\n        address,\n        weight: s.weight,\n        signature: s.signature\n      };\n    }\n  }));\n  return {\n    version: 1,\n    payload,\n    subdigest,\n    config: {\n      version: 1,\n      threshold: data.threshold,\n      signers\n    }\n  };\n}\nfunction encodeSigners$1(config, signatures, subdigests, _) {\n  if (subdigests.length !== 0) {\n    throw new Error('Explicit subdigests not supported on v1');\n  }\n  let weight = 0n;\n  const parts = config.signers.map(s => {\n    if (!signatures.has(s.address)) {\n      return s;\n    }\n    const signature = signatures.get(s.address);\n    const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(signature.signature);\n    weight += BigInt(s.weight);\n    if (signature.isDynamic || bytes.length !== 66) {\n      return _extends({}, s, {\n        isDynamic: true,\n        signature: signature.signature,\n        address: s.address\n      });\n    }\n    return _extends({}, s, {\n      isDynamic: false,\n      signature: signature.signature\n    });\n  });\n  const encoded = encodeSignature$1({\n    version: 1,\n    threshold: config.threshold,\n    signers: parts\n  });\n  return {\n    encoded,\n    weight\n  };\n}\nconst SignatureCoder$1 = {\n  decode: data => {\n    return decodeSignature$1(data);\n  },\n  encode: data => {\n    return encodeSignature$1(data);\n  },\n  trim: async data => {\n    return data;\n  },\n  supportsNoChainId: true,\n  recover: (data, payload, provider) => {\n    return recoverSignature$1(data, payload, provider);\n  },\n  encodeSigners: (config, signatures, subdigests, chainId) => {\n    return encodeSigners$1(config, signatures, subdigests);\n  },\n  hasEnoughSigningPower: (config, signatures) => {\n    const {\n      weight\n    } = SignatureCoder$1.encodeSigners(config, signatures, [], 0);\n    return weight >= BigInt(config.threshold);\n  },\n  chainSignatures: (_main, _suffix) => {\n    throw new Error('Signature chaining not supported on v1');\n  },\n  hashSetImageHash: function (_imageHash) {\n    throw new Error('Image hash not supported on v1');\n  },\n  signaturesOf(config) {\n    return config.signers.filter(s => s.signature !== undefined).map(s => ({\n      address: s.address,\n      signature: s.signature\n    }));\n  },\n  signaturesOfDecoded: function (data) {\n    return data.signers.map(s => s.signature).filter(s => s !== undefined);\n  }\n};\n\nvar signature$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SignaturePartType: SignaturePartType$1,\n  isAddressMember: isAddressMember,\n  isUnrecoveredSignatureMember: isUnrecoveredSignatureMember,\n  isUnrecoveredSignature: isUnrecoveredSignature$1,\n  decodeSignature: decodeSignature$1,\n  encodeSignature: encodeSignature$1,\n  recoverSignature: recoverSignature$1,\n  encodeSigners: encodeSigners$1,\n  SignatureCoder: SignatureCoder$1\n});\n\nconst ConfigCoder$1 = {\n  isWalletConfig: config => {\n    return config.version === 1 && config.threshold !== undefined && config.signers !== undefined;\n  },\n  imageHashOf: config => {\n    return config.signers.reduce((imageHash, signer) => ethers__WEBPACK_IMPORTED_MODULE_8__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_9__.AbiCoder.defaultAbiCoder().encode(['bytes32', 'uint8', 'address'], [imageHash, signer.weight, signer.address])), ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint256'], [config.threshold]));\n  },\n  hasSubdigest: (_walletConfig, _subdigest) => {\n    // v1 does not support explicit subdigests\n    return false;\n  },\n  isComplete: _config => {\n    // v1 does not support incomplete configs\n    return true;\n  },\n  checkpointOf: _config => {\n    return 0n;\n  },\n  signersOf: config => {\n    return config.signers.map(s => ({\n      address: s.address,\n      weight: Number(s.weight)\n    }));\n  },\n  fromSimple: config => {\n    if (BigInt(config.checkpoint) !== 0n) {\n      throw new Error('v1 wallet config does not support checkpoint');\n    }\n    if (config.subdigests && config.subdigests.length > 0) {\n      throw new Error('v1 wallet config does not support subdigests');\n    }\n    return {\n      version: 1,\n      threshold: config.threshold,\n      signers: config.signers\n    };\n  },\n  update: {\n    isKindUsed: true,\n    buildTransaction: (wallet, config, context, kind) => {\n      const module = new ethers__WEBPACK_IMPORTED_MODULE_10__.Interface([..._0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__.walletContracts.mainModule.abi, ..._0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__.walletContracts.mainModuleUpgradable.abi]);\n      const transactions = [];\n      if (!kind || kind === 'first') {\n        transactions.push({\n          to: wallet,\n          data: module.encodeFunctionData(module.getFunction('updateImplementation'), [context.mainModuleUpgradable]),\n          gasLimit: 0,\n          delegateCall: false,\n          revertOnError: true,\n          value: 0\n        });\n      }\n      transactions.push({\n        to: wallet,\n        data: module.encodeFunctionData(module.getFunction('updateImageHash'), [ConfigCoder$1.imageHashOf(config)]),\n        gasLimit: 0,\n        delegateCall: false,\n        revertOnError: true,\n        value: 0\n      });\n      return {\n        entrypoint: wallet,\n        transactions\n      };\n    },\n    decodeTransaction: function (tx) {\n      throw new Error('Function not implemented.');\n    }\n  },\n  toJSON: function (config) {\n    const plainMembers = config.signers.map(signer => {\n      return {\n        weight: BigInt(signer.weight).toString(),\n        address: signer.address\n      };\n    });\n    return JSON.stringify({\n      version: config.version,\n      threshold: BigInt(config.threshold).toString(),\n      signers: plainMembers\n    });\n  },\n  fromJSON: function (json) {\n    const parsed = JSON.parse(json);\n    const signers = parsed.signers.map(signer => {\n      return {\n        weight: BigInt(signer.weight),\n        address: signer.address\n      };\n    });\n    return {\n      version: parsed.version,\n      threshold: BigInt(parsed.threshold),\n      signers\n    };\n  },\n  editConfig: function (config, action) {\n    var _action$threshold;\n    const newSigners = config.signers.slice();\n    if (action.checkpoint && BigInt(action.checkpoint) !== 0n) {\n      throw new Error('v1 wallet config does not support checkpoint');\n    }\n    if (action.add) {\n      for (const signer of action.add) {\n        if (newSigners.find(s => s.address === signer.address)) {\n          continue;\n        }\n        newSigners.push({\n          weight: signer.weight,\n          address: signer.address\n        });\n      }\n    }\n    if (action.remove) {\n      for (const address of action.remove) {\n        const index = newSigners.findIndex(signer => signer.address === address);\n        if (index >= 0) {\n          newSigners.splice(index, 1);\n        }\n      }\n    }\n    return {\n      version: config.version,\n      threshold: (_action$threshold = action.threshold) != null ? _action$threshold : config.threshold,\n      signers: newSigners\n    };\n  },\n  buildStubSignature: function (config, overrides) {\n    const parts = new Map();\n    for (const [signer, signature] of overrides.entries()) {\n      parts.set(signer, {\n        signature,\n        isDynamic: true\n      });\n      const {\n        encoded,\n        weight\n      } = encodeSigners$1(config, parts, []);\n      if (weight >= BigInt(config.threshold)) {\n        return encoded;\n      }\n    }\n    const signers = config.signers;\n    for (const {\n      address\n    } of signers.sort(({\n      weight: a\n    }, {\n      weight: b\n    }) => Number(a) - Number(b))) {\n      const signature = '0x4e82f02f388a12b5f9d29eaf2452dd040c0ee5804b4e504b4dd64e396c6c781f2c7624195acba242dd825bfd25a290912e3c230841fd55c9a734c4de8d9899451b02';\n      parts.set(address, {\n        signature,\n        isDynamic: false\n      });\n      const {\n        encoded,\n        weight\n      } = encodeSigners$1(config, parts, []);\n      if (weight >= BigInt(config.threshold)) {\n        return encoded;\n      }\n    }\n    return encodeSigners$1(config, parts, []).encoded;\n  }\n};\n\nvar config$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ConfigCoder: ConfigCoder$1\n});\n\nvar context$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nconst version$1 = 1;\nconst DeployedWalletContext$1 = {\n  version: version$1,\n  factory: '0xf9D09D634Fb818b05149329C1dcCFAeA53639d96',\n  guestModule: '0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7',\n  mainModule: '0xd01F11855bCcb95f88D7A48492F66410d4637313',\n  mainModuleUpgradable: '0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118',\n  walletCreationCode: '0x603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3'\n};\n\nvar v1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  config: config$2,\n  context: context$2,\n  signature: signature$1,\n  version: version$1,\n  DeployedWalletContext: DeployedWalletContext$1\n});\n\n//                              = keccak256(\"SetImageHash(bytes32 imageHash)\")\nconst SetImageHashPrefix = '0x8713a7c4465f6fbee2b6e9d6646d1d9f83fec929edfc4baf661f3c865bdd04d1';\nfunction hashSetImageHash(imageHash) {\n  return ethers__WEBPACK_IMPORTED_MODULE_8__.keccak256(messageSetImageHash(imageHash));\n}\nfunction messageSetImageHash(imageHash) {\n  return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['bytes32', 'bytes32'], [SetImageHashPrefix, imageHash]);\n}\nfunction decodeMessageSetImageHash(message) {\n  const arr = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(message);\n  if (arr.length !== 64) {\n    return undefined;\n  }\n  if (ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(arr.slice(0, 32)) !== SetImageHashPrefix) {\n    return undefined;\n  }\n  return ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(arr.slice(32, 64));\n}\nfunction isMessageSetImageHash(message) {\n  return decodeMessageSetImageHash(message) !== undefined;\n}\n\nvar chained = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SetImageHashPrefix: SetImageHashPrefix,\n  hashSetImageHash: hashSetImageHash,\n  messageSetImageHash: messageSetImageHash,\n  decodeMessageSetImageHash: decodeMessageSetImageHash,\n  isMessageSetImageHash: isMessageSetImageHash\n});\n\nlet SignatureType = /*#__PURE__*/function (SignatureType) {\n  SignatureType[SignatureType[\"Legacy\"] = 0] = \"Legacy\";\n  SignatureType[SignatureType[\"Dynamic\"] = 1] = \"Dynamic\";\n  SignatureType[SignatureType[\"NoChainIdDynamic\"] = 2] = \"NoChainIdDynamic\";\n  SignatureType[SignatureType[\"Chained\"] = 3] = \"Chained\";\n  return SignatureType;\n}({});\nlet SignaturePartType = /*#__PURE__*/function (SignaturePartType) {\n  SignaturePartType[SignaturePartType[\"Signature\"] = 0] = \"Signature\";\n  SignaturePartType[SignaturePartType[\"Address\"] = 1] = \"Address\";\n  SignaturePartType[SignaturePartType[\"DynamicSignature\"] = 2] = \"DynamicSignature\";\n  SignaturePartType[SignaturePartType[\"Node\"] = 3] = \"Node\";\n  SignaturePartType[SignaturePartType[\"Branch\"] = 4] = \"Branch\";\n  SignaturePartType[SignaturePartType[\"Subdigest\"] = 5] = \"Subdigest\";\n  SignaturePartType[SignaturePartType[\"Nested\"] = 6] = \"Nested\";\n  return SignaturePartType;\n}({});\nconst SignaturePartTypeLength = 66;\nfunction isUnrecoveredNode(node) {\n  return node.left !== undefined && node.right !== undefined;\n}\nfunction isUnrecoveredNestedLeaf(leaf) {\n  return leaf.tree !== undefined;\n}\nfunction isUnrecoveredSignatureLeaf(leaf) {\n  return leaf.unrecovered && leaf.signature !== undefined && leaf.isDynamic !== undefined;\n}\nfunction decodeSignatureTree(body) {\n  let arr = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(body);\n  let pointer;\n  const append = (prevPointer, node) => {\n    if (!prevPointer) {\n      return {\n        left: node\n      };\n    }\n    if (!prevPointer.right) {\n      return {\n        left: prevPointer.left,\n        right: node\n      };\n    }\n    return {\n      left: prevPointer,\n      right: node\n    };\n  };\n  while (arr.length > 0) {\n    const type = arr[0];\n    arr = arr.slice(1);\n    switch (type) {\n      case SignaturePartType.Signature:\n        {\n          const weight = arr[0];\n          const signature = ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(arr.slice(1, SignaturePartTypeLength + 1));\n          pointer = append(pointer, {\n            signature,\n            weight,\n            unrecovered: true,\n            isDynamic: false\n          });\n          arr = arr.slice(SignaturePartTypeLength + 1);\n        }\n        break;\n      case SignaturePartType.Address:\n        {\n          const weight = arr[0];\n          const address = ethers__WEBPACK_IMPORTED_MODULE_7__.getAddress(ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(arr.slice(1, 21)));\n          pointer = append(pointer, {\n            address,\n            weight\n          });\n          arr = arr.slice(21);\n        }\n        break;\n      case SignaturePartType.DynamicSignature:\n        {\n          const weight = arr[0];\n          const address = ethers__WEBPACK_IMPORTED_MODULE_7__.getAddress(ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(arr.slice(1, 21)));\n          const size = arr[21] << 16 | arr[22] << 8 | arr[23];\n          const signature = ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(arr.slice(24, 24 + size));\n          pointer = append(pointer, {\n            address,\n            signature,\n            weight,\n            unrecovered: true,\n            isDynamic: true\n          });\n          arr = arr.slice(24 + size);\n        }\n        break;\n      case SignaturePartType.Node:\n        {\n          const nodeHash = ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(arr.slice(0, 32));\n          pointer = append(pointer, {\n            nodeHash\n          });\n          arr = arr.slice(32);\n        }\n        break;\n      case SignaturePartType.Branch:\n        {\n          const size = arr[0] << 16 | arr[1] << 8 | arr[2];\n          const branch = decodeSignatureTree(arr.slice(3, 3 + size));\n          pointer = append(pointer, branch);\n          arr = arr.slice(3 + size);\n        }\n        break;\n      case SignaturePartType.Subdigest:\n        {\n          const subdigest = ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(arr.slice(0, 32));\n          pointer = append(pointer, {\n            subdigest\n          });\n          arr = arr.slice(32);\n        }\n        break;\n      case SignaturePartType.Nested:\n        {\n          const weight = arr[0];\n          const threshold = arr[1] << 8 | arr[2];\n          const size = arr[3] << 16 | arr[4] << 8 | arr[5];\n          const tree = decodeSignatureTree(arr.slice(6, 6 + size));\n          pointer = append(pointer, {\n            weight,\n            threshold,\n            tree\n          });\n          arr = arr.slice(6 + size);\n        }\n        break;\n      default:\n        throw new Error(`Unknown signature part type: ${type}: ${ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(arr)}`);\n    }\n  }\n  if (!pointer) {\n    throw new Error('Empty signature tree');\n  }\n  if (pointer.right) {\n    return pointer;\n  }\n  return pointer.left;\n}\nclass InvalidSignatureLeafError extends Error {\n  constructor(leaf) {\n    super(`Invalid signature leaf: ${JSON.stringify(leaf)}`);\n    this.leaf = leaf;\n  }\n}\nasync function recoverTopology(unrecovered, subdigest, provider) {\n  if (isUnrecoveredNode(unrecovered)) {\n    const [left, right] = await Promise.all([recoverTopology(unrecovered.left, subdigest, provider), recoverTopology(unrecovered.right, subdigest, provider)]);\n    return {\n      left,\n      right\n    };\n  }\n  if (isUnrecoveredNestedLeaf(unrecovered)) {\n    return {\n      weight: unrecovered.weight,\n      threshold: unrecovered.threshold,\n      tree: await recoverTopology(unrecovered.tree, subdigest, provider)\n    };\n  }\n  if (isUnrecoveredSignatureLeaf(unrecovered)) {\n    if (unrecovered.isDynamic) {\n      if (!unrecovered.address) {\n        throw new Error('Dynamic signature leaf without address');\n      }\n      const isValid = await isValidSignature(unrecovered.address, subdigest, unrecovered.signature, provider);\n      if (!isValid) {\n        throw new InvalidSignatureLeafError(unrecovered);\n      }\n      return {\n        weight: unrecovered.weight,\n        address: unrecovered.address,\n        signature: unrecovered.signature,\n        subdigest\n      };\n    } else {\n      return {\n        weight: unrecovered.weight,\n        address: recoverSigner(subdigest, unrecovered.signature),\n        signature: unrecovered.signature,\n        subdigest\n      };\n    }\n  }\n  return unrecovered;\n}\n\n// TODO: It should be possible to re-use encodeSignatureTree\n// and avoid duplicating this logic\nconst partEncoder = {\n  concat: (a, b) => {\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['bytes', 'bytes'], [a, b]);\n  },\n  node: nodeHash => {\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'bytes32'], [SignaturePartType.Node, nodeHash]);\n  },\n  branch: tree => {\n    const arr = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(tree);\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint24', 'bytes'], [SignaturePartType.Branch, arr.length, arr]);\n  },\n  nested: (weight, threshold, tree) => {\n    const arr = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(tree);\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'uint16', 'uint24', 'bytes'], [SignaturePartType.Nested, weight, threshold, arr.length, arr]);\n  },\n  subdigest: subdigest => {\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'bytes32'], [SignaturePartType.Subdigest, subdigest]);\n  },\n  signature: (weight, signature) => {\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'bytes'], [SignaturePartType.Signature, weight, signature]);\n  },\n  dynamicSignature: (weight, address, signature) => {\n    const arrSignature = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(signature);\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'address', 'uint24', 'bytes'], [SignaturePartType.DynamicSignature, weight, address, arrSignature.length, arrSignature]);\n  },\n  address: (weight, address) => {\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'address'], [SignaturePartType.Address, weight, address]);\n  }\n};\nfunction encodeSigners(config, parts, subdigests, chainId, options = {}) {\n  const tree = encodeTree(config.tree, parts, subdigests, options);\n  if (BigInt(chainId) === 0n) {\n    return {\n      encoded: ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint16', 'uint32', 'bytes'], [SignatureType.NoChainIdDynamic, config.threshold, config.checkpoint, tree.encoded]),\n      weight: tree.weight\n    };\n  }\n  if (BigInt(config.threshold) > 255n) {\n    return {\n      encoded: ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint16', 'uint32', 'bytes'], [SignatureType.Dynamic, config.threshold, config.checkpoint, tree.encoded]),\n      weight: tree.weight\n    };\n  }\n  return {\n    encoded: ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'uint32', 'bytes'], [SignatureType.Legacy, config.threshold, config.checkpoint, tree.encoded]),\n    weight: tree.weight\n  };\n}\nfunction encodeTree(topology, parts, subdigests, options = {}) {\n  const trim = !options.disableTrim;\n  if (isNode(topology)) {\n    const left = encodeTree(topology.left, parts, subdigests);\n    const right = encodeTree(topology.right, parts, subdigests);\n    const isLeftSigner = isSignerLeaf(topology.left);\n    const isRightSigner = isSignerLeaf(topology.right);\n    if (trim && left.weight === 0n && right.weight === 0n && !isLeftSigner && !isRightSigner) {\n      return {\n        // We don't need to include anything for this node\n        // just the hash will be enough\n        encoded: partEncoder.node(hashNode(topology)),\n        weight: 0n\n      };\n    }\n    if (trim && right.weight === 0n && !isRightSigner) {\n      return {\n        // The right node doesn't have any weight\n        // but we still need to include the left node encoded\n        encoded: partEncoder.concat(left.encoded, partEncoder.node(hashNode(topology.right))),\n        weight: left.weight\n      };\n    }\n    if (trim && left.weight === 0n && !isLeftSigner) {\n      return {\n        // The left node doesn't have any weight\n        // we can just append its hash, but for the right node\n        // we need to create a new \"branch\"\n        encoded: partEncoder.concat(partEncoder.node(hashNode(topology.left)), partEncoder.branch(right.encoded)),\n        weight: right.weight\n      };\n    }\n    return {\n      // Both nodes have weight, we need to include both\n      // the right one must be a branch\n      encoded: partEncoder.concat(left.encoded, partEncoder.branch(right.encoded)),\n      weight: left.weight + right.weight\n    };\n  }\n  if (isNestedLeaf(topology)) {\n    const tree = encodeTree(topology.tree, parts, subdigests);\n    if (trim && tree.weight === 0n) {\n      return {\n        encoded: partEncoder.node(hashNode(topology)),\n        weight: 0n\n      };\n    }\n    return {\n      encoded: partEncoder.nested(topology.weight, topology.threshold, tree.encoded),\n      weight: tree.weight\n    };\n  }\n  if (isNodeLeaf(topology)) {\n    return {\n      encoded: partEncoder.node(hashNode(topology)),\n      weight: 0n\n    };\n  }\n  if (isSubdigestLeaf(topology)) {\n    const include = subdigests.includes(topology.subdigest);\n    return {\n      encoded: partEncoder.subdigest(topology.subdigest),\n      weight: include ? _0xsequence_utils__WEBPACK_IMPORTED_MODULE_1__.MAX_UINT_256 : 0n\n    };\n  }\n  if (isSignerLeaf(topology)) {\n    const include = parts.has(topology.address);\n    if (include) {\n      const part = parts.get(topology.address);\n      const signature = part.signature;\n      if (options.forceDynamicEncoding || part.isDynamic) {\n        return {\n          encoded: partEncoder.dynamicSignature(topology.weight, topology.address, signature),\n          weight: BigInt(topology.weight)\n        };\n      } else {\n        return {\n          encoded: partEncoder.signature(topology.weight, signature),\n          weight: BigInt(topology.weight)\n        };\n      }\n    } else {\n      return {\n        encoded: partEncoder.address(topology.weight, topology.address),\n        weight: 0n\n      };\n    }\n  }\n  throw new Error(`Invalid topology - unknown error: ${JSON.stringify(topology)}`);\n}\nfunction deepestConfigOfSignature(signature) {\n  return isChainedSignature(signature) ? deepestConfigOfSignature(signature.suffix[signature.suffix.length - 1]) : signature.config;\n}\nfunction isUnrecoveredSignature(sig) {\n  return sig.type !== undefined && sig.decoded !== undefined && sig.version !== undefined && sig.version === 2;\n}\nfunction isUnrecoveredChainedSignature(sig) {\n  return sig.suffix !== undefined && Array.isArray(sig.suffix) && sig.suffix.every(isUnrecoveredSignature);\n}\nfunction isSignature(sig) {\n  return sig.type !== undefined && sig.config !== undefined && sig.digest !== undefined && sig.version !== undefined && sig.version === 2;\n}\nfunction isChainedSignature(sig) {\n  return sig.chain !== undefined && Array.isArray(sig.chain) && sig.chain.every(isSignature);\n}\nfunction decodeSignature(signature) {\n  const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(signature);\n  const type = bytes[0];\n  switch (type) {\n    case SignatureType.Legacy:\n      return {\n        version: 2,\n        type: SignatureType.Legacy,\n        decoded: decodeSignatureBody(bytes)\n      };\n    case SignatureType.Dynamic:\n      return {\n        version: 2,\n        type: SignatureType.Dynamic,\n        decoded: decodeSignatureBody(bytes.slice(1))\n      };\n    case SignatureType.NoChainIdDynamic:\n      return {\n        version: 2,\n        type: SignatureType.NoChainIdDynamic,\n        decoded: decodeSignatureBody(bytes.slice(1))\n      };\n    case SignatureType.Chained:\n      return decodeChainedSignature(bytes);\n    default:\n      throw new Error(`Invalid signature type: ${type}`);\n  }\n}\nfunction decodeSignatureBody(signature) {\n  const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(signature);\n  const threshold = bytes[0] << 8 | bytes[1];\n  const checkpoint = bytes[2] << 24 | bytes[3] << 16 | bytes[4] << 8 | bytes[5];\n  const tree = decodeSignatureTree(bytes.slice(6));\n  return {\n    threshold,\n    checkpoint,\n    tree\n  };\n}\nfunction decodeChainedSignature(signature) {\n  const arr = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(signature);\n  const type = arr[0];\n  if (type !== SignatureType.Chained) {\n    throw new Error(`Expected chained signature type: ${type}`);\n  }\n  const chain = [];\n  let index = 1;\n  while (index < arr.length) {\n    const size = arr[index] << 16 | arr[index + 1] << 8 | arr[index + 2];\n    index += 3;\n    const sig = decodeSignature(arr.slice(index, index + size));\n    chain.push(sig);\n    index += size;\n  }\n  const main = chain[0];\n  if (isUnrecoveredChainedSignature(main)) {\n    throw new Error(`Expected first link of chained signature to be a simple signature (not chained)`);\n  }\n  const suffix = chain.slice(1);\n  return _extends({}, main, {\n    suffix\n  });\n}\nfunction setImageHashStruct(imageHash) {\n  return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['bytes32', 'bytes32'], [ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPackedKeccak256(['string'], ['SetImageHash(bytes32 imageHash)']), imageHash]);\n}\nasync function recoverSignature(signature, payload, provider) {\n  const signedPayload = payload.subdigest === undefined ? payload : undefined;\n  const isNoChainId = signature.type === SignatureType.NoChainIdDynamic;\n  if (isNoChainId && signedPayload) {\n    signedPayload.chainId = 0;\n  }\n  const subdigest = signedPayload ? subdigestOf(signedPayload) : payload.subdigest;\n  if (!isUnrecoveredChainedSignature(signature)) {\n    const tree = await recoverTopology(signature.decoded.tree, subdigest, provider);\n    return {\n      version: 2,\n      type: signature.type,\n      subdigest,\n      config: _extends({\n        version: 2\n      }, signature.decoded, {\n        tree\n      })\n    };\n  }\n  if (!isSignedPayload(signedPayload)) {\n    throw new Error(`Chained signature recovery requires detailed signed payload, subdigest is not enough`);\n  }\n  const result = [];\n  let mutatedPayload = signedPayload;\n\n  // Recover the chain of signatures\n  // NOTICE: Remove the suffix from the \"first\" siganture\n  // otherwise we recurse infinitely\n  for (const sig of [_extends({}, signature, {\n    suffix: undefined\n  }), ...signature.suffix]) {\n    const recovered = await recoverSignature(sig, mutatedPayload, provider);\n    result.unshift(recovered);\n    const nextMessage = setImageHashStruct(imageHash(deepestConfigOfSignature(recovered)));\n    mutatedPayload = _extends({}, mutatedPayload, {\n      message: nextMessage,\n      digest: ethers__WEBPACK_IMPORTED_MODULE_8__.keccak256(nextMessage)\n    });\n  }\n  const main = result[0];\n  const suffix = result.slice(1);\n  return _extends({}, main, {\n    suffix\n  });\n}\nfunction encodeChain(main, suffix) {\n  const allSignatures = [main, ...(suffix || [])];\n  const encodedMap = allSignatures.map(s => ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(encodeSignature(s)));\n  const body = ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(encodedMap.map(() => ['uint24', 'bytes']).flat(), encodedMap.map(s => [s.length, s]).flat());\n  return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'bytes'], [SignatureType.Chained, body]);\n}\nfunction encodeSignature(decoded) {\n  if (ethers__WEBPACK_IMPORTED_MODULE_4__.isBytesLike(decoded)) return ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(decoded);\n  if (isUnrecoveredChainedSignature(decoded) || isChainedSignature(decoded)) {\n    return encodeChain(encodeSignature(decoded), (decoded.suffix || []).map(encodeSignature));\n  }\n  const body = isUnrecoveredSignature(decoded) ? decoded.decoded : decoded.config;\n  switch (decoded.type) {\n    case SignatureType.Legacy:\n      if (BigInt(body.threshold) > 255n) {\n        throw new Error(`Legacy signature threshold is too large: ${body.threshold} (max 255)`);\n      }\n      return encodeSignatureBody(body);\n    case SignatureType.NoChainIdDynamic:\n    case SignatureType.Dynamic:\n      return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'bytes'], [decoded.type, encodeSignatureBody(body)]);\n    case SignatureType.Chained:\n      throw new Error(`Unreachable code: Chained signature should be handled above`);\n    default:\n      throw new Error(`Invalid signature type: ${decoded.type}`);\n  }\n}\nfunction encodeSignatureBody(decoded) {\n  return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint16', 'uint32', 'bytes'], [decoded.threshold, decoded.checkpoint, encodeSignatureTree(decoded.tree)]);\n}\nfunction encodeSignatureTree(tree) {\n  if (isNode(tree) || isUnrecoveredNode(tree)) {\n    const encodedRight = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(encodeSignatureTree(tree.right));\n    const encodedLeft = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(encodeSignatureTree(tree.left));\n    const isBranching = isNode(tree.right) || isUnrecoveredNode(tree.right);\n    if (isBranching) {\n      return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['bytes', 'uint8', 'uint24', 'bytes'], [encodedLeft, SignaturePartType.Branch, encodedRight.length, encodedRight]);\n    } else {\n      return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['bytes', 'bytes'], [encodedLeft, encodedRight]);\n    }\n  }\n  if (isNestedLeaf(tree) || isUnrecoveredNestedLeaf(tree)) {\n    const nested = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(encodeSignatureTree(tree.tree));\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'uint16', 'uint24', 'bytes'], [SignaturePartType.Nested, tree.weight, tree.threshold, nested.length, nested]);\n  }\n  if (isUnrecoveredSignatureLeaf(tree) || isSignerLeaf(tree) && tree.signature !== undefined) {\n    const signature = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(tree.signature);\n    if (tree.isDynamic || signature.length !== SignaturePartTypeLength) {\n      if (!tree.address) throw new Error(`Dynamic signature leaf must have address`);\n      return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'address', 'uint24', 'bytes'], [SignaturePartType.DynamicSignature, tree.weight, tree.address, signature.length, signature]);\n    } else {\n      return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'bytes'], [SignaturePartType.Signature, tree.weight, signature]);\n    }\n  }\n  if (isSignerLeaf(tree)) {\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'uint8', 'address'], [SignaturePartType.Address, tree.weight, tree.address]);\n  }\n  if (isNodeLeaf(tree)) {\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'bytes32'], [SignaturePartType.Node, tree.nodeHash]);\n  }\n  if (isSubdigestLeaf(tree)) {\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint8', 'bytes32'], [SignaturePartType.Subdigest, tree.subdigest]);\n  }\n  throw new Error(`Unknown signature tree type: ${tree}`);\n}\nfunction signaturesOf(topology) {\n  if (isNode(topology)) {\n    return [...signaturesOf(topology.left), ...signaturesOf(topology.right)];\n  }\n  if (isNestedLeaf(topology)) {\n    return signaturesOf(topology.tree);\n  }\n  if (isSignerLeaf(topology) && topology.signature) {\n    return [{\n      address: topology.address,\n      signature: topology.signature\n    }];\n  }\n  return [];\n}\nfunction signaturesOfDecoded(utopology) {\n  if (isUnrecoveredNode(utopology)) {\n    return [...signaturesOfDecoded(utopology.left), ...signaturesOfDecoded(utopology.right)];\n  }\n  if (isUnrecoveredNestedLeaf(utopology)) {\n    return signaturesOfDecoded(utopology.tree);\n  }\n  if (isUnrecoveredSignatureLeaf(utopology)) {\n    return [utopology.signature];\n  }\n  return [];\n}\nfunction subdigestsOfDecoded(utopology) {\n  if (isUnrecoveredNode(utopology)) {\n    return [...subdigestsOfDecoded(utopology.left), ...subdigestsOfDecoded(utopology.right)];\n  }\n  if (isUnrecoveredNestedLeaf(utopology)) {\n    return subdigestsOfDecoded(utopology.tree);\n  }\n  if (isSubdigestLeaf(utopology)) {\n    return [utopology.subdigest];\n  }\n  return [];\n}\nasync function trimSignature(signature) {\n  const decoded = typeof signature === 'string' ? decodeSignature(signature) : signature;\n  if (isUnrecoveredChainedSignature(decoded)) {\n    // We need to trim every suffix AND the main signature\n    const _trimmed = await Promise.all([trimSignature(_extends({}, decoded, {\n      suffix: undefined\n    })), ...decoded.suffix.map(s => trimSignature(s))]);\n    return encodeChain(_trimmed[0], _trimmed.slice(1));\n  }\n  const {\n    trimmed\n  } = await trimUnrecoveredTree(decoded.decoded.tree);\n  return encodeSignature(_extends({}, decoded, {\n    decoded: _extends({}, decoded.decoded, {\n      tree: trimmed\n    })\n  }));\n}\nasync function trimUnrecoveredTree(tree, trimStaticDigest = true) {\n  if (isUnrecoveredNode(tree)) {\n    const [left, right] = await Promise.all([trimUnrecoveredTree(tree.left), trimUnrecoveredTree(tree.right)]);\n    if (left.weight === 0 && right.weight === 0) {\n      try {\n        // If both weights are 0 then it means we don't have any signatures yet\n        // because of that, we should be able to \"recover\" the tree with any subdigest\n        // and still get the valid node hash (there shouldn't be any signatures to verify)\n        const recovered = await recoverTopology(tree, ethers__WEBPACK_IMPORTED_MODULE_11__.ZeroHash, undefined);\n        return {\n          weight: 0,\n          trimmed: {\n            nodeHash: hashNode(recovered)\n          }\n        };\n      } catch (_unused) {\n        // If something fails it's more likely because some signatures have sneaked in\n        // in that case we should keep this node\n      }\n    } else {\n      return {\n        weight: left.weight + right.weight,\n        trimmed: {\n          left: left.trimmed,\n          right: right.trimmed\n        }\n      };\n    }\n  }\n  if (isUnrecoveredNestedLeaf(tree)) {\n    const trimmed = await trimUnrecoveredTree(tree.tree);\n    if (trimmed.weight === 0) {\n      try {\n        // If the nested leaf is empty, we can recover it with any subdigest\n        // and still get the valid node hash (there shouldn't be any signatures to verify)\n        const recovered = await recoverTopology(tree, ethers__WEBPACK_IMPORTED_MODULE_11__.ZeroHash, undefined);\n        return {\n          weight: 0,\n          trimmed: {\n            nodeHash: hashNode(recovered)\n          }\n        };\n      } catch (_unused2) {\n        // If something fails it's more likely because some signatures have sneaked in\n        // in that case we should keep this node\n      }\n    }\n    return {\n      weight: trimmed.weight,\n      trimmed: {\n        weight: tree.weight,\n        threshold: tree.threshold,\n        tree: trimmed.trimmed\n      }\n    };\n  }\n\n  // Hash nodes can be encoded as signer leaves if they have a weight below\n  // 256, most likely the are signer leaves wrongly encoded\n  if (isNodeLeaf(tree) && isEncodedSignerLeaf(tree.nodeHash)) {\n    return {\n      weight: 0,\n      trimmed: _extends({}, decodeSignerLeaf(tree.nodeHash))\n    };\n  }\n  if (isUnrecoveredSignatureLeaf(tree) || isSignerLeaf(tree) && tree.signature !== undefined) {\n    return {\n      weight: Number(tree.weight),\n      trimmed: tree\n    };\n  }\n  if (!trimStaticDigest && isSubdigestLeaf(tree)) {\n    return {\n      weight: +Infinity,\n      trimmed: tree\n    };\n  }\n  return {\n    weight: 0,\n    trimmed: tree\n  };\n}\nconst SignatureCoder = {\n  decode: data => {\n    return decodeSignature(data);\n  },\n  encode: data => {\n    return encodeSignature(data);\n  },\n  trim: data => {\n    return trimSignature(data);\n  },\n  supportsNoChainId: true,\n  recover: (data, payload, provider) => {\n    return recoverSignature(data, payload, provider);\n  },\n  encodeSigners: (config, signatures, subdigests, chainId) => {\n    return encodeSigners(config, signatures, subdigests, chainId);\n  },\n  hasEnoughSigningPower: (config, signatures) => {\n    const {\n      weight\n    } = SignatureCoder.encodeSigners(config, signatures, [], 0);\n    return weight >= BigInt(config.threshold);\n  },\n  chainSignatures: (main, suffix) => {\n    // Notice: v2 expects suffix to be reversed\n    // that being: from signed to current imageHash\n    const reversed = suffix.reverse();\n    const mraw = ethers__WEBPACK_IMPORTED_MODULE_4__.isBytesLike(main) ? main : encodeSignature(main);\n    const sraw = reversed.map(s => ethers__WEBPACK_IMPORTED_MODULE_4__.isBytesLike(s) ? s : encodeSignature(s));\n    return encodeChain(mraw, sraw);\n  },\n  hashSetImageHash: function (imageHash) {\n    return hashSetImageHash(imageHash);\n  },\n  signaturesOf(config) {\n    return signaturesOf(config.tree);\n  },\n  signaturesOfDecoded: function (data) {\n    return signaturesOfDecoded(data.decoded.tree);\n  }\n};\n\nvar signature = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SignatureType: SignatureType,\n  SignaturePartType: SignaturePartType,\n  SignaturePartTypeLength: SignaturePartTypeLength,\n  isUnrecoveredNode: isUnrecoveredNode,\n  isUnrecoveredNestedLeaf: isUnrecoveredNestedLeaf,\n  isUnrecoveredSignatureLeaf: isUnrecoveredSignatureLeaf,\n  decodeSignatureTree: decodeSignatureTree,\n  InvalidSignatureLeafError: InvalidSignatureLeafError,\n  recoverTopology: recoverTopology,\n  partEncoder: partEncoder,\n  encodeSigners: encodeSigners,\n  encodeTree: encodeTree,\n  deepestConfigOfSignature: deepestConfigOfSignature,\n  isUnrecoveredSignature: isUnrecoveredSignature,\n  isUnrecoveredChainedSignature: isUnrecoveredChainedSignature,\n  isSignature: isSignature,\n  isChainedSignature: isChainedSignature,\n  decodeSignature: decodeSignature,\n  decodeSignatureBody: decodeSignatureBody,\n  decodeChainedSignature: decodeChainedSignature,\n  setImageHashStruct: setImageHashStruct,\n  recoverSignature: recoverSignature,\n  encodeChain: encodeChain,\n  encodeSignature: encodeSignature,\n  encodeSignatureBody: encodeSignatureBody,\n  encodeSignatureTree: encodeSignatureTree,\n  signaturesOf: signaturesOf,\n  signaturesOfDecoded: signaturesOfDecoded,\n  subdigestsOfDecoded: subdigestsOfDecoded,\n  trimSignature: trimSignature,\n  trimUnrecoveredTree: trimUnrecoveredTree,\n  SignatureCoder: SignatureCoder\n});\n\n//\n// Tree typings - leaves\n//\n\n// This is an unknown node\n// it means the tree has a branch\n// but we don't know what the content\n\nfunction isSignerLeaf(leaf) {\n  return leaf.address !== undefined && leaf.weight !== undefined;\n}\nfunction isSubdigestLeaf(leaf) {\n  return leaf.subdigest !== undefined && leaf.address === undefined;\n}\nfunction topologyToJSON(tree) {\n  if (isNode(tree)) {\n    return JSON.stringify({\n      left: topologyToJSON(tree.left),\n      right: topologyToJSON(tree.right)\n    });\n  }\n  if (isNestedLeaf(tree)) {\n    return JSON.stringify({\n      weight: BigInt(tree.weight).toString(),\n      threshold: BigInt(tree.threshold).toString(),\n      tree: topologyToJSON(tree.tree)\n    });\n  }\n  if (isSignerLeaf(tree)) {\n    return JSON.stringify({\n      address: tree.address,\n      weight: BigInt(tree.weight).toString()\n    });\n  }\n  return JSON.stringify(tree);\n}\nfunction topologyFromJSON(json) {\n  const parsed = typeof json === 'string' ? JSON.parse(json) : json;\n  if (parsed.left !== undefined && parsed.right !== undefined) {\n    return {\n      left: topologyFromJSON(parsed.left),\n      right: topologyFromJSON(parsed.right)\n    };\n  }\n  if (parsed.weight !== undefined && parsed.threshold !== undefined && parsed.tree !== undefined) {\n    return {\n      weight: BigInt(parsed.weight),\n      threshold: BigInt(parsed.threshold),\n      tree: topologyFromJSON(parsed.tree)\n    };\n  }\n  if (parsed.address !== undefined && parsed.weight !== undefined) {\n    return {\n      address: parsed.address,\n      weight: BigInt(parsed.weight)\n    };\n  }\n  return parsed;\n}\nfunction isNestedLeaf(leaf) {\n  return leaf.tree !== undefined && leaf.weight !== undefined && leaf.threshold !== undefined;\n}\nfunction isNodeLeaf(leaf) {\n  return leaf.nodeHash !== undefined;\n}\nfunction isLeaf(leaf) {\n  return isSignerLeaf(leaf) || isSubdigestLeaf(leaf) || isNestedLeaf(leaf) || isNodeLeaf(leaf);\n}\n\n//\n// Tree typings - nodes\n//\n\nfunction isNode(node) {\n  return node.left !== undefined && node.right !== undefined;\n}\nfunction isTopology(topology) {\n  return isNode(topology) || isLeaf(topology);\n}\nfunction encodeSignerLeaf(leaf) {\n  return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['uint96', 'address'], [leaf.weight, leaf.address]);\n}\nfunction decodeSignerLeaf(encoded) {\n  const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(encoded);\n  if (bytes.length !== 32) {\n    throw new Error('Invalid encoded string length');\n  }\n  const weight = BigInt(ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(bytes.slice(0, 12)));\n  const address = ethers__WEBPACK_IMPORTED_MODULE_7__.getAddress(ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(bytes.slice(12)));\n  return {\n    weight,\n    address\n  };\n}\nfunction isEncodedSignerLeaf(encoded) {\n  const bytes = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(encoded);\n  if (bytes.length !== 32) {\n    return false;\n  }\n  const prefix = bytes.slice(0, 11);\n  return prefix.every(byte => byte === 0);\n}\nfunction hashNode(node) {\n  if (isSignerLeaf(node)) {\n    return encodeSignerLeaf(node);\n  }\n  if (isSubdigestLeaf(node)) {\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPackedKeccak256(['string', 'bytes32'], ['Sequence static digest:\\n', node.subdigest]);\n  }\n  if (isNestedLeaf(node)) {\n    const nested = hashNode(node.tree);\n    return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPackedKeccak256(['string', 'bytes32', 'uint256', 'uint256'], ['Sequence nested config:\\n', nested, node.threshold, node.weight]);\n  }\n  if (isNodeLeaf(node)) {\n    return node.nodeHash;\n  }\n  return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPackedKeccak256(['bytes32', 'bytes32'], [hashNode(node.left), hashNode(node.right)]);\n}\nfunction leftFace(topology) {\n  const stack = [];\n  let prev = topology;\n  while (!isLeaf(prev)) {\n    stack.unshift(prev.right);\n    prev = prev.left;\n  }\n  stack.unshift(prev);\n  return stack;\n}\n\n//\n// Wallet config types\n//\n\nfunction isWalletConfig(config) {\n  return config.threshold !== undefined && config.checkpoint !== undefined && config.tree !== undefined && config.version !== undefined && config.version === 2;\n}\nfunction imageHash(config) {\n  return ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPackedKeccak256(['bytes32', 'uint256'], [ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPackedKeccak256(['bytes32', 'uint256'], [hashNode(config.tree), config.threshold]), config.checkpoint]);\n}\n\n//\n// Simple wallet config types\n// (used for building and reading merkle configs)\n//\n// dev: `members` is a flat representation of the tree\n//      it keeps relevant structure like 'nested trees' but\n//      it ignores the tree structure\n//\n//\n\nfunction isSimpleNestedMember(member) {\n  return member.threshold !== undefined && member.weight !== undefined && member.members !== undefined;\n}\nfunction topologyToMembers(tree) {\n  if (isSignerLeaf(tree) || isSubdigestLeaf(tree)) {\n    return [tree];\n  }\n  if (isNestedLeaf(tree)) {\n    return [{\n      threshold: tree.threshold,\n      weight: tree.weight,\n      members: topologyToMembers(tree.tree)\n    }];\n  }\n  if (isNodeLeaf(tree)) {\n    // we don't know the content of this node\n    // so we omit it\n    return [];\n  }\n  return [...topologyToMembers(tree.left), ...topologyToMembers(tree.right)];\n}\nfunction hasUnknownNodes(tree) {\n  if (isNodeLeaf(tree)) {\n    return true;\n  }\n  if (isNode(tree)) {\n    return hasUnknownNodes(tree.left) || hasUnknownNodes(tree.right);\n  }\n  return false;\n}\nfunction toSimpleWalletConfig(config) {\n  return {\n    threshold: config.threshold,\n    checkpoint: config.checkpoint,\n    members: topologyToMembers(config.tree)\n  };\n}\nconst membersAsTopologies = (members, builder) => {\n  return members.map(member => {\n    if (isSimpleNestedMember(member)) {\n      return {\n        tree: builder(member.members),\n        threshold: member.threshold,\n        weight: member.weight\n      };\n    }\n    return member;\n  });\n};\nfunction legacyTopologyBuilder(members) {\n  if (members.length === 0) {\n    throw new Error('Empty members array');\n  }\n  const asTopologies = membersAsTopologies(members, legacyTopologyBuilder);\n  return asTopologies.reduce((acc, member) => {\n    return {\n      left: acc,\n      right: member\n    };\n  });\n}\nfunction merkleTopologyBuilder(members) {\n  if (members.length === 0) {\n    throw new Error('Empty members array');\n  }\n  const leaves = membersAsTopologies(members, merkleTopologyBuilder);\n  for (let s = leaves.length; s > 1; s = s / 2) {\n    for (let i = 0; i < s / 2; i++) {\n      const j1 = i * 2;\n      const j2 = j1 + 1;\n      if (j2 >= s) {\n        leaves[i] = leaves[j1];\n      } else {\n        leaves[i] = {\n          left: leaves[j1],\n          right: leaves[j2]\n        };\n      }\n    }\n  }\n  return leaves[0];\n}\nfunction optimized2SignersTopologyBuilder(members) {\n  if (members.length > 8) {\n    return merkleTopologyBuilder(members);\n  }\n  return legacyTopologyBuilder(members);\n}\nfunction toWalletConfig(simpleWalletConfig, builder = optimized2SignersTopologyBuilder) {\n  return {\n    version: 2,\n    threshold: simpleWalletConfig.threshold,\n    checkpoint: simpleWalletConfig.checkpoint,\n    tree: builder(simpleWalletConfig.members)\n  };\n}\nfunction hasSubdigest(tree, subdigest) {\n  if (isSubdigestLeaf(tree)) {\n    return tree.subdigest === subdigest;\n  }\n  if (isNode(tree)) {\n    return hasSubdigest(tree.left, subdigest) || hasSubdigest(tree.right, subdigest);\n  }\n  return false;\n}\nfunction signersOf(tree) {\n  const stack = [tree];\n  const signers = new Set();\n  while (stack.length > 0) {\n    const node = stack.pop();\n    if (isNestedLeaf(node)) {\n      stack.push(node.tree);\n    } else if (isNode(node)) {\n      stack.push(node.left);\n      stack.push(node.right);\n    } else if (isSignerLeaf(node)) {\n      signers.add({\n        address: node.address,\n        weight: Number(node.weight)\n      });\n    }\n  }\n  return Array.from(signers);\n}\nfunction isComplete(tree) {\n  if (isNode(tree)) {\n    return isComplete(tree.left) && isComplete(tree.right);\n  }\n  return !isNodeLeaf(tree);\n}\nconst ConfigCoder = {\n  isWalletConfig: config => {\n    return config.version === 2 && config.threshold !== undefined && config.tree !== undefined;\n  },\n  imageHashOf: config => {\n    return imageHash(config);\n  },\n  hasSubdigest: (config, subdigest) => {\n    return hasSubdigest(config.tree, subdigest);\n  },\n  checkpointOf: config => {\n    return BigInt(config.checkpoint);\n  },\n  signersOf: config => {\n    return signersOf(config.tree);\n  },\n  fromSimple: config => {\n    var _config$subdigests;\n    return toWalletConfig(_extends({}, config, {\n      members: [...config.signers, ...((_config$subdigests = config.subdigests) != null ? _config$subdigests : []).map(subdigest => ({\n        subdigest\n      }))]\n    }));\n  },\n  isComplete: config => {\n    return isComplete(config.tree);\n  },\n  // isValid = (config: WalletConfig): boolean {}\n  /**\n   *\n   * Notice: context and kind are ignored because v2\n   * doesn't need to manually update the implementation before\n   * a configuration update, it's automatically done by the contract.\n   *\n   */\n  update: {\n    isKindUsed: true,\n    buildTransaction: (wallet, config, _context, _kind) => {\n      const module = new ethers__WEBPACK_IMPORTED_MODULE_10__.Interface(_0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__.walletContracts.mainModuleUpgradable.abi);\n      return {\n        entrypoint: wallet,\n        transactions: [{\n          to: wallet,\n          data: module.encodeFunctionData(module.getFunction('updateImageHash'), [ConfigCoder.imageHashOf(config)]),\n          gasLimit: 0,\n          delegateCall: false,\n          revertOnError: true,\n          value: 0\n        }]\n      };\n    },\n    decodeTransaction: function (tx) {\n      var _tx$transactions$0$va, _tx$transactions$, _tx$transactions$0$ga, _tx$transactions$2;\n      const module = new ethers__WEBPACK_IMPORTED_MODULE_10__.Interface(_0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__.walletContracts.mainModuleUpgradable.abi);\n      if (tx.transactions.length !== 1) {\n        throw new Error('Invalid transaction bundle, expected 1 transaction');\n      }\n      const data = tx.transactions[0].data;\n      if (!data) {\n        throw new Error('Invalid transaction bundle, expected data');\n      }\n      const decoded = module.decodeFunctionData(module.getFunction('updateImageHash'), data);\n      if (!decoded) {\n        throw new Error('Invalid transaction bundle, expected valid data');\n      }\n      if (tx.transactions[0].to !== tx.entrypoint) {\n        throw new Error('Invalid transaction bundle, expected to be sent to entrypoint');\n      }\n      if (tx.transactions[0].delegateCall) {\n        throw new Error('Invalid transaction bundle, expected not to be a delegateCall');\n      }\n      if (!tx.transactions[0].revertOnError) {\n        throw new Error('Invalid transaction bundle, expected revertOnError');\n      }\n      if (BigInt((_tx$transactions$0$va = (_tx$transactions$ = tx.transactions[0]) == null ? void 0 : _tx$transactions$.value) != null ? _tx$transactions$0$va : 0) !== 0n) {\n        throw new Error('Invalid transaction bundle, expected value to be 0');\n      }\n      if (BigInt((_tx$transactions$0$ga = (_tx$transactions$2 = tx.transactions[0]) == null ? void 0 : _tx$transactions$2.gasLimit) != null ? _tx$transactions$0$ga : 0) !== 0n) {\n        throw new Error('Invalid transaction bundle, expected value to be 0');\n      }\n      return {\n        address: tx.entrypoint,\n        newImageHash: decoded[0],\n        kind: undefined\n      };\n    }\n  },\n  toJSON: function (config) {\n    return JSON.stringify({\n      version: config.version,\n      threshold: BigInt(config.threshold).toString(),\n      checkpoint: BigInt(config.checkpoint).toString(),\n      tree: topologyToJSON(config.tree)\n    });\n  },\n  fromJSON: function (json) {\n    const config = JSON.parse(json);\n    return {\n      version: config.version,\n      threshold: BigInt(config.threshold),\n      checkpoint: BigInt(config.checkpoint),\n      tree: topologyFromJSON(config.tree)\n    };\n  },\n  editConfig: function (config, action) {\n    var _action$threshold, _action$checkpoint;\n    const members = topologyToMembers(config.tree);\n    if (action.add) {\n      for (const signer of action.add) {\n        if (members.find(s => isSignerLeaf(s) && s.address === signer.address)) {\n          continue;\n        }\n        members.push({\n          address: signer.address,\n          weight: signer.weight\n        });\n      }\n    }\n    if (action.remove) {\n      for (const address of action.remove) {\n        const index = members.findIndex(s => isSignerLeaf(s) && s.address === address);\n        if (index >= 0) {\n          members.splice(index, 1);\n        }\n      }\n    }\n    return {\n      version: config.version,\n      threshold: (_action$threshold = action.threshold) != null ? _action$threshold : config.threshold,\n      checkpoint: (_action$checkpoint = action.checkpoint) != null ? _action$checkpoint : config.checkpoint,\n      tree: optimized2SignersTopologyBuilder(members)\n    };\n  },\n  buildStubSignature: function (config, overrides) {\n    const parts = new Map();\n    for (const [signer, signature] of overrides.entries()) {\n      parts.set(signer, {\n        signature,\n        isDynamic: true\n      });\n      const {\n        encoded,\n        weight\n      } = encodeSigners(config, parts, [], 0);\n      if (weight >= BigInt(config.threshold)) {\n        return encoded;\n      }\n    }\n    const signers = signersOf(config.tree);\n    for (const {\n      address\n    } of signers.sort(({\n      weight: a\n    }, {\n      weight: b\n    }) => a - b)) {\n      const signature = '0x4e82f02f388a12b5f9d29eaf2452dd040c0ee5804b4e504b4dd64e396c6c781f2c7624195acba242dd825bfd25a290912e3c230841fd55c9a734c4de8d9899451b02';\n      parts.set(address, {\n        signature,\n        isDynamic: false\n      });\n      const {\n        encoded,\n        weight\n      } = encodeSigners(config, parts, [], 0);\n      if (weight >= BigInt(config.threshold)) {\n        return encoded;\n      }\n    }\n    return encodeSigners(config, parts, [], 0).encoded;\n  }\n};\n\nvar config$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  isSignerLeaf: isSignerLeaf,\n  isSubdigestLeaf: isSubdigestLeaf,\n  topologyToJSON: topologyToJSON,\n  topologyFromJSON: topologyFromJSON,\n  isNestedLeaf: isNestedLeaf,\n  isNodeLeaf: isNodeLeaf,\n  isLeaf: isLeaf,\n  isNode: isNode,\n  isTopology: isTopology,\n  encodeSignerLeaf: encodeSignerLeaf,\n  decodeSignerLeaf: decodeSignerLeaf,\n  isEncodedSignerLeaf: isEncodedSignerLeaf,\n  hashNode: hashNode,\n  leftFace: leftFace,\n  isWalletConfig: isWalletConfig,\n  imageHash: imageHash,\n  isSimpleNestedMember: isSimpleNestedMember,\n  topologyToMembers: topologyToMembers,\n  hasUnknownNodes: hasUnknownNodes,\n  toSimpleWalletConfig: toSimpleWalletConfig,\n  legacyTopologyBuilder: legacyTopologyBuilder,\n  merkleTopologyBuilder: merkleTopologyBuilder,\n  optimized2SignersTopologyBuilder: optimized2SignersTopologyBuilder,\n  toWalletConfig: toWalletConfig,\n  hasSubdigest: hasSubdigest,\n  signersOf: signersOf,\n  isComplete: isComplete,\n  ConfigCoder: ConfigCoder\n});\n\nvar context$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nconst coders = {\n  config: ConfigCoder,\n  signature: SignatureCoder\n};\nconst version = 2;\nconst DeployedWalletContext = {\n  version: version,\n  factory: '0xFaA5c0b14d1bED5C888Ca655B9a8A5911F78eF4A',\n  guestModule: '0xfea230Ee243f88BC698dD8f1aE93F8301B6cdfaE',\n  mainModule: '0xfBf8f1A5E00034762D928f46d438B947f5d4065d',\n  mainModuleUpgradable: '0x4222dcA3974E39A8b41c411FeDDE9b09Ae14b911',\n  walletCreationCode: '0x603a600e3d39601a805130553df3363d3d373d3d3d363d30545af43d82803e903d91601857fd5bf3',\n  proxyImplementationHook: '0x1f56dbAD5e8319F0DE9a323E24A31b5077dEB1a4'\n};\n\nvar v2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  config: config$1,\n  signature: signature,\n  context: context$1,\n  chained: chained,\n  coders: coders,\n  version: version,\n  DeployedWalletContext: DeployedWalletContext\n});\n\nvar config = /*#__PURE__*/Object.freeze({\n  __proto__: null\n});\n\nfunction addressOf(context, imageHash) {\n  const codeHash = ethers__WEBPACK_IMPORTED_MODULE_8__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['bytes', 'bytes32'], [context.walletCreationCode, ethers__WEBPACK_IMPORTED_MODULE_4__.zeroPadValue(context.mainModule, 32)]));\n  const hash = ethers__WEBPACK_IMPORTED_MODULE_8__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_2__.solidityPacked(['bytes1', 'address', 'bytes32', 'bytes32'], ['0xff', context.factory, imageHash, codeHash]));\n  return ethers__WEBPACK_IMPORTED_MODULE_7__.getAddress(ethers__WEBPACK_IMPORTED_MODULE_4__.dataSlice(hash, 12));\n}\nasync function isValidCounterfactual(wallet, digest, signature, chainId, provider, contexts) {\n  // We don't know the version of the signature\n  // so we need to try all of them\n  const res = await Promise.all(allVersions.map(async version => {\n    try {\n      const decoded = version.signature.SignatureCoder.decode(ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(signature));\n      const recovered1 = await version.signature.SignatureCoder.recover(decoded, {\n        address: wallet,\n        digest: ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(digest),\n        chainId\n      }, provider);\n      const imageHash = version.config.ConfigCoder.imageHashOf(recovered1.config);\n      const counterfactualAddress = addressOf(contexts[version.version], imageHash);\n      if (counterfactualAddress.toLowerCase() === wallet.toLowerCase()) {\n        return true;\n      }\n\n      // chainId=0 means no chainId, so the signature is valid for all chains\n      // we need to check that case too\n      const recovered2 = await version.signature.SignatureCoder.recover(decoded, {\n        address: wallet,\n        digest: ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(digest),\n        chainId\n      }, provider);\n      const imageHash2 = version.config.ConfigCoder.imageHashOf(recovered2.config);\n      const counterfactualAddress2 = addressOf(contexts[version.version], imageHash2);\n      return counterfactualAddress2.toLowerCase() === wallet.toLowerCase();\n    } catch (_unused) {}\n\n    // We most likely failed to decode the signature\n    return false;\n  }));\n  return res.some(r => r);\n}\nfunction isValidVersionedContext(contexts) {\n  // number of keys is the number of versions\n  const versions = Object.keys(contexts).length;\n\n  // check that all versions exist and are valid\n  for (let i = 1; i <= versions; i++) {\n    const context = contexts[i];\n    if (!context || context.version !== i) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction latestContext(contexts) {\n  const versions = Object.keys(contexts).length;\n  return contexts[versions];\n}\nconst defaultContexts = {\n  1: DeployedWalletContext$1,\n  2: DeployedWalletContext\n};\n\nvar context = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  addressOf: addressOf,\n  isValidCounterfactual: isValidCounterfactual,\n  isValidVersionedContext: isValidVersionedContext,\n  latestContext: latestContext,\n  defaultContexts: defaultContexts\n});\n\nconst MetaTransactionsType = `tuple(\n  bool delegateCall,\n  bool revertOnError,\n  uint256 gasLimit,\n  address target,\n  uint256 value,\n  bytes data\n)[]`;\nfunction intendTransactionBundle(bundle, wallet, chainId, id) {\n  return _extends({}, bundle, {\n    chainId,\n    intent: {\n      id: id,\n      wallet\n    }\n  });\n}\nfunction intendedTransactionID(bundle) {\n  return ethers__WEBPACK_IMPORTED_MODULE_8__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_9__.AbiCoder.defaultAbiCoder().encode(['address', 'uint256', 'bytes32'], [bundle.intent.wallet, bundle.chainId, bundle.intent.id]));\n}\nfunction unpackMetaTransactionsData(data) {\n  const res = ethers__WEBPACK_IMPORTED_MODULE_9__.AbiCoder.defaultAbiCoder().decode(['uint256', MetaTransactionsType], data);\n  if (res.length !== 2 || !res[0] || !res[1]) throw new Error('Invalid meta transaction data');\n  return [res[0], res[1]];\n}\nfunction packMetaTransactionsData(nonce, txs) {\n  return ethers__WEBPACK_IMPORTED_MODULE_9__.AbiCoder.defaultAbiCoder().encode(['uint256', MetaTransactionsType], [nonce, sequenceTxAbiEncode(txs)]);\n}\nfunction digestOfTransactions(nonce, txs) {\n  return ethers__WEBPACK_IMPORTED_MODULE_8__.keccak256(packMetaTransactionsData(nonce, txs));\n}\nfunction subdigestOfTransactions(address, chainId, nonce, txs) {\n  return subdigestOf({\n    address,\n    chainId,\n    digest: digestOfTransactions(nonce, txs)\n  });\n}\nfunction subdigestOfGuestModuleTransactions(guestModule, chainId, txs) {\n  return subdigestOf({\n    address: guestModule,\n    chainId,\n    digest: ethers__WEBPACK_IMPORTED_MODULE_8__.keccak256(ethers__WEBPACK_IMPORTED_MODULE_9__.AbiCoder.defaultAbiCoder().encode(['string', MetaTransactionsType], ['guest:', sequenceTxAbiEncode(txs)]))\n  });\n}\nfunction toSequenceTransactions(wallet, txs) {\n  return txs.map(tx => toSequenceTransaction(wallet, tx));\n}\nfunction toSequenceTransaction(wallet, tx) {\n  if (tx.to && tx.to !== ethers__WEBPACK_IMPORTED_MODULE_12__.ZeroAddress) {\n    return {\n      nonce: !isNullish(tx.nonce) ? BigInt(tx.nonce) : undefined,\n      transaction: {\n        delegateCall: false,\n        revertOnError: false,\n        gasLimit: !isNullish(tx.gasLimit) ? BigInt(tx.gasLimit) : undefined,\n        // XXX: `tx.to` could also be ethers Addressable type which returns a getAddress promise\n        // Keeping this as is for now so we don't have to change everything to async\n        to: tx.to,\n        value: BigInt(tx.value || 0),\n        data: tx.data || '0x'\n      }\n    };\n  } else {\n    const walletInterface = new ethers__WEBPACK_IMPORTED_MODULE_10__.Interface(_0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__.walletContracts.mainModule.abi);\n    const data = walletInterface.encodeFunctionData(walletInterface.getFunction('createContract'), [tx.data]);\n    return {\n      nonce: typeof tx.nonce === 'number' ? BigInt(tx.nonce) : undefined,\n      transaction: {\n        delegateCall: false,\n        revertOnError: false,\n        gasLimit: !isNullish(tx.gasLimit) ? BigInt(tx.gasLimit) : undefined,\n        to: wallet,\n        value: BigInt(tx.value || 0),\n        data\n      }\n    };\n  }\n}\nfunction isSequenceTransaction(tx) {\n  return tx.delegateCall !== undefined || tx.revertOnError !== undefined;\n}\nfunction hasSequenceTransactions(txs) {\n  return txs.every(isSequenceTransaction);\n}\n\n// TODO: We may be able to remove this if we make Transaction === TransactionEncoded\nfunction sequenceTxAbiEncode(txs) {\n  return txs.map(tx => {\n    var _tx$to;\n    return {\n      delegateCall: tx.delegateCall === true,\n      revertOnError: tx.revertOnError === true,\n      gasLimit: !isNullish(tx.gasLimit) ? BigInt(tx.gasLimit) : 0n,\n      target: (_tx$to = tx.to) != null ? _tx$to : ethers__WEBPACK_IMPORTED_MODULE_12__.ZeroAddress,\n      value: !isNullish(tx.value) ? tx.value : 0n,\n      data: tx.data || '0x'\n    };\n  });\n}\nfunction fromTxAbiEncode(txs) {\n  return txs.map(tx => ({\n    delegateCall: tx.delegateCall,\n    revertOnError: tx.revertOnError,\n    gasLimit: tx.gasLimit,\n    to: tx.target,\n    value: tx.value,\n    data: tx.data\n  }));\n}\n\n// export function appendNonce(txs: Transaction[], nonce: ethers.BigNumberish): Transaction[] {\n//   return txs.map((t: Transaction) => ({ ...t, nonce }))\n// }\n\nfunction encodeNonce(space, nonce) {\n  const bspace = BigInt(space);\n  const bnonce = BigInt(nonce);\n  const shl = 2n ** 96n;\n  if (bnonce / shl !== 0n) {\n    throw new Error('Space already encoded');\n  }\n  return bnonce + bspace * shl;\n}\nfunction decodeNonce(nonce) {\n  const bnonce = BigInt(nonce);\n  const shr = 2n ** 96n;\n  return [bnonce / shr, bnonce % shr];\n}\nfunction fromTransactionish(wallet, transaction) {\n  if (Array.isArray(transaction)) {\n    if (hasSequenceTransactions(transaction)) {\n      return transaction;\n    } else {\n      const stx = toSequenceTransactions(wallet, transaction);\n      return stx.map(t => t.transaction);\n    }\n  } else if (isSequenceTransaction(transaction)) {\n    return [transaction];\n  } else {\n    return [toSequenceTransaction(wallet, transaction).transaction];\n  }\n}\nfunction isTransactionBundle(cand) {\n  return cand !== undefined && cand.entrypoint !== undefined && cand.chainId !== undefined && cand.transactions !== undefined && cand.nonce !== undefined && cand.intent !== undefined && cand.intent.id !== undefined && cand.intent.wallet !== undefined && Array.isArray(cand.transactions) && cand.transactions.reduce((p, c) => p && isSequenceTransaction(c), true);\n}\nfunction isSignedTransactionBundle(cand) {\n  return cand !== undefined && cand.signature !== undefined && cand.signature !== '' && isTransactionBundle(cand);\n}\nfunction encodeBundleExecData(bundle) {\n  const walletInterface = new ethers__WEBPACK_IMPORTED_MODULE_10__.Interface(_0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__.walletContracts.mainModule.abi);\n  return walletInterface.encodeFunctionData(walletInterface.getFunction('execute'), isSignedTransactionBundle(bundle) ? [\n  // Signed transaction bundle has all 3 parameters\n  sequenceTxAbiEncode(bundle.transactions), bundle.nonce, bundle.signature] : [\n  // Unsigned bundle may be a GuestModule call, so signature and nonce are missing\n  sequenceTxAbiEncode(bundle.transactions), 0, new Uint8Array([])]);\n}\n\n// TODO: Use Sequence ABI package\nconst selfExecuteSelector = '0x61c2926c';\nconst selfExecuteAbi = `tuple(\n  bool delegateCall,\n  bool revertOnError,\n  uint256 gasLimit,\n  address target,\n  uint256 value,\n  bytes data\n)[]`;\n\n// Splits Sequence batch transactions into individual parts\nconst unwind = (wallet, transactions) => {\n  const unwound = [];\n  const walletInterface = new ethers__WEBPACK_IMPORTED_MODULE_10__.Interface(_0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__.walletContracts.mainModule.abi);\n  for (const tx of transactions) {\n    const txData = ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(tx.data || '0x');\n    if (tx.to === wallet && ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(txData.slice(0, 4)) === selfExecuteSelector) {\n      // Decode as selfExecute call\n      const data = txData.slice(4);\n      const decoded = ethers__WEBPACK_IMPORTED_MODULE_9__.AbiCoder.defaultAbiCoder().decode([selfExecuteAbi], data)[0];\n      unwound.push(...unwind(tx.to, decoded.map(d => _extends({}, d, {\n        to: d.target\n      }))));\n    } else {\n      try {\n        const innerTransactions = walletInterface.decodeFunctionData('execute', txData)[0];\n        const unwoundTransactions = unwind(wallet, innerTransactions.map(tx => _extends({}, tx.toObject(), {\n          to: tx.target\n        })));\n        unwound.push(...unwoundTransactions);\n      } catch (_unused) {\n        unwound.push(tx);\n      }\n    }\n  }\n  return unwound;\n};\nconst isNullish = value => value === null || value === void 0;\n\nvar transaction = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  MetaTransactionsType: MetaTransactionsType,\n  intendTransactionBundle: intendTransactionBundle,\n  intendedTransactionID: intendedTransactionID,\n  unpackMetaTransactionsData: unpackMetaTransactionsData,\n  packMetaTransactionsData: packMetaTransactionsData,\n  digestOfTransactions: digestOfTransactions,\n  subdigestOfTransactions: subdigestOfTransactions,\n  subdigestOfGuestModuleTransactions: subdigestOfGuestModuleTransactions,\n  toSequenceTransactions: toSequenceTransactions,\n  toSequenceTransaction: toSequenceTransaction,\n  isSequenceTransaction: isSequenceTransaction,\n  hasSequenceTransactions: hasSequenceTransactions,\n  sequenceTxAbiEncode: sequenceTxAbiEncode,\n  fromTxAbiEncode: fromTxAbiEncode,\n  encodeNonce: encodeNonce,\n  decodeNonce: decodeNonce,\n  fromTransactionish: fromTransactionish,\n  isTransactionBundle: isTransactionBundle,\n  isSignedTransactionBundle: isSignedTransactionBundle,\n  encodeBundleExecData: encodeBundleExecData,\n  selfExecuteSelector: selfExecuteSelector,\n  selfExecuteAbi: selfExecuteAbi,\n  unwind: unwind\n});\n\n/* Source of Offchain EIP-6492 validation:\n\n// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.18;\n\n\n// As per ERC-1271\ninterface IERC1271Wallet {\n  function isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4 magicValue);\n}\n\nerror ERC1271Revert(bytes error);\nerror ERC6492DeployFailed(bytes error);\n\ncontract UniversalSigValidator {\n  bytes32 private constant ERC6492_DETECTION_SUFFIX = 0x6492649264926492649264926492649264926492649264926492649264926492;\n  bytes4 private constant ERC1271_SUCCESS = 0x1626ba7e;\n\n  function isValidSigImpl(\n    address _signer,\n    bytes32 _hash,\n    bytes calldata _signature,\n    bool allowSideEffects,\n    bool deployAlreadyDeployed\n  ) public returns (bool) {\n    uint contractCodeLen = address(_signer).code.length;\n    bytes memory sigToValidate;\n    // The order here is striclty defined in https://eips.ethereum.org/EIPS/eip-6492\n    // - ERC-6492 suffix check and verification first, while being permissive in case the contract is already deployed; if the contract is deployed we will check the sig against the deployed version, this allows 6492 signatures to still be validated while taking into account potential key rotation\n    // - ERC-1271 verification if there's contract code\n    // - finally, ecrecover\n    bool isCounterfactual = bytes32(_signature[_signature.length-32:_signature.length]) == ERC6492_DETECTION_SUFFIX;\n    if (isCounterfactual) {\n      address create2Factory;\n      bytes memory factoryCalldata;\n      (create2Factory, factoryCalldata, sigToValidate) = abi.decode(_signature[0:_signature.length-32], (address, bytes, bytes));\n\n      if (contractCodeLen == 0 || deployAlreadyDeployed) {\n        (bool success, bytes memory err) = create2Factory.call(factoryCalldata);\n        if (!success) revert ERC6492DeployFailed(err);\n      }\n    } else {\n      sigToValidate = _signature;\n    }\n\n    // Try ERC-1271 verification\n    if (isCounterfactual || contractCodeLen > 0) {\n      try IERC1271Wallet(_signer).isValidSignature(_hash, sigToValidate) returns (bytes4 magicValue) {\n        bool isValid = magicValue == ERC1271_SUCCESS;\n\n        // EXPERIMENTAL: This is not part of the EIP-6492 spec *yet*\n        // but it may be useful to retry the call making the factory call\n        // even if the wallet is already deployed, in case the wallet\n        // needs to perform some sort of migration or onchain key rotation\n        if (!isValid && !deployAlreadyDeployed && contractCodeLen > 0) {\n          return isValidSigImpl(_signer, _hash, _signature, allowSideEffects, true);\n        }\n\n        if (contractCodeLen == 0 && isCounterfactual && !allowSideEffects) {\n          // if the call had side effects we need to return the\n          // result using a `revert` (to undo the state changes)\n          assembly {\n            mstore(0, isValid)\n            revert(31, 1)\n          }\n        }\n\n        return isValid;\n      } catch (bytes memory err) {\n        // EXPERIMENTAL: This is not part of the EIP-6492 spec *yet*\n        // but it may be useful to retry the call making the factory call\n        // even if the wallet is already deployed, in case the wallet\n        // needs to perform some sort of migration or onchain key rotation\n        if (!deployAlreadyDeployed && contractCodeLen > 0) {\n          return isValidSigImpl(_signer, _hash, _signature, allowSideEffects, true);\n        }\n\n        revert ERC1271Revert(err);\n      }\n    }\n\n    // ecrecover verification\n    require(_signature.length == 65, 'SignatureValidator#recoverSigner: invalid signature length');\n    bytes32 r = bytes32(_signature[0:32]);\n    bytes32 s = bytes32(_signature[32:64]);\n    uint8 v = uint8(_signature[64]);\n\n    if (v != 27 && v != 28) {\n      revert('SignatureValidator: invalid signature v value');\n    }\n\n    return ecrecover(_hash, v, r, s) == _signer;\n  }\n\n  function isValidSigWithSideEffects(\n    address _signer,\n    bytes32 _hash,\n    bytes calldata _signature\n  ) external returns (bool) {\n    return this.isValidSigImpl(_signer, _hash, _signature, true, false);\n  }\n\n  function isValidSig(\n    address _signer,\n    bytes32 _hash,\n    bytes calldata _signature\n  ) external returns (bool) {\n    try this.isValidSigImpl(_signer, _hash, _signature, false, false) returns (bool isValid) {\n      return isValid;\n    } catch (bytes memory error) {\n      // in order to avoid side effects from the contract getting deployed, the entire call will revert with a single byte result\n      uint len = error.length;\n      if (len == 1) {\n        return error[0] == 0x01;\n        // all other errors are simply forwarded, but in custom formats so that nothing else can revert with a single byte in the call\n      } else {\n        assembly { revert(error, len) }\n      }\n    }\n  }\n\n  // NOTICE: These functions aren't part of the standard\n  // they are helpers that behave like the above functions\n  // but they don't revert on failure, instead they return false\n\n  function isValidSigNoThrow(\n    address _signer,\n    bytes32 _hash,\n    bytes calldata _signature\n  ) external returns (bool) {\n    try this.isValidSigImpl(_signer, _hash, _signature, false, false) returns (bool isValid) {\n      return isValid;\n    } catch (bytes memory error) {\n      // in order to avoid side effects from the contract getting deployed, the entire call will revert with a single byte result\n      uint len = error.length;\n      if (len == 1) {\n        return error[0] == 0x01;\n        // all other errors are simply forwarded, but in custom formats so that nothing else can revert with a single byte in the call\n      } else {\n        // Ignore all other errors and return false\n        return false;\n      }\n    }\n  }\n\n  function isValidSigWithSideEffectsNoThrow(\n    address _signer,\n    bytes32 _hash,\n    bytes calldata _signature\n  ) external returns (bool) {\n    try this.isValidSigImpl(_signer, _hash, _signature, true, false) returns (bool isValid) {\n      return isValid;\n    } catch (bytes memory error) {\n      // Ignore all errors and return false\n      return false;\n    }\n  }\n}\n\n// this is a helper so we can perform validation in a single eth_call without pre-deploying a singleton\ncontract ValidateSigOffchain {\n  constructor (address _signer, bytes32 _hash, bytes memory _signature) {\n    UniversalSigValidator validator = new UniversalSigValidator();\n    bool isValidSig = validator.isValidSigWithSideEffects(_signer, _hash, _signature);\n    assembly {\n      mstore(0, isValidSig)\n      return(31, 1)\n    }\n  }\n}\n*/\n\nconst EIP_6492_OFFCHAIN_DEPLOY_CODE = '0x608060405234801561001057600080fd5b5060405161124a38038061124a83398101604081905261002f91610124565b600060405161003d906100dd565b604051809103906000f080158015610059573d6000803e3d6000fd5b5090506000816001600160a01b0316638f0684308686866040518463ffffffff1660e01b815260040161008e939291906101fb565b6020604051808303816000875af11580156100ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d19190610244565b9050806000526001601ff35b610fdc8061026e83390190565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561011b578181015183820152602001610103565b50506000910152565b60008060006060848603121561013957600080fd5b83516001600160a01b038116811461015057600080fd5b6020850151604086015191945092506001600160401b038082111561017457600080fd5b818601915086601f83011261018857600080fd5b81518181111561019a5761019a6100ea565b604051601f8201601f19908116603f011681019083821181831017156101c2576101c26100ea565b816040528281528960208487010111156101db57600080fd5b6101ec836020830160208801610100565b80955050505050509250925092565b60018060a01b0384168152826020820152606060408201526000825180606084015261022e816080850160208701610100565b601f01601f191691909101608001949350505050565b60006020828403121561025657600080fd5b8151801515811461026657600080fd5b939250505056fe608060405234801561001057600080fd5b50610fbc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806376be4cea1161005057806376be4cea146100a65780638f068430146100b957806398ef1ed8146100cc57600080fd5b80631c6453271461006c5780633d787b6314610093575b600080fd5b61007f61007a366004610ad4565b6100df565b604051901515815260200160405180910390f35b61007f6100a1366004610ad4565b61023d565b61007f6100b4366004610b3e565b61031e565b61007f6100c7366004610ad4565b6108e1565b61007f6100da366004610ad4565b61096e565b6040517f76be4cea00000000000000000000000000000000000000000000000000000000815260009030906376be4cea9061012890889088908890889088908190600401610bc3565b6020604051808303816000875af1925050508015610181575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261017e91810190610c45565b60015b610232573d8080156101af576040519150601f19603f3d011682016040523d82523d6000602084013e6101b4565b606091505b508051600181900361022757816000815181106101d3576101d3610c69565b6020910101517fff00000000000000000000000000000000000000000000000000000000000000167f0100000000000000000000000000000000000000000000000000000000000000149250610235915050565b600092505050610235565b90505b949350505050565b6040517f76be4cea00000000000000000000000000000000000000000000000000000000815260009030906376be4cea906102879088908890889088906001908990600401610bc3565b6020604051808303816000875af19250505080156102e0575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526102dd91810190610c45565b60015b610232573d80801561030e576040519150601f19603f3d011682016040523d82523d6000602084013e610313565b606091505b506000915050610235565b600073ffffffffffffffffffffffffffffffffffffffff87163b6060827f64926492649264926492649264926492649264926492649264926492649264928888610369602082610c98565b610375928b9290610cd8565b61037e91610d02565b1490508015610484576000606089828a610399602082610c98565b926103a693929190610cd8565b8101906103b39190610e18565b955090925090508415806103c45750865b1561047d576000808373ffffffffffffffffffffffffffffffffffffffff16836040516103f19190610eb2565b6000604051808303816000865af19150503d806000811461042e576040519150601f19603f3d011682016040523d82523d6000602084013e610433565b606091505b50915091508161047a57806040517f9d0d6e2d0000000000000000000000000000000000000000000000000000000081526004016104719190610f18565b60405180910390fd5b50505b50506104be565b87878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509294505050505b80806104ca5750600083115b156106bb576040517f1626ba7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b1690631626ba7e90610523908c908690600401610f2b565b602060405180830381865afa92505050801561057a575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261057791810190610f44565b60015b61060f573d8080156105a8576040519150601f19603f3d011682016040523d82523d6000602084013e6105ad565b606091505b50851580156105bc5750600084115b156105db576105d08b8b8b8b8b600161031e565b9450505050506108d7565b806040517f6f2a95990000000000000000000000000000000000000000000000000000000081526004016104719190610f18565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f1626ba7e000000000000000000000000000000000000000000000000000000001480158161065f575086155b801561066b5750600085115b1561068b5761067f8c8c8c8c8c600161031e565b955050505050506108d7565b841580156106965750825b80156106a0575087155b156106af57806000526001601ffd5b94506108d79350505050565b6041871461074b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f5369676e617475726556616c696461746f72237265636f7665725369676e657260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610471565b600061075a6020828a8c610cd8565b61076391610d02565b90506000610775604060208b8d610cd8565b61077e91610d02565b905060008a8a604081811061079557610795610c69565b919091013560f81c915050601b81148015906107b557508060ff16601c14155b15610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f5369676e617475726556616c696461746f723a20696e76616c6964207369676e60448201527f617475726520762076616c7565000000000000000000000000000000000000006064820152608401610471565b6040805160008152602081018083528e905260ff831691810191909152606081018490526080810183905273ffffffffffffffffffffffffffffffffffffffff8e169060019060a0016020604051602081039080840390855afa1580156108ad573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff161496505050505050505b9695505050505050565b6040517f76be4cea00000000000000000000000000000000000000000000000000000000815260009030906376be4cea9061092b9088908890889088906001908990600401610bc3565b6020604051808303816000875af115801561094a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190610c45565b6040517f76be4cea00000000000000000000000000000000000000000000000000000000815260009030906376be4cea906109b790889088908890889088908190600401610bc3565b6020604051808303816000875af1925050508015610a10575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610a0d91810190610c45565b60015b610232573d808015610a3e576040519150601f19603f3d011682016040523d82523d6000602084013e610a43565b606091505b5080516001819003610a6257816000815181106101d3576101d3610c69565b8082fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610a8857600080fd5b50565b60008083601f840112610a9d57600080fd5b50813567ffffffffffffffff811115610ab557600080fd5b602083019150836020828501011115610acd57600080fd5b9250929050565b60008060008060608587031215610aea57600080fd5b8435610af581610a66565b935060208501359250604085013567ffffffffffffffff811115610b1857600080fd5b610b2487828801610a8b565b95989497509550505050565b8015158114610a8857600080fd5b60008060008060008060a08789031215610b5757600080fd5b8635610b6281610a66565b955060208701359450604087013567ffffffffffffffff811115610b8557600080fd5b610b9189828a01610a8b565b9095509350506060870135610ba581610b30565b91506080870135610bb581610b30565b809150509295509295509295565b73ffffffffffffffffffffffffffffffffffffffff8716815285602082015260a060408201528360a0820152838560c0830137600060c085830181019190915292151560608201529015156080820152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909101019392505050565b600060208284031215610c5757600080fd5b8151610c6281610b30565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115610cd2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b60008085851115610ce857600080fd5b83861115610cf557600080fd5b5050820193919092039150565b80356020831015610cd2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112610d7e57600080fd5b813567ffffffffffffffff80821115610d9957610d99610d3e565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610ddf57610ddf610d3e565b81604052838152866020858801011115610df857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215610e2d57600080fd5b8335610e3881610a66565b9250602084013567ffffffffffffffff80821115610e5557600080fd5b610e6187838801610d6d565b93506040860135915080821115610e7757600080fd5b50610e8486828701610d6d565b9150509250925092565b60005b83811015610ea9578181015183820152602001610e91565b50506000910152565b60008251610ec4818460208701610e8e565b9190910192915050565b60008151808452610ee6816020860160208601610e8e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610c626020830184610ece565b8281526040602082015260006102356040830184610ece565b600060208284031215610f5657600080fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114610c6257600080fdfea26469706673582212201a72aed4b15ffb05b6502997a9bb655992e06590bd26b336dfbb153d7ff6f34b64736f6c63430008120033';\nconst EIP_6492_SUFFIX = '0x6492649264926492649264926492649264926492649264926492649264926492';\n\n// TODO: This is a length payload, we can lower the load by deploying\n// the contract on some of the popular chains, and calling the contract\n// if the provider is one of those chains\nasync function validateEIP6492Offchain(provider, signer, hash, signature) {\n  try {\n    const result = await provider.call({\n      data: ethers__WEBPACK_IMPORTED_MODULE_4__.concat([EIP_6492_OFFCHAIN_DEPLOY_CODE, ethers__WEBPACK_IMPORTED_MODULE_9__.AbiCoder.defaultAbiCoder().encode(['address', 'bytes32', 'bytes'], [signer, hash, signature])])\n    });\n    return result === '0x01';\n  } catch (err) {\n    return false;\n  }\n}\n\nvar validateEIP6492 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  EIP_6492_OFFCHAIN_DEPLOY_CODE: EIP_6492_OFFCHAIN_DEPLOY_CODE,\n  EIP_6492_SUFFIX: EIP_6492_SUFFIX,\n  validateEIP6492Offchain: validateEIP6492Offchain\n});\n\n/**\n * Provides stateful information about the wallet.\n */\n\n/**\n * The OnChainReader class fetches on-chain data from a wallet.\n * It is used to understand the \"real\" state of the wallet contract on-chain.\n */\nclass OnChainReader {\n  constructor(provider) {\n    this.provider = provider;\n    // Simple cache to avoid re-fetching the same data\n    this.isDeployedCache = new Set();\n  }\n  module(address) {\n    return new ethers__WEBPACK_IMPORTED_MODULE_3__.Contract(address, [..._0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__.walletContracts.mainModuleUpgradable.abi, ..._0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__.walletContracts.mainModule.abi, ..._0xsequence_abi__WEBPACK_IMPORTED_MODULE_0__.walletContracts.erc1271.abi], this.provider);\n  }\n  async isDeployed(wallet) {\n    // This is safe to cache because the wallet cannot be undeployed once deployed\n    if (this.isDeployedCache.has(wallet)) {\n      return true;\n    }\n    const code = await this.provider.getCode(wallet).then(c => ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(c));\n    const isDeployed = code.length !== 0;\n    if (isDeployed) {\n      this.isDeployedCache.add(wallet);\n    }\n    return isDeployed;\n  }\n  async implementation(wallet) {\n    const position = ethers__WEBPACK_IMPORTED_MODULE_9__.AbiCoder.defaultAbiCoder().encode(['address'], [wallet]);\n    const val = await this.provider.getStorage(wallet, position).then(c => ethers__WEBPACK_IMPORTED_MODULE_4__.getBytes(c));\n    if (val.length === 20) {\n      return ethers__WEBPACK_IMPORTED_MODULE_7__.getAddress(ethers__WEBPACK_IMPORTED_MODULE_4__.hexlify(val));\n    }\n    if (val.length === 32) {\n      return ethers__WEBPACK_IMPORTED_MODULE_9__.AbiCoder.defaultAbiCoder().decode(['address'], val)[0];\n    }\n    return undefined;\n  }\n  async imageHash(wallet) {\n    try {\n      const imageHash = await this.module(wallet).imageHash();\n      return imageHash;\n    } catch (_unused) {}\n    return undefined;\n  }\n  async nonce(wallet, space = 0) {\n    try {\n      const nonce = await this.module(wallet).readNonce(space);\n      return nonce;\n    } catch (e) {\n      if (!(await this.isDeployed(wallet))) {\n        return 0;\n      }\n      throw e;\n    }\n  }\n\n  // We use the EIP-6492 validator contract to check the signature\n  // this means that if the wallet is not deployed, then the signature\n  // must be prefixed with a transaction that deploys the wallet\n  async isValidSignature(wallet, digest, signature) {\n    return validateEIP6492Offchain(this.provider, wallet, digest, signature);\n  }\n}\n\nvar reader = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  OnChainReader: OnChainReader\n});\n\n/**\n * Request metadata, used by the wallet to pass additional information through the orchestrator.\n */\n\nfunction isWalletSignRequestMetadata(obj) {\n  return obj && obj.address && obj.digest && obj.chainId !== undefined && obj.config;\n}\n\n/**\n * Request metadata, used by the wallet to pass additional information through the orchestrator.\n */\n\nvar index$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  config: config,\n  signature: signature$2,\n  context: context,\n  signer: signer,\n  EIP1271: validateEIP1271,\n  transaction: transaction,\n  reader: reader,\n  EIP6492: validateEIP6492,\n  isWalletSignRequestMetadata: isWalletSignRequestMetadata\n});\n\nconst ALL_CODERS = [{\n  config: ConfigCoder$1,\n  signature: SignatureCoder$1\n}, {\n  config: ConfigCoder,\n  signature: SignatureCoder\n}];\nfunction coderFor(version) {\n  const index = version - 1;\n  if (index < 0 || index >= ALL_CODERS.length) {\n    throw new Error(`No coder for version: ${version}`);\n  }\n  return ALL_CODERS[index];\n}\n\n/**\n *  Same as `coderFor` but returns `generic` coders without versioned types.\n */\nfunction genericCoderFor(version) {\n  return coderFor(version);\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ALL_CODERS: ALL_CODERS,\n  coderFor: coderFor,\n  genericCoderFor: genericCoderFor\n});\n\nconst VERSION = '2.2.13';\n\nconst allVersions = [v1, v2];\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../node_modules/.pnpm/@0xsequence+core@2.2.13_ethers@6.13.5_bufferutil@4.0.8_utf-8-validate@5.0.10_/node_modules/@0xsequence/core/dist/0xsequence-core.esm.js\n");

/***/ })

};
;