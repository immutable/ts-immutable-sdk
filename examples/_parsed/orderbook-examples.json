{
  "create-bid-with-nextjs": {
    "tutorial": "# Create a Bid with Next.js\n\n## Introduction\nThis tutorial demonstrates how to create bids for NFTs using the Immutable Orderbook SDK in a Next.js application. It covers how to create bids for both ERC721 and ERC1155 tokens, integrating Passport for wallet connection and handling the bid creation process.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/create-bid-with-nextjs)\n\n## Features Overview\n- Creating bids for ERC721 tokens\n- Creating bids for ERC1155 tokens\n- Setting custom marketplace fees for bids\n\n## SDK Integration Details\n\n### **Creating a Bid for ERC721 Tokens**: [Prepares, signs, and creates a bid for an ERC721 token](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/create-bid-with-nextjs/src/app/create-bid-with-erc721/page.tsx)\n#### Implementation\nThe application provides a form where users can enter the required details for creating a bid for an ERC721 token:\n\n```typescript\n// Prepare an ERC721 bid\nconst prepareERC721Bid = async (): Promise<orderbook.PrepareBidResponse> => {\n  const sellItem: ERC20Item = {\n    type: 'ERC20',\n    contractAddress: sellItemContractAddress,\n    amount: sellItemAmount,\n  };\n\n  const buyItem: ERC721Item = {\n    type: 'ERC721',\n    contractAddress: buyItemContractAddress,\n    tokenId: buyItemTokenID,\n  };\n\n  const prepareBidParams: PrepareBidParams = {\n    sellItem,\n    buyItem,\n    maker: accountsState[0],\n  };\n\n  return orderbookSDK.prepareBid(prepareBidParams);\n};\n\n// Create an ERC721 bid\nconst createER721Bid = async () => {\n  try {\n    setLoadingState(true);\n    setLoadingText(\"Preparing ERC721 bid\");\n    const preparedBid = await prepareERC721Bid();\n    \n    setLoadingText(\"Approving token\");\n    await signAndSubmitApproval(browserProvider!, preparedBid);\n    \n    setLoadingText(\"Signing bid\");\n    const orderSignature = await signBid(browserProvider!, preparedBid);\n    \n    setLoadingText(\"Creating bid\");\n    const bidID = await createBid(\n      orderbookSDK,\n      preparedBid,\n      orderSignature,\n      makerEcosystemFeeRecipient && makerEcosystemFeeAmount ? {\n        recipientAddress: makerEcosystemFeeRecipient,\n        amount: makerEcosystemFeeAmount,\n      } : undefined\n    );\n    \n    handleSuccessfulBidCreation(bidID);\n    setLoadingState(false);\n  } catch (error) {\n    // Error handling\n  }\n};\n```\n\n#### Explanation\nThe code works by:\n1. Preparing the bid by defining the sell item (ERC20 token used for payment) and buy item (ERC721 token the user wants to purchase)\n2. Approving the ERC20 token for trading by calling the `signAndSubmitApproval` function\n3. Signing the bid using the `signBid` function, which creates a signature for the order\n4. Creating the bid by submitting the order components, order hash, and signature to the Orderbook API\n5. Optionally adding marketplace fees for the maker\n\n### **Creating a Bid for ERC1155 Tokens**: [Prepares, signs, and creates a bid for an ERC1155 token](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/create-bid-with-erc1155/page.tsx)\n#### Implementation\nThe application provides a form where users can enter the required details for creating a bid for an ERC1155 token, including the quantity:\n\n```typescript\n// Prepare an ERC1155 bid\nconst prepareERC1155Bid = async (): Promise<orderbook.PrepareBidResponse> => {\n  const sellItem: ERC20Item = {\n    type: 'ERC20',\n    contractAddress: sellItemContractAddress,\n    amount: sellItemAmount,\n  };\n\n  const buyItem: ERC1155Item = {\n    type: 'ERC1155',\n    contractAddress: buyItemContractAddress,\n    tokenId: buyItemTokenID,\n    amount: buyItemQty,\n  };\n\n  const prepareBidParams: PrepareBidParams = {\n    sellItem,\n    buyItem,\n    maker: accountsState[0],\n  };\n\n  return orderbookSDK.prepareBid(prepareBidParams);\n};\n```\n\n#### Explanation\nThe process for creating an ERC1155 bid is similar to creating an ERC721 bid, with the main difference being that an ERC1155 bid includes an additional `amount` parameter, which specifies the quantity of tokens to bid for. This is because ERC1155 tokens are semi-fungible and can have multiple copies of the same token ID.\n\n### **Signing and Submitting Approvals**: [Handles token approvals for trading](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/create-bid-with-nextjs/src/app/utils/bid.ts)\n#### Implementation\n```typescript\nexport const signAndSubmitApproval = async (\n  provider: BrowserProvider,\n  bid: orderbook.PrepareBidResponse,\n): Promise<void> => {\n  // get your user's Web3 wallet, e.g. MetaMask, Passport, etc\n  const signer = await provider.getSigner();\n\n  // If the user hasn't yet approved the Immutable Seaport contract to transfer assets from this\n  // collection on their behalf they'll need to do so before they create an order\n  const approvalActions = bid.actions.filter(\n    (action): action is orderbook.TransactionAction =>\n      action.type === orderbook.ActionType.TRANSACTION,\n  );\n\n  for (const approvalAction of approvalActions) {\n    const unsignedTx = await approvalAction.buildTransaction();\n    const receipt = await signer.sendTransaction(unsignedTx);\n    await receipt.wait();\n  }\n\n  return;\n};\n```\n\n#### Explanation\nBefore creating a bid, the user must approve the Immutable Seaport contract to transfer tokens on their behalf. This function:\n1. Gets the user's Web3 wallet\n2. Filters for transaction actions in the prepared bid response\n3. Builds and sends the approval transaction for each action\n4. Waits for the transaction receipt, confirming that the approval was successful\n\n### **Signing Bids**: [Creates cryptographic signatures for order data](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/create-bid-with-nextjs/src/app/utils/bid.ts)\n#### Implementation\n```typescript\nexport const signBid = async (\n  provider: BrowserProvider,\n  bid: orderbook.PrepareBidResponse,\n): Promise<string> => {\n  // get your user's Web3 wallet, e.g. MetaMask, Passport, etc\n  const signer = await provider.getSigner();\n\n  // For an order to be created (and subsequently filled), Immutable needs a valid signature for the order data.\n  // This signature is stored off-chain and is later provided to any user wishing to fulfil the open order.\n  // The signature only allows the order to be fulfilled if it meets the conditions specified by the user that created the bid.\n  const signableAction = bid.actions.find(\n    (action): action is orderbook.SignableAction =>\n      action.type === orderbook.ActionType.SIGNABLE,\n  )!;\n\n  const signature = await signer.signTypedData(\n    signableAction.message.domain,\n    signableAction.message.types,\n    signableAction.message.value,\n  );\n\n  return signature;\n};\n```\n\n#### Explanation\nFor an order to be created and subsequently filled, Immutable needs a valid signature for the order data. This function:\n1. Gets the user's Web3 wallet\n2. Finds the signable action in the prepared bid response\n3. Signs the typed data using EIP-712 standard\n4. Returns the signature, which will be used when creating the bid\n\n### **Creating Bids**: [Submits the bid to the Orderbook API](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/create-bid-with-nextjs/src/app/utils/bid.ts)\n#### Implementation\n```typescript\nexport const createBid = async (\n  client: orderbook.Orderbook,\n  preparedBid: orderbook.PrepareBidResponse,\n  orderSignature: string,\n  makerEcosystemFee?: {\n    recipientAddress: string;\n    amount: string;\n  },\n): Promise<string> => {\n  const order = await client.createBid({\n    orderComponents: preparedBid.orderComponents,\n    orderHash: preparedBid.orderHash,\n    orderSignature,\n    // Optional maker marketplace fee\n    makerFees: makerEcosystemFee ? [\n      {\n        recipientAddress: makerEcosystemFee.recipientAddress,\n        amount: makerEcosystemFee.amount,\n      },\n    ] : [],\n  });\n  return order.result.id;\n};\n```\n\n#### Explanation\nThis function creates a bid by submitting the prepared bid, signature, and optional marketplace fees to the Orderbook API. It:\n1. Takes the Orderbook client, prepared bid, order signature, and optional maker ecosystem fee\n2. Calls the `createBid` method on the Orderbook client with the order components, order hash, and signature\n3. Includes optional maker marketplace fees if specified\n4. Returns the created bid's ID\n\n## Running the App\n\n### Prerequisites\n- Node.js\n- A valid client ID and publishable API key from [Immutable Hub](https://hub.immutable.com)\n\n### Steps\n1. Install the dependencies:\n   ```bash\n   pnpm i\n   ```\n\n2. Copy the `.env.example` file to `.env`:\n   ```bash\n   cp .env.example .env\n   ```\n\n3. Replace the `NEXT_PUBLIC_PUBLISHABLE_KEY` and `NEXT_PUBLIC_CLIENT_ID` in the `.env` file with your own values from the Immutable Hub.\n\n4. Run the development server:\n   ```bash\n   pnpm dev\n   ```\n\n5. Open [http://localhost:3000](http://localhost:3000) in your browser to access the application.\n\n### Creating an ERC721 Bid\n1. Click on the \"Create ERC721 Bid\" button\n2. Connect your Passport wallet\n3. Enter the following details:\n   - NFT Contract Address: The contract address of the ERC721 token\n   - NFT Token ID: The Token ID of the ERC721 token\n   - ERC20 Currency Contract Address: The contract address of ERC20 you'd like to use to make payment for the item\n   - Currency Amount: The amount of currency you'd like to use\n   - (Optional) Maker Ecosystem Fee Recipient: Address to receive the marketplace fee\n   - (Optional) Maker Ecosystem Fee Amount: Amount of the marketplace fee\n4. Click on the \"Create Bid\" button\n5. Approve the ERC20 token balance for trading\n6. Sign the bid\n7. If successful, the bid will be created, and the order ID will be displayed\n\n### Creating an ERC1155 Bid\n1. Click on the \"Create ERC1155 Bid\" button\n2. Connect your Passport wallet\n3. Enter the following details:\n   - NFT Contract Address: The contract address of the ERC1155 token\n   - NFT Token ID: The Token ID of the ERC1155 token\n   - NFT Token Quantity: The amount of ERC1155 tokens you'd like to bid for\n   - ERC20 Currency Contract Address: The contract address of ERC20 you'd like to use to make payment for the item\n   - Currency Amount: The amount of currency you'd like to use\n   - (Optional) Maker Ecosystem Fee Recipient: Address to receive the marketplace fee\n   - (Optional) Maker Ecosystem Fee Amount: Amount of the marketplace fee\n4. Click on the \"Create Bid\" button\n5. Approve the ERC20 token balance for trading\n6. Sign the bid\n7. If successful, the bid will be created, and the order ID will be displayed\n\n## Summary\nThis example demonstrates how to create bids for both ERC721 and ERC1155 tokens using the Immutable Orderbook SDK in a Next.js application. It covers the full process from preparing the bid, approving the tokens, signing the order, and creating the bid. The application also shows how to include marketplace fees in the bid creation process, providing a complete foundation for building a marketplace on Immutable.\n\nKey takeaways:\n- The Orderbook SDK provides a simple interface for creating bids\n- The bid creation process involves three main steps: preparing the bid, approving tokens, and signing the order\n- You can create bids for both ERC721 and ERC1155 tokens with different parameters\n- Marketplace fees can be added to bids to generate revenue for your marketplace ",
    "metadata": {
      "title": "Create Bid with Next.js",
      "description": "Example application demonstrating how to create bids for ERC721 and ERC1155 tokens using the Immutable Orderbook SDK in a Next.js application",
      "keywords": [
        "Immutable",
        "SDK",
        "Orderbook",
        "Bid",
        "ERC721",
        "ERC1155",
        "Next.js",
        "Passport"
      ],
      "tech_stack": [
        "Next.js",
        "TypeScript",
        "Biom3",
        "ethers.js"
      ],
      "product": "Orderbook",
      "programming_language": "TypeScript"
    }
  },
  "create-collection-bid-with-nextjs": {
    "tutorial": "# Create Collection Bid with Next.js\n\n## Introduction\nThis example app demonstrates how to create collection bids using the Immutable Orderbook SDK in a Next.js application. Collection bids allow users to make offers on an entire NFT collection rather than specific tokens, enabling collectors to easily acquire NFTs from a desired collection. This example shows how to create collection bids for both ERC721 and ERC1155 token types.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/create-collection-bid-with-nextjs)\n\n## Features Overview\n- Creating ERC721 collection bids\n- Creating ERC1155 collection bids\n- Handling token approvals\n- Signing Orderbook actions\n- Managing maker marketplace fees\n\n## SDK Integration Details\n\n### Creating Collection Bids\nThe application demonstrates the complete workflow for creating collection bids using the Orderbook SDK:\n\n#### **Preparing Collection Bids**: [Implementation in page.tsx](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/create-collection-bid-with-nextjs/src/app/create-collection-bid-with-erc721/page.tsx)\n```typescript\nconst prepareERC721CollectionBid = async (): Promise<orderbook.PrepareCollectionBidResponse> => {\n  const buyItem: ERC20Item = {\n    type: \"ERC20\",\n    contractAddress: buyItemContractAddress,\n    amount: buyItemTokenAmount,\n  };\n\n  const sellItem: ERC721CollectionItem = {\n    type: \"ERC721_COLLECTION\",\n    contractAddress: sellItemContractAddress,\n    amount: sellItemAmount,\n  };\n\n  // Prepare the collection bid parameters\n  const params: PrepareCollectionBidParams = {\n    sellItem,\n    buyItem,\n  };\n\n  return await orderbookSDK.prepareBid(params);\n};\n```\n\nThe code prepares a collection bid by specifying the buy item (ERC20 token) and sell item (ERC721 collection). It then calls the Orderbook SDK's `prepareBid` method with these parameters.\n\n#### **Approving Token Transfers**: [Implementation in collectionBid.ts](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/create-collection-bid-with-nextjs/src/app/utils/collectionBid.ts)\n```typescript\nexport const signAndSubmitApproval = async (\n  provider: BrowserProvider,\n  collectionBid: orderbook.PrepareBidResponse,\n): Promise<void> => {\n  const signer = await provider.getSigner();\n\n  // Filter for approval transaction actions\n  const approvalActions = collectionBid.actions.filter(\n    (action): action is orderbook.TransactionAction =>\n      action.type === orderbook.ActionType.TRANSACTION,\n  );\n\n  for (const approvalAction of approvalActions) {\n    const unsignedTx = await approvalAction.buildTransaction();\n    const receipt = await signer.sendTransaction(unsignedTx);\n    await receipt.wait();\n  }\n\n  return;\n};\n```\n\nThis function handles the approval process, which is necessary before creating a collection bid. It processes all transaction actions returned by the `prepareBid` method, allowing the Immutable Seaport contract to transfer tokens on behalf of the user.\n\n#### **Signing Collection Bids**: [Implementation in collectionBid.ts](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/create-collection-bid-with-nextjs/src/app/utils/collectionBid.ts)\n```typescript\nexport const signCollectionBid = async (\n  provider: BrowserProvider,\n  bid: orderbook.PrepareBidResponse,\n): Promise<string> => {\n  const signer = await provider.getSigner();\n\n  // Find the signable action\n  const signableAction = bid.actions.find(\n    (action): action is orderbook.SignableAction =>\n      action.type === orderbook.ActionType.SIGNABLE,\n  )!;\n\n  // Sign the order with EIP-712\n  const signature = await signer.signTypedData(\n    signableAction.message.domain,\n    signableAction.message.types,\n    signableAction.message.value,\n  );\n\n  return signature;\n};\n```\n\nThis function signs the collection bid using EIP-712 typed data signatures. This signature validates the order and allows it to be fulfilled by other users.\n\n#### **Creating Collection Bids**: [Implementation in collectionBid.ts](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/create-collection-bid-with-nextjs/src/app/utils/collectionBid.ts)\n```typescript\nexport const createCollectionBid = async (\n  client: orderbook.Orderbook,\n  preparedBid: orderbook.PrepareBidResponse,\n  orderSignature: string,\n  makerEcosystemFee?: {\n    recipientAddress: string;\n    amount: string;\n  },\n): Promise<string> => {\n  const order = await client.createCollectionBid({\n    orderComponents: preparedBid.orderComponents,\n    orderHash: preparedBid.orderHash,\n    orderSignature,\n    // Optional maker marketplace fee\n    makerFees: makerEcosystemFee ? [\n      {\n        recipientAddress: makerEcosystemFee.recipientAddress,\n        amount: makerEcosystemFee.amount,\n      },\n    ] : [],\n  });\n  return order.result.id;\n};\n```\n\nThis function submits the prepared and signed collection bid to the Orderbook service. It also demonstrates how to include optional maker marketplace fees.\n\n### Integration with Passport for Authentication\nThe example also demonstrates integration with Immutable Passport for authentication and wallet connection:\n\n```typescript\nconst passportLogin = async () => {\n  if (browserProvider?.send) {\n    setLoadingState(true);\n    setLoadingText(\"Connecting to Passport\");\n\n    // Trigger Passport login flow\n    const accounts = await browserProvider.send(\"eth_requestAccounts\", []);\n\n    setAccountsState(accounts);\n    setLoadingState(false);\n  }\n};\n```\n\nThe Passport integration provides a seamless authentication experience for users.\n\n## Running the App\n\n### Prerequisites\n- [Node.js](https://nodejs.org/) (v18 or later)\n- [pnpm](https://pnpm.io/installation)\n- [Immutable Hub Account](https://hub.immutable.com/) for environment setup\n\n### Setup Instructions\n1. Clone the repository\n```bash\ngit clone https://github.com/immutable/ts-immutable-sdk.git\ncd ts-immutable-sdk/examples/orderbook/create-collection-bid-with-nextjs\n```\n\n2. Install dependencies\n```bash\npnpm install\n```\n\n3. Create a `.env` file based on `.env.example` and add your Immutable Hub credentials\n```\nNEXT_PUBLIC_PUBLISHABLE_KEY=<Your publishable key from Immutable Hub>\nNEXT_PUBLIC_CLIENT_ID=<Your client ID from Immutable Hub>\n```\n\n4. Start the development server\n```bash\npnpm dev\n```\n\n5. Open your browser and navigate to [http://localhost:3000](http://localhost:3000)\n\n## Summary\nThis example demonstrates how to implement collection bids using the Immutable Orderbook SDK in a Next.js application. It covers the complete workflow from preparing collection bids to handling approvals, signing orders, and finally submitting the collection bids. The application also showcases integration with Immutable Passport for user authentication and wallet connection.\n\nKey takeaways:\n- Creating collection bids requires preparing the bid parameters, handling approvals, signing the order data, and submitting the bid\n- Collection bids can include optional maker marketplace fees\n- Immutable Passport provides a seamless authentication experience\n- The Orderbook SDK handles the complexity of interacting with the underlying blockchain protocols ",
    "metadata": {
      "title": "Create Collection Bid with Next.js",
      "description": "Example application demonstrating how to create collection bids for ERC721 and ERC1155 assets using the Immutable Orderbook SDK in a Next.js application",
      "keywords": [
        "Immutable",
        "SDK",
        "Orderbook",
        "Collection Bid",
        "NFT",
        "Next.js",
        "ERC721",
        "ERC1155"
      ],
      "tech_stack": [
        "Next.js",
        "TypeScript",
        "Immutable SDK",
        "ethers.js",
        "Biom3"
      ],
      "product": "Orderbook",
      "programming_language": "TypeScript"
    }
  },
  "create-listing-with-nextjs": {
    "tutorial": "# Create Listing with Next.js\n\n## Introduction\nThis example application demonstrates how to create listings using the Immutable SDK with a Next.js application. It showcases creating both ERC721 and ERC1155 token listings using the Orderbook SDK. Users can connect their Immutable Passport wallet, approve tokens for trading, and create listings with various pricing options.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/create-listing-with-nextjs)\n\n## Features Overview\n- Listing creation for ERC721 tokens\n- Listing creation for ERC1155 tokens\n- Token approval for trading\n- Support for Native token and ERC20 token pricing\n- Optional marketplace fees\n\n## SDK Integration Details\n\n### Create Listing for ERC721 Tokens\n[Creating ERC721 listings](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/create-listing-with-nextjs/src/app/create-listing-with-erc721/page.tsx) allows users to sell unique NFTs through the Orderbook.\n\n**Implementation:**\nThe process of creating an ERC721 listing involves several key steps:\n\n1. Preparing the listing:\n```typescript\nconst prepareERC721Listing = async (): Promise<orderbook.PrepareListingResponse> => {\n  // Create the sell item (an ERC721 token)\n  const sellItem: ERC721Item = {\n    type: \"ERC721\", // Type of token being sold\n    tokenAddress: sellItemContractAddress, // Contract address of the token\n    tokenId: sellItemTokenID, // Token ID being listed\n  };\n\n  // Create the buy item (what the seller will receive)\n  let buyItem: NativeItem | ERC20Item;\n  if (buyItemType === \"Native\") {\n    buyItem = {\n      type: \"NATIVE\", // Native token (e.g., ETH, IMX)\n      amount: buyItemAmount, // Listing price in wei\n    };\n  } else {\n    buyItem = {\n      type: \"ERC20\", // ERC20 token\n      tokenAddress: buyItemContractAddress, // Contract address of the ERC20 token\n      amount: buyItemAmount, // Listing price in token amount\n    };\n  }\n\n  // Prepare the listing with Orderbook SDK\n  const listingParams: PrepareListingParams = {\n    makerAddress: accountsState[0], // Seller's wallet address\n    sellItem: sellItem,\n    buyItem: buyItem,\n    fees: [], // No fees in this example, but fees could be added here\n  };\n\n  return orderbookSDK.prepareListing(listingParams);\n};\n```\n\n2. Approving tokens for trading:\n```typescript\n// Approve tokens for trading\nawait signAndSubmitApproval(browserProvider!, preparedListing);\n```\n\n3. Signing the listing order:\n```typescript\n// Sign the listing order\nconst orderSignature = await signListing(browserProvider!, preparedListing);\n```\n\n4. Creating the listing:\n```typescript\n// Create the listing with optional marketplace fees\nconst listingID = await createListing(\n  orderbookSDK, \n  preparedListing, \n  orderSignature,\n  makerEcosystemFeeRecipient && makerEcosystemFeeAmount\n    ? {\n        recipientAddress: makerEcosystemFeeRecipient,\n        amount: makerEcosystemFeeAmount,\n      }\n    : undefined\n);\n```\n\n**Explanation:**\nThe code handles the complete flow for creating an ERC721 listing:\n- Connects to the user's Passport wallet\n- Collects details about the token being sold and the payment being requested\n- Prepares the listing using the Orderbook SDK\n- Handles token approvals (if needed)\n- Signs the listing order with the user's wallet\n- Creates the listing on the Immutable Orderbook\n- Optionally includes marketplace fees for the listing\n\n### Create Listing for ERC1155 Tokens\n[Creating ERC1155 listings](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/create-listing-with-nextjs/src/app/create-listing-with-erc1155/page.tsx) allows users to sell multiple copies of semi-fungible tokens.\n\n**Implementation:**\nThe main differences in the ERC1155 implementation involve the sell item configuration:\n\n```typescript\nconst sellItem: ERC1155Item = {\n  type: \"ERC1155\", // Type of token being sold\n  tokenAddress: sellItemContractAddress, // Contract address of the token\n  tokenId: sellItemTokenID, // Token ID being listed\n  amount: sellItemAmount, // Number of tokens to sell from this token ID\n};\n```\n\nThe rest of the flow remains similar to the ERC721 process.\n\n### Utility Functions for Orderbook Integration\nThe application provides [utility functions](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/create-listing-with-nextjs/src/app/utils/listing.ts) that handle core Orderbook SDK interactions:\n\n1. **Token Approval:**\n```typescript\nexport const signAndSubmitApproval = async (\n  provider: BrowserProvider,\n  listing: orderbook.PrepareListingResponse,\n): Promise<void> => {\n  const signer = await provider.getSigner();\n  \n  // Filter approval actions from the prepared listing\n  const approvalActions = listing.actions.filter(\n    (action): action is orderbook.TransactionAction =>\n      action.type === orderbook.ActionType.TRANSACTION,\n  );\n\n  // Execute each approval transaction\n  for (const approvalAction of approvalActions) {\n    const unsignedTx = await approvalAction.buildTransaction();\n    const receipt = await signer.sendTransaction(unsignedTx);\n    await receipt.wait();\n  }\n};\n```\n\n2. **Order Signing:**\n```typescript\nexport const signListing = async (\n  provider: BrowserProvider,\n  listing: orderbook.PrepareListingResponse,\n): Promise<string> => {\n  const signer = await provider.getSigner();\n  \n  // Find the signable action in the prepared listing\n  const signableAction = listing.actions.find(\n    (action): action is orderbook.SignableAction =>\n      action.type === orderbook.ActionType.SIGNABLE,\n  )!;\n\n  // Sign the order using EIP-712 typed data signing\n  const signature = await signer.signTypedData(\n    signableAction.message.domain,\n    signableAction.message.types,\n    signableAction.message.value,\n  );\n\n  return signature;\n};\n```\n\n3. **Listing Creation:**\n```typescript\nexport const createListing = async (\n  client: orderbook.Orderbook,\n  preparedListing: orderbook.PrepareListingResponse,\n  orderSignature: string,\n  makerEcosystemFee?: {\n    recipientAddress: string;\n    amount: string;\n  },\n): Promise<string> => {\n  // Submit the listing to the Orderbook with all required data\n  const order = await client.createListing({\n    orderComponents: preparedListing.orderComponents,\n    orderHash: preparedListing.orderHash,\n    orderSignature,\n    // Optional maker marketplace fee\n    makerFees: makerEcosystemFee ? [\n      {\n        recipientAddress: makerEcosystemFee.recipientAddress,\n        amount: makerEcosystemFee.amount,\n      },\n    ] : [],\n  });\n  return order.result.id;\n};\n```\n\n## Running the App\n\n### Prerequisites\n- Node.js v16 or later\n- A valid Immutable Hub account with client ID and publishable API key ([Get Started with Immutable Hub](https://hub.immutable.com/))\n- An Immutable Passport wallet with tokens to list\n\n### Setup and Running\n1. Install the dependencies:\n   ```bash\n   pnpm i\n   ```\n\n2. Copy the environment example file:\n   ```bash\n   cp .env.example .env\n   ```\n\n3. Update the `.env` file with your Immutable Hub credentials:\n   ```\n   NEXT_PUBLIC_PUBLISHABLE_KEY=your_publishable_key\n   NEXT_PUBLIC_CLIENT_ID=your_client_id\n   ```\n\n4. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n\n5. Open [http://localhost:3000](http://localhost:3000) in your browser to access the application.\n\n### Creating a Listing\n1. Choose either \"Create ERC721 Listing\" or \"Create ERC1155 Listing\" depending on your token type.\n2. Connect your Passport wallet when prompted.\n3. Fill in the required fields:\n   - NFT Contract Address: The address of your token contract\n   - NFT Token ID: The ID of the token you want to sell\n   - Amount (for ERC1155 only): How many tokens to sell\n   - Currency Type: Choose Native (ETH/IMX) or ERC20\n   - Currency Contract Address (for ERC20 only): The address of the payment token\n   - Currency Amount: The price you want to sell for\n   - Optional marketplace fees: If you want to include fees for a marketplace\n4. Click \"Create Listing\" and follow the prompts to approve your token (if needed) and sign the listing.\n5. Upon success, the listing ID will be displayed, confirming your listing is active on the Orderbook.\n\n## Summary\nThis example demonstrates how to integrate the Immutable Orderbook SDK into a Next.js application to create listings for both ERC721 and ERC1155 tokens. The app showcases the complete flow from connecting a wallet to creating a listing, including token approvals, order signing, and optional marketplace fees. Developers can use this example as a foundation for building their own marketplace applications on Immutable. ",
    "metadata": {
      "title": "Create Listing with Next.js",
      "description": "A Next.js application demonstrating how to create ERC721 and ERC1155 token listings using the Immutable Orderbook SDK",
      "keywords": [
        "Immutable",
        "SDK",
        "Orderbook",
        "Listing",
        "NFT",
        "ERC721",
        "ERC1155",
        "Next.js",
        "Marketplace"
      ],
      "tech_stack": [
        "Next.js",
        "React",
        "TypeScript",
        "Immutable SDK",
        "Biome UI",
        "Ethers.js"
      ],
      "product": "Orderbook",
      "programming_language": "TypeScript"
    }
  },
  "fulfill-bid-with-nextjs": {
    "tutorial": "# Fulfill Bid with Next.js Tutorial\n\n## Introduction\nThis example application demonstrates how to fulfill bids using the Immutable Orderbook SDK in a Next.js environment. It shows how to fulfill both ERC721 and ERC1155 token bids. The app connects to the Immutable Sandbox environment and integrates with Passport for wallet connection and authentication.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/fulfill-bid-with-nextjs)\n\n## Features Overview\n- Fulfill ERC721 token bids\n- Fulfill ERC1155 token bids (with partial fulfillment support)\n- Apply taker ecosystem fees during bid fulfillment\n\n## SDK Integration Details\n\n### Fulfill ERC721 Bid\n**[Fulfill ERC721 Bid](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/fulfill-bid-with-nextjs/src/app/fulfill-bid-with-erc721/page.tsx)**: Fulfill an existing bid for an ERC721 token.\n\n**Implementation**:\n```typescript\nconst fulfillERC721Bid = async (bidID: string) => {\n  const { actions } = await orderbookSDK.fulfillOrder(\n    bidID,\n    accountsState[0],\n    takerEcosystemFeeRecipient != \"\" ? [{\n      recipientAddress: takerEcosystemFeeRecipient, // Replace address with your own marketplace address\n      amount: takerEcosystemFeeAmount, // Insert taker ecosystem/marketplace fee here\n    }] : [],\n  );\n\n  for (const action of actions) {\n    if (action.type === orderbook.ActionType.TRANSACTION && signer) {\n      const builtTx = await action.buildTransaction();\n      await (await signer.sendTransaction(builtTx)).wait(1);\n    }\n  }\n};\n```\n\n**Explanation**: The `fulfillERC721Bid` function uses the Orderbook SDK's `fulfillOrder` method to fulfill an existing bid. It takes the bid ID and the current user's address as parameters, along with any optional taker ecosystem fees. The function then executes any required actions, such as smart contract transactions, using the connected wallet's signer.\n\n### Fulfill ERC1155 Bid\n**[Fulfill ERC1155 Bid](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/fulfill-bid-with-nextjs/src/app/fulfill-bid-with-erc1155/page.tsx)**: Fulfill an existing bid for an ERC1155 token, with support for partial fulfillment.\n\n**Implementation**:\n```typescript\nconst fulfillERC1155Bid = async (\n  bidID: string,\n  unitsToFill?: string, // Number of units to fill\n) => {\n  const { actions } = await orderbookSDK.fulfillOrder(\n    bidID,\n    accountsState[0],\n    takerEcosystemFeeRecipient != \"\" ? [{\n      recipientAddress: takerEcosystemFeeRecipient, // Replace address with your own marketplace address\n      amount: takerEcosystemFeeAmount, // Insert taker ecosystem/marketplace fee here\n    }] : [],\n    unitsToFill,\n  );\n\n  for (const action of actions) {\n    if (action.type === orderbook.ActionType.TRANSACTION && signer) {\n      const builtTx = await action.buildTransaction();\n      await (await signer.sendTransaction(builtTx)).wait(1);\n    }\n  }\n};\n```\n\n**Explanation**: The `fulfillERC1155Bid` function is similar to the ERC721 version but includes support for partial fulfillment through the `unitsToFill` parameter. This allows sellers to fulfill only a portion of the bid for ERC1155 tokens, which can have multiple units. The function also supports taker ecosystem fees and executes the necessary transactions to complete the bid fulfillment.\n\n## Running the App\n\n### Prerequisites\n- Node.js installed on your machine\n- Valid client ID and publishable API key from [Immutable Hub](https://hub.immutable.com/)\n- Existing bids in the system for ERC721 or ERC1155 tokens\n\n### Steps to Run Locally\n1. Install the dependencies:\n   ```bash\n   pnpm i\n   ```\n\n2. Copy the `.env.example` file to `.env`:\n   ```bash\n   cp .env.example .env\n   ```\n\n3. Replace the `NEXT_PUBLIC_PUBLISHABLE_KEY` and `NEXT_PUBLIC_CLIENT_ID` with your own values from the Immutable Hub.\n\n4. Run the development server:\n   ```bash\n   pnpm dev\n   ```\n\n5. Open [http://localhost:3000](http://localhost:3000) in your browser and you'll be navigated to the home screen.\n\n### Fulfilling an ERC721 Bid\n1. Click on the \"Fulfill bid - Complete fulfillment with ERC721\" button\n2. Connect your Passport wallet\n3. Filter bids based on the NFT Contract Address\n4. Click on the \"Submit\" button to view available bids\n5. Click on the \"Fill Bid\" button next to a bid you want to fulfill\n6. Approve the settlement contract to transfer tokens on your behalf\n7. Wait for the transaction to be confirmed\n\n### Fulfilling an ERC1155 Bid\n1. Click on the \"Fulfill bid - Partial fulfillment with ERC1155\" button\n2. Connect your Passport wallet\n3. Filter bids based on the NFT Contract Address\n4. Provide the number of units you want to fulfill\n5. Click on the \"Submit\" button to view available bids\n6. Click on the \"Fill Bid\" button next to a bid you want to fulfill\n7. Approve the settlement contract to transfer tokens on your behalf\n8. Wait for the transaction to be confirmed\n\n## Summary\nThis example demonstrates how to fulfill bids for both ERC721 and ERC1155 tokens using the Immutable Orderbook SDK. It shows how to connect to Passport for wallet authentication, query available bids, and execute the necessary transactions to fulfill bids. The application also supports taker ecosystem fees and partial fulfillment for ERC1155 tokens, providing a comprehensive example of the bid fulfillment process. ",
    "metadata": {
      "title": "Fulfill Bid with Next.js",
      "description": "Example app demonstrating how to fulfill bids for ERC721 and ERC1155 tokens using the Immutable Orderbook SDK in a Next.js environment",
      "keywords": [
        "Immutable",
        "SDK",
        "Orderbook",
        "Fulfill Bid",
        "ERC721",
        "ERC1155",
        "Next.js",
        "Passport"
      ],
      "tech_stack": [
        "Next.js",
        "TypeScript",
        "Passport SDK",
        "Orderbook SDK",
        "Biom3 UI"
      ],
      "product": "Orderbook",
      "programming_language": "TypeScript"
    }
  },
  "fulfill-collection-bid-with-nextjs": {
    "tutorial": "# Fulfill Collection Bid with Next.js\n\n## Introduction\nThis example app demonstrates how to fulfill collection bids using the Immutable Orderbook SDK in a Next.js application. It showcases how sellers can fulfill collection bids (offers to buy any token in a collection) with both ERC721 and ERC1155 tokens. This example demonstrates the practical implementation of the fulfillment process, including authentication with Passport and interaction with Immutable's orderbook system.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/fulfill-collection-bid-with-nextjs)\n\n## Features Overview\n- **Fetch Collection Bids**: Retrieve and display active collection bids for a specific contract address\n- **ERC721 Collection Bid Fulfillment**: Complete fulfillment of collection bids with ERC721 tokens\n- **ERC1155 Collection Bid Fulfillment**: Partial fulfillment of collection bids with ERC1155 tokens\n- **Ecosystem Fee Integration**: Support for adding custom ecosystem fees to fulfillment transactions\n\n## SDK Integration Details\n\n### Fetch Collection Bids\n[Fetching active collection bids](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/fulfill-collection-bid-with-nextjs/src/app/fulfill-collection-bid-with-erc721/page.tsx#L151-L180) for a specific contract address allows sellers to see what offers are available.\n\n```typescript\nconst getCollectionBids = async (\n  client: orderbook.Orderbook,\n  buyItemContractAddress?: string\n): Promise<orderbook.CollectionBid[]> => {\n  try {\n    setLoadingState(true);\n    setLoadingText(\"Fetching collection bids\");\n    resetMsgState();\n\n    // Get the collection bids from the orderbook\n    const listResponse = await client.listCollectionBids({\n      sellItemContractAddress: buyItemContractAddress,\n      status: OrderStatusName.ACTIVE,\n    });\n\n    setSuccessMessageState(\"Collection bids fetched successfully\");\n    setLoadingState(false);\n    return listResponse.result;\n  } catch (error) {\n    console.error(error);\n    setErrorMessageState(JSON.stringify(error));\n    setLoadingState(false);\n    return [];\n  }\n};\n```\n\n### ERC721 Collection Bid Fulfillment\n[Fulfilling a collection bid with an ERC721 token](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/fulfill-collection-bid-with-nextjs/src/app/fulfill-collection-bid-with-erc721/page.tsx#L212-L247) allows sellers to sell a specific token from their collection.\n\n```typescript\nconst fulfillERC721CollectionBid = async (\n  collectionBidID: string,\n  tokenID: string\n) => {\n  if (signer) {\n    try {\n      setLoadingState(true);\n      setLoadingText(\"Fulfilling Collection Bid\");\n      resetMsgState();\n\n      await orderbookSDK.fulfillCollectionBid({\n        collectionBidId: collectionBidID,\n        tokenId: tokenID,\n        signer,\n        takerFees: takerEcosystemFeeRecipient && takerEcosystemFeeAmount\n          ? [{\n            recipientAddress: takerEcosystemFeeRecipient,\n            amount: takerEcosystemFeeAmount\n          }]\n          : undefined\n      });\n\n      setSuccessMessageState(\"Collection bid fulfilled successfully\");\n      await refreshCollectionBids();\n    } catch (error) {\n      console.error(error);\n      setErrorMessageState(JSON.stringify(error));\n    } finally {\n      setLoadingState(false);\n    }\n  }\n};\n```\n\n### ERC1155 Collection Bid Fulfillment\n[Fulfilling a collection bid with an ERC1155 token](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/fulfill-collection-bid-with-nextjs/src/app/fulfill-collection-bid-with-erc1155/page.tsx#L234-L276) allows sellers to partially fulfill a bid by selling a specific quantity of fungible tokens.\n\n```typescript\nconst fulfillERC1155CollectionBid = async (\n  collectionBidID: string,\n  amount: string,\n  tokenId: string,\n) => {\n  if (signer) {\n    try {\n      setLoadingState(true);\n      setLoadingText(\"Fulfilling Collection Bid\");\n      resetMsgState();\n\n      // Fulfill the collection bid\n      await orderbookSDK.fulfillCollectionBid({\n        collectionBidId: collectionBidID,\n        tokenId: tokenId,\n        tokenAmount: amount,\n        signer,\n        takerFees: takerEcosystemFeeRecipient && takerEcosystemFeeAmount\n          ? [{\n            recipientAddress: takerEcosystemFeeRecipient,\n            amount: takerEcosystemFeeAmount\n          }]\n          : undefined\n      });\n\n      setSuccessMessageState(\"Collection bid fulfilled successfully\");\n      await refreshCollectionBids();\n    } catch (error) {\n      console.error(error);\n      setErrorMessageState(JSON.stringify(error));\n    } finally {\n      setLoadingState(false);\n    }\n  }\n};\n```\n\n### Collection Bid Utility Functions\n[Helper functions](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/fulfill-collection-bid-with-nextjs/src/app/utils/collectionBid.ts) for calculating total units and remaining units in a collection bid.\n\n```typescript\nexport function unitsTotal(collectionBid: orderbook.CollectionBid): string {\n  return collectionBid.buy[0].amount;\n}\n\nexport function unitsRemaining(collectionBid: orderbook.CollectionBid): string {\n  const totalUnits = unitsTotal(collectionBid);\n  const hasUnitsSold = collectionBid.fillStatus.denominator !== \"0\";\n  const unitsSold = hasUnitsSold\n    ? (BigInt(totalUnits) * BigInt(collectionBid.fillStatus.numerator)) /\n      BigInt(collectionBid.fillStatus.denominator)\n    : BigInt(0);\n  return (BigInt(totalUnits) - unitsSold).toString();\n}\n```\n\n## Running the App\n\n### Prerequisites\n- Node.js (v18 or higher)\n- pnpm installed globally\n- Immutable Passport account for authentication - [Set up on Immutable Hub](https://hub.immutable.com/)\n- A wallet with testnet tokens and NFTs on Immutable's testnet\n- Collection bids already created on the testnet (you can use the [Create Collection Bid example](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/create-collection-bid-with-nextjs))\n\n### Steps to Run Locally\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/immutable/ts-immutable-sdk.git\n   ```\n\n2. Navigate to the example directory:\n   ```bash\n   cd ts-immutable-sdk/examples/orderbook/fulfill-collection-bid-with-nextjs\n   ```\n\n3. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n\n4. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n\n5. Open your browser to http://localhost:3000\n   \n6. Connect with Passport on the application\n   \n7. Enter a contract address to find active collection bids\n   \n8. Choose to fulfill a bid either with ERC721 (complete fulfillment) or ERC1155 (partial fulfillment)\n   \n9. Complete the transaction by providing the token ID (and quantity for ERC1155) and confirming in your wallet\n\n## Summary\nThis example demonstrates how to implement collection bid fulfillment functionality using the Immutable Orderbook SDK. It showcases two main scenarios: fulfilling collection bids with ERC721 tokens (complete fulfillment) and with ERC1155 tokens (partial fulfillment). The app demonstrates the integration of Passport for authentication and wallet connection, retrieving active collection bids, and executing fulfillment transactions with optional ecosystem fees. Developers can use this example as a reference to implement collection bid fulfillment in their own applications. ",
    "metadata": {
      "title": "Fulfill Collection Bid with Next.js",
      "description": "An example application demonstrating how to fulfill collection bids for both ERC721 and ERC1155 tokens using the Immutable Orderbook SDK with Next.js",
      "keywords": [
        "Immutable",
        "SDK",
        "Orderbook",
        "Collection Bid",
        "Fulfillment",
        "ERC721",
        "ERC1155",
        "Next.js"
      ],
      "tech_stack": [
        "Next.js",
        "React",
        "TypeScript",
        "Immutable SDK",
        "Passport",
        "Orderbook SDK",
        "ethers.js"
      ],
      "product": "Orderbook",
      "programming_language": "TypeScript"
    }
  },
  "fulfill-listing-with-nextjs": {
    "tutorial": "# Fulfill Listing with NextJS\n\n## Introduction\nThis example application demonstrates how to fulfill NFT listings using Immutable's Orderbook SDK. The app showcases fulfilling both ERC721 (complete fulfillment) and ERC1155 (partial fulfillment) listings using a NextJS and React frontend. This is a crucial functionality for any marketplace that allows users to purchase NFTs listed by others.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/orderbook/fulfill-listing-with-nextjs)\n\n## Features Overview\n- **Fetch active listings** - Display available NFT listings that can be fulfilled\n- **Complete ERC721 fulfillment** - Purchase a whole ERC721 NFT from a listing\n- **Partial ERC1155 fulfillment** - Purchase a specific quantity of an ERC1155 NFT from a listing\n- **Taker ecosystem fees** - Add marketplace fees to be collected when fulfilling listings\n\n## SDK Integration Details\n\n### Fetch Active Listings\n[Implementation](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/fulfill-listing-with-nextjs/src/app/fulfill-listing-with-erc721/page.tsx#L149-L165)\n\n```typescript\nconst getListings = async (\n  client: orderbook.Orderbook,\n  sellItemContractAddress?: string,\n  buyItemType?: \"NATIVE\" | \"ERC20\",\n): Promise<orderbook.Listing[]> => {\n  let params: orderbook.ListListingsParams = {\n    pageSize: 50,\n    sortBy: \"created_at\",\n    status: OrderStatusName.ACTIVE,\n    sellItemContractAddress,\n    buyItemType,\n  };\n  const listings = await client.listListings(params);\n  return listings.result;\n};\n```\n\nThe app fetches active listings using the Orderbook SDK's `listListings` function. It filters listings based on contract address and whether they're selling for native currency or ERC20 tokens. The resulting listings are then filtered to only show ERC721 or ERC1155 listings, depending on the page.\n\n### Complete ERC721 Fulfillment\n[Implementation](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/fulfill-listing-with-nextjs/src/app/fulfill-listing-with-erc721/page.tsx#L203-L218)\n\n```typescript\nconst fulfillERC721Listing = async (listingID: string) => {\n  const { actions } = await orderbookSDK.fulfillOrder(\n    listingID,\n    accountsState[0],\n    takerEcosystemFeeRecipient != \"\" ? [{\n      recipientAddress: takerEcosystemFeeRecipient,\n      amount: takerEcosystemFeeAmount,\n    }] : [],\n  );\n\n  for (const action of actions) {\n    if (action.type === orderbook.ActionType.TRANSACTION) {\n      const builtTx = await action.buildTransaction();\n      await signer?.sendTransaction(builtTx);\n    }\n  }\n};\n```\n\nThe app fulfills ERC721 listings by calling the `fulfillOrder` method from the Orderbook SDK, providing the listing ID and the fulfiller's wallet address. It also allows adding optional taker ecosystem fees for the marketplace. The resulting actions are then executed by building and sending transactions.\n\n### Partial ERC1155 Fulfillment\n[Implementation](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/orderbook/fulfill-listing-with-nextjs/src/app/fulfill-listing-with-erc1155/page.tsx#L219-L239)\n\n```typescript\nconst fulfillERC1155Listing = async (\n  listingID: string,\n  unitsToFill?: string, // Number of units to fill\n) => {\n  const { actions } = await orderbookSDK.fulfillOrder(\n    listingID,\n    accountsState[0],\n    takerEcosystemFeeRecipient != \"\" ? [{\n      recipientAddress: takerEcosystemFeeRecipient,\n      amount: takerEcosystemFeeAmount,\n    }] : [],\n    unitsToFill,\n  );\n\n  for (const action of actions) {\n    if (action.type === orderbook.ActionType.TRANSACTION && signer) {\n      const builtTx = await action.buildTransaction();\n      await (await signer.sendTransaction(builtTx)).wait(1);\n    }\n  }\n};\n```\n\nFor ERC1155 tokens, the app allows for partial fulfillment by specifying the number of units to purchase. This is done by passing an additional `unitsToFill` parameter to the `fulfillOrder` method. The app also calculates and displays the total units and remaining units for each ERC1155 listing.\n\n## Running the App\n\n### Prerequisites\n- Node.js and pnpm installed\n- A [Immutable Hub](https://hub.immutable.com/) account with API credentials\n- A wallet with funds on the Immutable zkEVM testnet\n\n### Setup Instructions\n1. Clone the repository\n2. Navigate to the example directory:\n   ```\n   cd examples/orderbook/fulfill-listing-with-nextjs\n   ```\n3. Install dependencies:\n   ```\n   pnpm install\n   ```\n4. Create a `.env` file based on `.env.example` and add your credentials:\n   ```\n   NEXT_PUBLIC_PUBLISHABLE_KEY=<your-publishable-key>\n   NEXT_PUBLIC_CLIENT_ID=<your-client-id>\n   ```\n5. Start the development server:\n   ```\n   pnpm dev\n   ```\n6. Open [http://localhost:3000](http://localhost:3000) in your browser\n\n## Summary\nThis example demonstrates how to build a marketplace that allows users to purchase NFTs from listings created by other users. It showcases two important fulfillment scenarios: complete fulfillment of ERC721 tokens and partial fulfillment of ERC1155 tokens. The integration with Passport provides a seamless wallet connection experience, while the Orderbook SDK handles the complex logic of fulfilling orders on the blockchain.\n\nBy using this example as a reference, developers can implement purchase functionality in their own marketplaces built on Immutable's infrastructure. ",
    "metadata": {
      "title": "Fulfill Listing with NextJS",
      "description": "A NextJS application that demonstrates how to fulfill NFT listings (both ERC721 and ERC1155) using the Immutable Orderbook SDK.",
      "keywords": [
        "Immutable",
        "SDK",
        "Orderbook",
        "Fulfill Listing",
        "ERC721",
        "ERC1155",
        "NFT",
        "Marketplace"
      ],
      "tech_stack": [
        "NextJS",
        "React",
        "TypeScript",
        "Immutable SDK",
        "Biom3"
      ],
      "product": "Orderbook",
      "programming_language": "TypeScript"
    }
  }
}