{
  "logged-in-user-with-nextjs": {
    "tutorial": "# Managing Logged-in User Data with Immutable Passport\n\nThis tutorial demonstrates how to manage and access logged-in user data using Immutable Passport in a Next.js application. You'll learn how to retrieve user profile information, manage linked addresses, and handle authentication tokens in a secure and efficient way.\n\n## Overview\n\nThis example app showcases three main features:\n1. **User Profile Management**: Retrieve and display user information like email and nickname\n2. **Linked Addresses**: View and manage blockchain addresses associated with the user's account\n3. **Token Verification**: Handle ID and access tokens for authentication and API access\n\nEach feature is implemented as a separate page with its own functionality while sharing common authentication logic.\n\n## Prerequisites\n\nBefore starting this tutorial, ensure you have:\n\n- Node.js installed on your system\n- An Immutable Hub account\n- Basic understanding of React and Next.js\n- Your Immutable Hub publishable API key and client ID\n- Understanding of JWT tokens and authentication flows\n- Familiarity with OAuth2/OpenID Connect concepts\n\n## Project Setup\n\n1. Create a new Next.js project with TypeScript:\n\n```bash\npnpm create next-app@latest passport-logged-in-example --typescript\ncd passport-logged-in-example\n```\n\n2. Install the required dependencies:\n\n```bash\npnpm add @imtbl/sdk @biom3/react\n```\n\n3. Create a `.env` file in your project root:\n\n```env\nNEXT_PUBLIC_PUBLISHABLE_KEY=your_publishable_key_here\nNEXT_PUBLIC_CLIENT_ID=your_client_id_here\n```\n\n## Project Structure\n\nThe application is organized as follows:\n\n```\nsrc/\n├── app/\n│   ├── linked-addresses-with-passport/  # Linked addresses management\n│   │   └── page.tsx\n│   ├── user-info-with-passport/        # User profile information\n│   │   └── page.tsx\n│   ├── verify-tokens-with-nextjs/      # Token verification\n│   │   └── page.tsx\n│   ├── utils/\n│   │   └── setupDefault.ts             # Passport configuration\n│   ├── layout.tsx                      # App layout\n│   └── page.tsx                        # Navigation page\n```\n\n## Setting up Passport\n\nFirst, let's configure the Passport instance. Create `src/app/utils/setupDefault.ts`:\n\n```typescript\nimport { config, passport } from '@imtbl/sdk';\n\nexport const passportInstance = new passport.Passport({\n    baseConfig: {\n      environment: config.Environment.SANDBOX,\n      publishableKey: process.env.NEXT_PUBLIC_PUBLISHABLE_KEY || '<YOUR_PUBLISHABLE_KEY>',\n    },\n    clientId: process.env.NEXT_PUBLIC_CLIENT_ID || '<YOUR_CLIENT_ID>',\n    redirectUri: 'http://localhost:3000/redirect',\n    logoutRedirectUri: 'http://localhost:3000/logout',\n    audience: 'platform_api',\n    scope: 'openid offline_access email transact',\n});\n```\n\nKey configuration points:\n- `environment`: Set to SANDBOX for testing, change to PRODUCTION for live apps\n- `scope`: Includes necessary permissions for user data access\n- `audience`: Set to 'platform_api' for Immutable API access\n- `redirectUri`: Must match the URI configured in your Immutable Hub application\n\n## Creating the Home Page\n\nThe home page (`src/app/page.tsx`) provides navigation to different user data management features:\n\n```typescript\n'use client';\nimport { Button, Heading } from '@biom3/react';\nimport NextLink from 'next/link';\n\nexport default function Home() {\n  return (<>\n      <Heading \n      size=\"medium\" \n      className=\"mb-1\">\n        User Information after Logging In with NextJS\n      </Heading>\n      <Button       \n      className=\"mb-1\"\n      size=\"medium\" \n      rc={<NextLink href=\"/linked-addresses-with-passport\" />}>\n        Linked Addresses with Passport\n      </Button> \n      <Button       \n      className=\"mb-1\"\n      size=\"medium\" \n      rc={<NextLink href=\"/user-info-with-passport\" />}>\n        User Info with Passport\n      </Button> \n      <Button       \n      className=\"mb-1\"\n      size=\"medium\" \n      rc={<NextLink href=\"/verify-tokens-with-nextjs\" />}>\n        Verify Tokens with NextJS\n      </Button> \n  </>);\n}\n```\n\n## Implementing User Profile Information\n\nCreate `src/app/user-info-with-passport/page.tsx`:\n\n```typescript\n'use client';\n\nimport { useState } from 'react';\nimport { Button, Heading, Table, Link } from '@biom3/react';\nimport NextLink from 'next/link';\nimport { passportInstance } from '../utils/setupDefault';\n\ntype UserProfile = {\n  email?: string;\n  nickname?: string;\n  sub: string;\n};\n\nexport default function LoginWithPassport() {\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [accountAddress, setAccountAddress] = useState<string | null>(null);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n\n  const loginWithPassport = async () => {\n    if (!passportInstance) return;\n    try {\n      const provider = await passportInstance.connectEvm();\n      const accounts = await provider.request({ method: 'eth_requestAccounts' });\n      const userProfileData = await passportInstance.getUserInfo();\n      \n      if (accounts) {\n        setIsLoggedIn(true);\n        setAccountAddress(accounts[0] || null);\n        setUserProfile(userProfileData || null);\n      } else {\n        setIsLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Error connecting to Passport:', error);\n      setIsLoggedIn(false);\n    }\n  };\n\n  return (\n    <>\n      <Heading size=\"medium\" className=\"mb-1\">\n        User Info with Passport\n      </Heading>\n      <Button\n        className=\"mb-1\"\n        size=\"medium\"\n        onClick={loginWithPassport}\n        disabled={isLoggedIn}>\n        {isLoggedIn ? 'Logged In' : 'Login'}\n      </Button>\n\n      <Table>\n        <Table.Head>\n          <Table.Row>\n            <Table.Cell>Attribute</Table.Cell>\n            <Table.Cell>Value</Table.Cell>\n          </Table.Row>\n        </Table.Head>\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell><b>Is Logged In</b></Table.Cell>\n            <Table.Cell>{isLoggedIn ? 'Yes' : 'No'}</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell><b>Account Address</b></Table.Cell>\n            <Table.Cell>{accountAddress || 'N/A'}</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell><b>User Profile</b></Table.Cell>\n            <Table.Cell>\n              {userProfile ? (\n                <>\n                  {userProfile.email ? <div>Email: {userProfile.email}</div> : null}\n                  {userProfile.nickname ? <div>Nickname: {userProfile.nickname}</div> : null}\n                  <div>Sub: {userProfile.sub}</div>\n                </>\n              ) : 'N/A'}\n            </Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n      <br />\n      <Link rc={<NextLink href=\"/\" />}>Return to Examples</Link>\n    </>\n  );\n}\n```\n\n## Managing Linked Addresses\n\nCreate `src/app/linked-addresses-with-passport/page.tsx`:\n\n```typescript\n'use client';\n\nimport { useState } from 'react';\nimport { Button, Heading, Table, Link } from '@biom3/react';\nimport NextLink from 'next/link';\nimport { passportInstance } from '../utils/setupDefault';\n\nexport default function LoginWithPassport() {\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [accountAddress, setAccountAddress] = useState<string | null>(null);\n  const [linkedAddresses, setLinkedAddresses] = useState<string[]>([]);\n\n  const loginWithPassport = async () => {\n    if (!passportInstance) return;\n    try {\n      const provider = await passportInstance.connectEvm();\n      const accounts = await provider.request({ method: 'eth_requestAccounts' });\n      if (accounts) {\n        setIsLoggedIn(true);\n        setAccountAddress(accounts[0] || null);\n        const addresses = await passportInstance.getLinkedAddresses();\n        setLinkedAddresses(addresses || []);\n      } else {\n        setIsLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Error connecting to Passport:', error);\n      setIsLoggedIn(false);\n    }\n  };\n\n  return (\n    <>\n      <Heading size=\"medium\" className=\"mb-1\">\n        Linked Addresses with Passport\n      </Heading>\n      <Button\n        className=\"mb-1\"\n        size=\"medium\"\n        onClick={loginWithPassport}\n        disabled={isLoggedIn}>\n        {isLoggedIn ? 'Logged In' : 'Login'}\n      </Button>\n\n      <Table>\n        <Table.Head>\n          <Table.Row>\n            <Table.Cell>Attribute</Table.Cell>\n            <Table.Cell>Value</Table.Cell>\n          </Table.Row>\n        </Table.Head>\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell><b>Is Logged In</b></Table.Cell>\n            <Table.Cell>{isLoggedIn ? 'Yes' : 'No'}</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell><b>Account Address</b></Table.Cell>\n            <Table.Cell>{accountAddress || 'N/A'}</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell><b>Linked Addresses</b></Table.Cell>\n            <Table.Cell>{linkedAddresses.length ? linkedAddresses.join(', ') : 'N/A'}</Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n      <br />\n      <Link rc={<NextLink href=\"/\" />}>Return to Examples</Link>\n    </>\n  );\n}\n```\n\n## Implementing Token Verification\n\nCreate `src/app/verify-tokens-with-nextjs/page.tsx`:\n\n```typescript\n'use client';\n\nimport { useState } from 'react';\nimport { Button, Heading, Table, Link } from '@biom3/react';\nimport NextLink from 'next/link';\nimport { passportInstance } from '../utils/setupDefault';\n\nexport default function LoginWithPassport() {\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [accountAddress, setAccountAddress] = useState<string | null>(null);\n  const [idToken, setIdToken] = useState<string | null>(null);\n  const [accessToken, setAccessToken] = useState<string | null>(null);\n\n  const loginWithPassport = async () => {\n    if (!passportInstance) return;\n    try {\n      const provider = await passportInstance.connectEvm();\n      const accounts = await provider.request({ method: 'eth_requestAccounts' });\n      const idToken = await passportInstance.getIdToken();\n      const accessToken = await passportInstance.getAccessToken();\n      \n      if (accounts) {\n        setIsLoggedIn(true);\n        setAccountAddress(accounts[0] || null);\n        setIdToken(idToken || null);\n        setAccessToken(accessToken || null);\n      } else {\n        setIsLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Error connecting to Passport:', error);\n      setIsLoggedIn(false);\n    }\n  };\n\n  return (\n    <>\n      <Heading size=\"medium\" className=\"mb-1\">\n        Verify Tokens with NextJS\n      </Heading>\n      <Button\n        className=\"mb-1\"\n        size=\"medium\"\n        onClick={loginWithPassport}\n        disabled={isLoggedIn}>\n        {isLoggedIn ? 'Logged In' : 'Login'}\n      </Button>\n\n      <div style={{ maxHeight: '400px', overflowY: 'auto' }}>\n        <Table>\n          <Table.Head>\n            <Table.Row>\n              <Table.Cell>Attribute</Table.Cell>\n              <Table.Cell>Value</Table.Cell>\n            </Table.Row>\n          </Table.Head>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell><b>Is Logged In</b></Table.Cell>\n              <Table.Cell>{isLoggedIn ? 'Yes' : 'No'}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell><b>Account Address</b></Table.Cell>\n              <Table.Cell>{accountAddress || 'N/A'}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell><b>ID Token</b></Table.Cell>\n              <Table.Cell style={{ wordBreak: 'break-word' }}>{idToken || 'N/A'}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell><b>Access Token</b></Table.Cell>\n              <Table.Cell style={{ wordBreak: 'break-word' }}>{accessToken || 'N/A'}</Table.Cell>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n      <br />\n      <Link rc={<NextLink href=\"/\" />}>Return to Examples</Link>\n    </>\n  );\n}\n```\n\n## Key Concepts\n\n### 1. User Profile Information\n\nThe `getUserInfo()` method provides access to the user's profile information:\n- Email address (if available)\n- Nickname (if available)\n- Subject identifier (sub)\n- Other OIDC standard claims\n\n### 2. Linked Addresses\n\nThe `getLinkedAddresses()` method returns an array of blockchain addresses that are linked to the user's Passport account. This is useful for:\n- Displaying all addresses associated with the user\n- Managing multiple wallets\n- Cross-chain functionality\n\n### 3. Token Management\n\nTwo types of tokens are available:\n- **ID Token**: Contains user identity information\n- **Access Token**: Used for API authentication\n\nMethods:\n- `getIdToken()`: Retrieves the ID token\n- `getAccessToken()`: Retrieves the access token\n\n### 4. State Management\n\nThe application uses React's useState hook to manage:\n- Login status\n- User profile data\n- Linked addresses\n- Authentication tokens\n- Account addresses\n\n## Security Best Practices\n\n### Token Handling\n1. **Never Store Sensitive Data in Local Storage**\n   ```typescript\n   // ❌ Don't do this\n   localStorage.setItem('accessToken', token);\n   \n   // ✅ Instead, use state management or secure storage solutions\n   const [accessToken, setAccessToken] = useState<string | null>(null);\n   ```\n\n2. **Implement Token Refresh Logic**\n   ```typescript\n   // Example token refresh implementation\n   const refreshTokens = async () => {\n     try {\n       await passportInstance.refreshTokens();\n     } catch (error) {\n       // Handle refresh error, possibly redirect to login\n       console.error('Token refresh failed:', error);\n     }\n   };\n   ```\n\n3. **Secure API Calls**\n   ```typescript\n   // Example of secure API call with access token\n   const makeSecureApiCall = async () => {\n     const accessToken = await passportInstance.getAccessToken();\n     const response = await fetch('your-api-endpoint', {\n       headers: {\n         Authorization: `Bearer ${accessToken}`,\n       },\n     });\n     return response.json();\n   };\n   ```\n\n### Error Handling\nImplement comprehensive error handling for all authentication operations:\n\n```typescript\nconst handleAuthOperation = async () => {\n  try {\n    // Attempt authentication operation\n    await passportInstance.someOperation();\n  } catch (error) {\n    if (error instanceof passport.PassportError) {\n      switch (error.code) {\n        case 'token_expired':\n          await refreshTokens();\n          break;\n        case 'user_cancelled':\n          // Handle user cancellation\n          break;\n        default:\n          // Handle other errors\n          console.error('Authentication error:', error);\n      }\n    }\n  }\n};\n```\n\n## Advanced Usage\n\n### Custom Hook for Authentication State\nCreate a reusable hook for managing authentication state:\n\n```typescript\nfunction usePassportAuth() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userProfile, setUserProfile] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const profile = await passportInstance.getUserInfo();\n        setIsLoggedIn(!!profile);\n        setUserProfile(profile);\n      } catch (error) {\n        setIsLoggedIn(false);\n        setUserProfile(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  return { isLoggedIn, userProfile, loading };\n}\n```\n\n### Protected Route Component\nImplement a higher-order component for protected routes:\n\n```typescript\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isLoggedIn, loading } = usePassportAuth();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!isLoggedIn) {\n    return <redirect to=\"/login\" />;\n  }\n\n  return children;\n}\n```\n\n## Troubleshooting Guide\n\n### Common Issues\n\n1. **Token Expiration**\n   - Symptom: API calls fail with 401 errors\n   - Solution: Implement token refresh logic\n   - Prevention: Monitor token expiration and refresh proactively\n\n2. **Scope Issues**\n   - Symptom: Unable to access certain user data\n   - Solution: Verify scope includes all required permissions\n   - Example: `scope: 'openid offline_access email transact'`\n\n3. **Redirect URI Mismatch**\n   - Symptom: Authentication fails after login attempt\n   - Solution: Ensure redirect URI matches Immutable Hub configuration\n   - Verification: Check console for redirect-related errors\n\n## Resources\n\n- [Immutable Passport Documentation](https://docs.immutable.com/docs/zkEVM/products/passport)\n- [Next.js Documentation](https://nextjs.org/docs)\n- [OpenID Connect Documentation](https://openid.net/connect/)\n- [OAuth2 Best Practices](https://oauth.net/2/) ",
    "metadata": {
      "title": "Passport Logged-in User Features with Next.js",
      "description": "A comprehensive example demonstrating how to access and manage logged-in user information using Immutable Passport in a Next.js application. Features include retrieving user profile data, linked addresses, and token verification. This example shows how to implement post-authentication functionality in a secure and user-friendly way.",
      "keywords": [
        "authentication",
        "passport",
        "web3",
        "user profile",
        "linked addresses",
        "token verification",
        "Next.js",
        "React",
        "Immutable SDK",
        "identity management",
        "JWT tokens",
        "OAuth2",
        "OpenID Connect",
        "wallet connection"
      ],
      "programmingLanguage": "TypeScript",
      "techStack": [
        "Next.js",
        "React",
        "TypeScript",
        "Immutable SDK",
        "Passport",
        "Biom3 UI",
        "OAuth2",
        "OpenID Connect"
      ],
      "category": "User Management & Identity",
      "difficulty": "Beginner",
      "prerequisites": [
        "Node.js",
        "Basic understanding of React/Next.js",
        "Immutable Hub account",
        "Understanding of JWT tokens",
        "Familiarity with OAuth2/OpenID Connect concepts"
      ],
      "environmentVariables": {
        "NEXT_PUBLIC_PUBLISHABLE_KEY": "Your Immutable Hub publishable API key",
        "NEXT_PUBLIC_CLIENT_ID": "Your Immutable Hub client ID"
      },
      "estimatedTime": "20 minutes",
      "features": [
        "User profile information retrieval",
        "Linked addresses management",
        "ID token verification",
        "Access token management",
        "User authentication state",
        "Account address display",
        "OAuth2/OpenID Connect integration",
        "Secure token handling",
        "Error handling and user feedback"
      ],
      "relatedResources": [
        "Immutable Passport Documentation",
        "Next.js Documentation",
        "JWT Documentation",
        "OAuth2 Documentation",
        "OpenID Connect Documentation",
        "React State Management Guide"
      ],
      "version": "1.0.0",
      "sdkVersion": {
        "@imtbl/sdk": "^0.0.1"
      }
    }
  },
  "login-with-nextjs": {
    "tutorial": "# Implementing Authentication with Immutable Passport in Next.js\n\nThis tutorial walks you through implementing various authentication methods using Immutable Passport in a Next.js application. You'll learn how to implement different login approaches, handle logout scenarios, and manage authentication state.\n\n## Prerequisites\n\nBefore starting this tutorial, ensure you have:\n\n- Node.js installed on your system\n- An Immutable Hub account\n- Basic understanding of React and Next.js\n- Your Immutable Hub publishable API key and client ID\n\n## Project Setup\n\n1. Create a new Next.js project with TypeScript:\n\n```bash\npnpm create next-app@latest passport-login-example --typescript\ncd passport-login-example\n```\n\n2. Install the required dependencies:\n\n```bash\npnpm add @imtbl/sdk @biom3/react ethers\n```\n\n3. Create a `.env` file in your project root:\n\n```env\nNEXT_PUBLIC_PUBLISHABLE_KEY=your_publishable_key_here\nNEXT_PUBLIC_CLIENT_ID=your_client_id_here\n```\n\n## Project Structure\n\nThe application is organized as follows:\n\n```\nsrc/\n├── app/\n│   ├── login-with-passport/\n│   │   └── page.tsx\n│   ├── login-with-etherjs/\n│   │   └── page.tsx\n│   ├── login-with-identity-only/\n│   │   └── page.tsx\n│   ├── logout-with-redirect-mode/\n│   │   └── page.tsx\n│   ├── logout-with-silent-mode/\n│   │   └── page.tsx\n│   ├── utils/\n│   │   └── setupDefault.ts\n│   ├── layout.tsx\n│   └── page.tsx\n```\n\n## Setting up Passport\n\nFirst, let's configure the Passport instance. Create `src/app/utils/setupDefault.ts`:\n\n```typescript\nimport { config, passport } from '@imtbl/sdk';\n\nexport const passportInstance = new passport.Passport({\n    baseConfig: {\n      environment: config.Environment.SANDBOX,\n      publishableKey: process.env.NEXT_PUBLIC_PUBLISHABLE_KEY || '<YOUR_PUBLISHABLE_KEY>',\n    },\n    clientId: process.env.NEXT_PUBLIC_CLIENT_ID || '<YOUR_CLIENT_ID>',\n    redirectUri: 'http://localhost:3000/redirect',\n    logoutRedirectUri: 'http://localhost:3000/logout',\n    audience: 'platform_api',\n    scope: 'openid offline_access email transact',\n});\n```\n\n## Creating the Home Page\n\nThe home page (`src/app/page.tsx`) provides navigation to different authentication examples:\n\n```typescript\n'use client';\nimport { Button, Heading } from '@biom3/react';\nimport NextLink from 'next/link';\n\nexport default function Home() {\n  return (<>\n      <Heading \n      size=\"medium\" \n      className=\"mb-1\">\n        Login with NextJS\n      </Heading>\n      <Button       \n      className=\"mb-1\"\n      size=\"medium\" \n      rc={<NextLink href=\"/login-with-passport\" />}>\n        Login with Passport\n      </Button> \n      <Button       \n      className=\"mb-1\"\n      size=\"medium\" \n      rc={<NextLink href=\"/login-with-etherjs\" />}>\n        Login with EtherJS\n      </Button> \n      <Button       \n      className=\"mb-1\"\n      size=\"medium\" \n      rc={<NextLink href=\"/login-with-identity-only\" />}>\n        Login with Identity only\n      </Button> \n      <Button       \n      className=\"mb-1\"\n      size=\"medium\" \n      rc={<NextLink href=\"/logout-with-redirect-mode\" />}>\n        Logout with Redirect Mode\n      </Button> \n      <Button       \n      className=\"mb-1\"\n      size=\"medium\" \n      rc={<NextLink href=\"/logout-with-silent-mode\" />}>\n        Logout with Silent Mode\n      </Button> \n  </>);\n}\n```\n\n## Implementing Standard Passport Login\n\nCreate `src/app/login-with-passport/page.tsx`:\n\n```typescript\n'use client';\n\nimport { useState } from 'react';\nimport { Button, Heading, Table, Link } from '@biom3/react';\nimport NextLink from 'next/link';\nimport { passportInstance } from '../utils/setupDefault';\n\nexport default function LoginWithPassport() {\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [accountAddress, setAccountAddress] = useState<string | null>(null);\n\n  const loginWithPassport = async () => {\n    if (!passportInstance) return;\n    try {\n      const provider = await passportInstance.connectEvm();\n      const accounts = await provider.request({ method: 'eth_requestAccounts' });\n      \n      if (accounts) {\n        setIsLoggedIn(true);\n        setAccountAddress(accounts[0] || null);\n      } else {\n        setIsLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Error connecting to Passport:', error);\n      setIsLoggedIn(false);\n    }\n  };\n\n  return (\n    <>\n      <Heading size=\"medium\" className=\"mb-1\">\n        Login with Passport\n      </Heading>\n      <Button\n        className=\"mb-1\"\n        size=\"medium\"\n        onClick={loginWithPassport}\n        disabled={isLoggedIn}>\n        {isLoggedIn ? 'Logged In' : 'Login'}\n      </Button>\n\n      <Table>\n        <Table.Head>\n          <Table.Row>\n            <Table.Cell>Attribute</Table.Cell>\n            <Table.Cell>Value</Table.Cell>\n          </Table.Row>\n        </Table.Head>\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell><b>Is Logged In</b></Table.Cell>\n            <Table.Cell>{isLoggedIn ? 'Yes' : 'No'}</Table.Cell>\n          </Table.Row>\n          <Table.Row>\n            <Table.Cell><b>Account Address</b></Table.Cell>\n            <Table.Cell>{accountAddress || 'N/A'}</Table.Cell>\n          </Table.Row>\n        </Table.Body>\n      </Table>\n      <br />\n      <Link rc={<NextLink href=\"/\" />}>Return to Examples</Link>\n    </>\n  );\n}\n```\n\n## Implementing Identity-Only Login\n\nCreate `src/app/login-with-identity-only/page.tsx`:\n\n```typescript\n'use client';\n\nimport { useState } from 'react';\nimport { Button, Heading, Table, Link } from '@biom3/react';\nimport NextLink from 'next/link';\nimport { passportInstance } from '../utils/setupDefault';\n\nexport default function LoginWithIdentityOnly() {\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\n  const [userInfo, setUserInfo] = useState<any>(null);\n\n  const loginWithIdentity = async () => {\n    if (!passportInstance) return;\n    try {\n      const userProfile = await passportInstance.connectIdentity();\n      if (userProfile) {\n        setIsLoggedIn(true);\n        setUserInfo(userProfile);\n      } else {\n        setIsLoggedIn(false);\n      }\n    } catch (error) {\n      console.error('Error connecting to Passport:', error);\n      setIsLoggedIn(false);\n    }\n  };\n\n  return (\n    <>\n      <Heading size=\"medium\" className=\"mb-1\">\n        Login with Identity Only\n      </Heading>\n      <Button\n        className=\"mb-1\"\n        size=\"medium\"\n        onClick={loginWithIdentity}\n        disabled={isLoggedIn}>\n        {isLoggedIn ? 'Logged In' : 'Login'}\n      </Button>\n\n      <Table>\n        <Table.Head>\n          <Table.Row>\n            <Table.Cell>Attribute</Table.Cell>\n            <Table.Cell>Value</Table.Cell>\n          </Table.Row>\n        </Table.Head>\n        <Table.Body>\n          <Table.Row>\n            <Table.Cell><b>Is Logged In</b></Table.Cell>\n            <Table.Cell>{isLoggedIn ? 'Yes' : 'No'}</Table.Cell>\n          </Table.Row>\n          {userInfo && (\n            <>\n              <Table.Row>\n                <Table.Cell><b>Email</b></Table.Cell>\n                <Table.Cell>{userInfo.email}</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell><b>User ID</b></Table.Cell>\n                <Table.Cell>{userInfo.sub}</Table.Cell>\n              </Table.Row>\n            </>\n          )}\n        </Table.Body>\n      </Table>\n      <br />\n      <Link rc={<NextLink href=\"/\" />}>Return to Examples</Link>\n    </>\n  );\n}\n```\n\n## Implementing Logout Modes\n\n### Redirect Mode Logout\n\nCreate `src/app/logout-with-redirect-mode/page.tsx`:\n\n```typescript\n'use client';\n\nimport { Button, Heading, Link } from '@biom3/react';\nimport NextLink from 'next/link';\nimport { passportInstance } from '../utils/setupDefault';\n\nexport default function LogoutWithRedirectMode() {\n  const logout = async () => {\n    if (!passportInstance) return;\n    try {\n      await passportInstance.logout({\n        redirectMode: true\n      });\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n\n  return (\n    <>\n      <Heading size=\"medium\" className=\"mb-1\">\n        Logout with Redirect Mode\n      </Heading>\n      <Button\n        className=\"mb-1\"\n        size=\"medium\"\n        onClick={logout}>\n        Logout\n      </Button>\n      <br />\n      <Link rc={<NextLink href=\"/\" />}>Return to Examples</Link>\n    </>\n  );\n}\n```\n\n### Silent Mode Logout\n\nCreate `src/app/logout-with-silent-mode/page.tsx`:\n\n```typescript\n'use client';\n\nimport { useState } from 'react';\nimport { Button, Heading, Table, Link } from '@biom3/react';\nimport NextLink from 'next/link';\nimport { passportInstance } from '../utils/setupDefault';\n\nexport default function LogoutWithSilentMode() {\n  const [logoutStatus, setLogoutStatus] = useState<string>('');\n\n  const logout = async () => {\n    if (!passportInstance) return;\n    try {\n      await passportInstance.logout({\n        redirectMode: false\n      });\n      setLogoutStatus('Logout successful');\n    } catch (error) {\n      console.error('Error during logout:', error);\n      setLogoutStatus('Logout failed');\n    }\n  };\n\n  return (\n    <>\n      <Heading size=\"medium\" className=\"mb-1\">\n        Logout with Silent Mode\n      </Heading>\n      <Button\n        className=\"mb-1\"\n        size=\"medium\"\n        onClick={logout}>\n        Logout\n      </Button>\n\n      {logoutStatus && (\n        <Table>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell><b>Status</b></Table.Cell>\n              <Table.Cell>{logoutStatus}</Table.Cell>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      )}\n      <br />\n      <Link rc={<NextLink href=\"/\" />}>Return to Examples</Link>\n    </>\n  );\n}\n```\n\n## Key Concepts\n\n### 1. Passport Configuration\n\nThe Passport instance is configured with your Immutable Hub credentials and environment settings. Key configuration options include:\n- Environment (SANDBOX/PRODUCTION)\n- Client ID and Publishable Key\n- Redirect URIs for login and logout\n- Scope for authentication\n\n### 2. Authentication Methods\n\nThe example demonstrates three authentication approaches:\n- **Standard Passport Login**: Full wallet connection with EVM provider\n- **Identity-Only Login**: Authentication without wallet connection\n- **EtherJS Integration**: Custom integration with EtherJS\n\n### 3. Logout Modes\n\nTwo logout modes are demonstrated:\n- **Redirect Mode**: Redirects to a specified URL after logout\n- **Silent Mode**: Performs logout without redirection\n\n### 4. State Management\n\nThe application uses React's useState hook to manage:\n- Login status\n- User information\n- Account addresses\n- Logout status\n\n## Testing the Application\n\n1. Start the development server:\n\n```bash\npnpm dev\n```\n\n2. Open http://localhost:3000 in your browser\n\n3. Test different authentication methods:\n   - Try standard Passport login to connect your wallet\n   - Test identity-only login for basic authentication\n   - Experiment with both logout modes\n\n## Common Issues and Solutions\n\n1. **Connection Fails**\n   - Verify your Immutable Hub credentials\n   - Check that you're using the correct environment\n   - Ensure redirect URIs match your Hub configuration\n\n2. **Logout Issues**\n   - For redirect mode, verify the logout redirect URI\n   - For silent mode, ensure proper error handling\n   - Check browser console for detailed error messages\n\n3. **State Management**\n   - Verify state updates after login/logout\n   - Check for proper error handling\n   - Monitor console for state-related issues\n\n## Next Steps\n\n1. Add persistent authentication state\n2. Implement protected routes\n3. Add user profile management\n4. Integrate with smart contracts\n5. Add transaction signing capabilities\n\n## Resources\n\n- [Immutable Passport Documentation](https://docs.immutable.com/docs/zkEVM/products/passport)\n- [Next.js Documentation](https://nextjs.org/docs)\n- [EtherJS Documentation](https://docs.ethers.org/) ",
    "metadata": {
      "title": "Passport Login with Next.js",
      "description": "A comprehensive example demonstrating various authentication methods using Immutable Passport in a Next.js application, including standard Passport login, EtherJS integration, identity-only authentication, and different logout modes.",
      "keywords": [
        "authentication",
        "passport",
        "web3",
        "login",
        "logout",
        "identity",
        "EtherJS",
        "Next.js",
        "React",
        "Immutable SDK"
      ],
      "programmingLanguage": "TypeScript",
      "techStack": [
        "Next.js",
        "React",
        "TypeScript",
        "Immutable SDK",
        "Passport",
        "EtherJS",
        "Biom3 UI"
      ],
      "category": "Authentication & Identity",
      "difficulty": "Beginner",
      "prerequisites": [
        "Node.js",
        "Basic understanding of React/Next.js",
        "Immutable Hub account"
      ],
      "environmentVariables": {
        "NEXT_PUBLIC_PUBLISHABLE_KEY": "Your Immutable Hub publishable API key",
        "NEXT_PUBLIC_CLIENT_ID": "Your Immutable Hub client ID"
      },
      "estimatedTime": "15 minutes",
      "features": [
        "Standard Passport login",
        "EtherJS integration",
        "Identity-only authentication",
        "Redirect mode logout",
        "Silent mode logout",
        "Account address display",
        "Login state management"
      ],
      "relatedResources": [
        "Immutable Passport Documentation",
        "Next.js Documentation",
        "EtherJS Documentation"
      ]
    }
  }
}