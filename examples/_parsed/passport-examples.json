{
  "logged-in-user-with-nextjs": {
    "tutorial": "# Passport SDK Login/Identity Example App with Next.js\n\n## Introduction\n\nThis example app demonstrates how to retrieve and display user information after a successful login using Immutable's Passport SDK in a Next.js application. The app shows how to access different types of user data including profile information, linked addresses, and authentication tokens.\n\nYou can find the source code for this example app on [GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/logged-in-user-with-nextjs).\n\n## SDK Integration Walkthrough\n\nThe example app showcases the following Passport SDK features:\n\n* Retrieving user profile information\n* Getting linked addresses for a user\n* Obtaining and verifying ID and access tokens\n\n### Retrieving User Information with Passport\n\n[View this feature on GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/logged-in-user-with-nextjs/src/app/user-info-with-passport)\n\nThis feature demonstrates how to retrieve a user's profile information after they have logged in with Passport. The user profile includes details such as email, nickname, and a unique identifier (sub).\n\n```typescript\n// Connecting with Passport and getting user info\nconst provider = await passportInstance.connectEvm();\nconst accounts = await provider.request({ method: 'eth_requestAccounts' });\n\n// Get user profile information\nconst userProfileData = await passportInstance.getUserInfo();\n```\n\nThe code above connects to the user's wallet via Passport's EVM provider, requests the user's accounts, and then fetches their profile information. The user profile data can include email, nickname, and a unique identifier (sub).\n\n### Retrieving Linked Addresses with Passport\n\n[View this feature on GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/logged-in-user-with-nextjs/src/app/linked-addresses-with-passport)\n\nThis feature shows how to retrieve all blockchain addresses linked to a user's Passport account. This is useful for applications that need to know all wallets associated with a user.\n\n```typescript\n// Connecting with Passport\nconst provider = await passportInstance.connectEvm();\nconst accounts = await provider.request({ method: 'eth_requestAccounts' });\n\n// Get linked addresses\nconst addresses = await passportInstance.getLinkedAddresses();\n```\n\nAfter connecting to the user's wallet, the application retrieves all the addresses linked to the user's Passport account. This allows applications to recognize the user across different wallets they may use.\n\n### Verifying Tokens with Next.js\n\n[View this feature on GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/logged-in-user-with-nextjs/src/app/verify-tokens-with-nextjs)\n\nThis feature demonstrates how to obtain authentication tokens (ID token and access token) which can be used to authenticate the user with backend services or verify their identity.\n\n```typescript\n// Connecting with Passport\nconst provider = await passportInstance.connectEvm();\nconst accounts = await provider.request({ method: 'eth_requestAccounts' });\n\n// Get ID token\nconst idToken = await passportInstance.getIdToken();\n\n// Get access token\nconst accessToken = await passportInstance.getAccessToken();\n```\n\nThe ID token contains claims about the identity of the user, while the access token grants access to protected resources. These tokens can be used for authentication and authorization in your application's backend services.\n\n## Running the App\n\nTo run this example app locally, follow these steps:\n\n1. Clone the repository from [GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/logged-in-user-with-nextjs)\n\n2. Set up your environment:\n   - Create an account on [Immutable Hub](https://hub.immutable.com/) if you don't have one\n   - Create an application in Immutable Hub to get your publishable key and client ID\n   - Set up your redirect URIs in the Hub dashboard\n\n3. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n\n4. Configure environment variables:\n   - Copy `.env.example` to `.env`\n   - Add your publishable key from Immutable Hub to the `.env` file\n   - Update the client ID and redirect URIs if needed\n\n5. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n\n6. Open [http://localhost:3000](http://localhost:3000) in your browser to see the application\n\n## Summary\n\nThis example app demonstrates how to integrate Immutable's Passport SDK into a Next.js application to:\n\n1. Retrieve user profile information after login\n2. Get a list of blockchain addresses linked to the user's account\n3. Obtain authentication tokens for securing backend services\n\nBy following this tutorial, you should be able to implement these features in your own application, providing a seamless blockchain authentication experience for your users. ",
    "metadata": {
      "title": "Passport User Information with Next.js",
      "description": "An example app demonstrating how to retrieve user information after logging in with Passport SDK in a Next.js application",
      "keywords": [
        "Passport",
        "Next.js",
        "Authentication",
        "Identity",
        "User Profile",
        "Linked Addresses",
        "Tokens"
      ],
      "tech_stack": [
        "Next.js",
        "React",
        "TypeScript",
        "Passport SDK",
        "Biom3"
      ],
      "product": "Passport",
      "programming_language": "TypeScript"
    }
  },
  "login-with-nextjs": {
    "tutorial": "# Passport Login with Next.js\n\n## Introduction\n\nThis example application demonstrates how to implement different authentication flows using Immutable's Passport SDK in a Next.js application. The app showcases various login methods and logout strategies, providing a comprehensive overview of Passport's authentication capabilities.\n\nYou can find the source code for this example on [GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/login-with-nextjs).\n\n## SDK Integration Walkthrough\n\nThis example app covers the following features:\n\n* Login with Passport (wallet connection)\n* Login with EthersJS (third-party provider integration)\n* Login with Identity only (without wallet connection)\n* Logout with Redirect Mode\n* Logout with Silent Mode\n\n### Login with Passport\n\nThe Passport SDK provides a simple way to authenticate users with their crypto wallet. This feature establishes a connection to the user's wallet through Passport.\n\n**[View on GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/login-with-nextjs/src/app/login-with-passport)**\n\nThis implementation:\n- Connects to a user's wallet using Passport\n- Requests account access\n- Displays the connected wallet address\n\n```tsx\n// Import the Passport instance\nimport { passportInstance } from '../utils/setupDefault';\n\n// In your component\nconst loginWithPassport = async () => {\n  if (!passportInstance) return;\n  try {\n    // Connect to the EVM provider through Passport\n    const provider = await passportInstance.connectEvm();\n    \n    // Request access to the user's accounts\n    const accounts = await provider.request({ method: 'eth_requestAccounts' });\n    \n    if (accounts) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null); \n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThe code above initiates a connection to the user's wallet using Passport's `connectEvm()` method, which returns a provider compatible with the EIP-1193 standard. Then, it requests access to the user's accounts using the `eth_requestAccounts` method, which prompts the user to approve the connection.\n\n### Login with EthersJS\n\nThis feature demonstrates how to integrate the Passport SDK with the EthersJS library, allowing you to use EthersJS functions with Passport authentication.\n\n**[View on GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/login-with-nextjs/src/app/login-with-etherjs)**\n\nThis implementation:\n- Connects to Passport\n- Creates an EthersJS provider using the Passport connection\n- Uses EthersJS to request accounts\n\n```tsx\nimport { ethers } from 'ethers';\nimport { BrowserProvider } from 'ethers';\nimport { passportInstance } from '../utils/setupDefault';\n\nconst loginWithEthersjs = async () => {\n  if (!passportInstance) return;\n\n  try {\n    // Get the Passport provider\n    const passportProvider = await passportInstance.connectEvm();\n    \n    // Create an EthersJS provider using the Passport provider\n    const web3Provider = new BrowserProvider(passportProvider);\n    \n    // Request accounts using EthersJS\n    const accounts = await web3Provider.send('eth_requestAccounts', []);\n    \n    if (accounts && accounts.length > 0) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null);\n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport with Ethers.js:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThis approach is useful when you need to use EthersJS features like sending transactions or interacting with smart contracts while maintaining Passport authentication.\n\n### Login with Identity Only\n\nThis feature demonstrates how to authenticate users with Passport without requiring a wallet connection, focusing solely on user identity.\n\n**[View on GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/login-with-nextjs/src/app/login-with-identity-only)**\n\nThis implementation:\n- Authenticates users without requiring a wallet\n- Retrieves user profile information (email, subject ID)\n\n```tsx\nimport { passportInstance } from '../utils/setupDefault';\nimport { passport } from '@imtbl/sdk';\n\nconst loginWithIdentity = async () => {\n  if (!passportInstance) return;\n  try {\n    // Login with Passport without connecting a wallet\n    const profile: passport.UserProfile | null = await passportInstance.login();\n    \n    if (profile) {\n      setIsLoggedIn(true);\n      setEmail(profile.email || 'No Email');\n      setSub(profile.sub || 'No Subject');\n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThis method is ideal for applications that need to identify users but don't require wallet interactions or blockchain transactions.\n\n### Logout with Redirect Mode\n\nThis feature demonstrates how to implement logout functionality with the redirect mode, which redirects users to a specified URI after logout.\n\n**[View on GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/login-with-nextjs/src/app/logout-with-redirect-mode)**\n\nThis implementation:\n- Configures Passport to use redirect mode for logout\n- Logs out the user and redirects to a specified URI\n\n```tsx\n// In setupLogoutRedirect.ts\nimport { config, passport } from '@imtbl/sdk';\n\nexport const passportInstance = new passport.Passport({\n  baseConfig: {\n    environment: config.Environment.SANDBOX,\n    publishableKey: process.env.NEXT_PUBLIC_PUBLISHABLE_KEY || '<YOUR_PUBLISHABLE_KEY>',\n  },\n  clientId: process.env.NEXT_PUBLIC_CLIENT_ID || '<YOUR_CLIENT_ID>',\n  redirectUri: 'http://localhost:3000/redirect',\n  logoutMode: 'redirect', // Specify redirect mode for logout\n  logoutRedirectUri: 'http://localhost:3000/logout', // URI to redirect to after logout\n  audience: 'platform_api',\n  scope: 'openid offline_access email transact',\n});\n\n// In your component\nconst logout = async () => {\n  if (!passportInstance || !isLoggedIn) return;\n  try {\n    // Logout will redirect to the specified logoutRedirectUri\n    await passportInstance.logout();\n    \n    setIsLoggedIn(false);\n    setAccountAddress(null);\n  } catch (error) {\n    console.error('Error disconnecting:', error);\n  }\n};\n```\n\nWith redirect mode, users are redirected to the specified `logoutRedirectUri` after logout, which is useful for applications that need to maintain a specific flow or redirect users to a login page after logout.\n\n### Logout with Silent Mode\n\nThis feature demonstrates how to implement logout functionality with the silent mode, which logs out the user without redirecting.\n\n**[View on GitHub](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/login-with-nextjs/src/app/logout-with-silent-mode)**\n\nThis implementation:\n- Configures Passport to use silent mode for logout\n- Logs out the user without redirecting\n\n```tsx\n// In setupLogoutSilent.ts\nimport { config, passport } from '@imtbl/sdk';\n\nexport const passportInstance = new passport.Passport({\n  baseConfig: {\n    environment: config.Environment.SANDBOX,\n    publishableKey: process.env.NEXT_PUBLIC_PUBLISHABLE_KEY || '<YOUR_PUBLISHABLE_KEY>',\n  },\n  clientId: process.env.NEXT_PUBLIC_CLIENT_ID || '<YOUR_CLIENT_ID>',\n  redirectUri: 'http://localhost:3000/redirect',\n  logoutMode: 'silent', // Specify silent mode for logout\n  logoutRedirectUri: 'http://localhost:3000/silent-logout',\n  audience: 'platform_api',\n  scope: 'openid offline_access email transact',\n});\n\n// In your component\nconst logout = async () => {\n  if (!passportInstance || !isLoggedIn) return;\n  setIsLoggingOut(true);\n  try {\n    // Logout will not redirect; it happens silently\n    await passportInstance.logout();\n    \n    setIsLoggedIn(false);\n    setAccountAddress(null);\n  } catch (error) {\n    console.error('Error disconnecting:', error);\n  } finally {\n    setIsLoggingOut(false);\n  }\n};\n```\n\nSilent mode is useful for applications that want to handle the logout flow within the application without redirecting the user away from the current view.\n\n## Running the App\n\nFollow these steps to run the example application locally:\n\n### Prerequisites\n\n1. You need to have Node.js and pnpm installed on your machine.\n2. You need to set up your environment with Immutable Hub. Visit [Immutable Hub](https://hub.immutable.com/) to create an account and set up your application.\n\n### Setup\n\n1. Clone the repository from [GitHub](https://github.com/immutable/ts-immutable-sdk).\n2. Navigate to the example directory:\n   ```bash\n   cd examples/passport/login-with-nextjs\n   ```\n3. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n4. Copy the `.env.example` file to `.env` and fill in the required environment variables:\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Required environment variables:\n   - `NEXT_PUBLIC_PUBLISHABLE_KEY`: Your publishable API key from Immutable Hub\n   - `NEXT_PUBLIC_CLIENT_ID`: Your client ID from Immutable Hub\n\n5. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n\n6. Open [http://localhost:3000](http://localhost:3000) in your browser to see the application.\n\n## Summary\n\nThis example demonstrates multiple ways to implement authentication using the Immutable Passport SDK in a Next.js application:\n\n- **Wallet-based authentication** using `connectEvm()` for direct Passport integration\n- **EthersJS integration** for using Passport with the popular Ethereum library\n- **Identity-only login** for applications that don't require wallet access\n- **Two logout modes** (redirect and silent) for different user flow needs\n\nBy combining these features, developers can implement comprehensive authentication flows that match their application requirements while leveraging the security and convenience of Immutable's Passport SDK. ",
    "metadata": {
      "title": "Passport Login with Next.js",
      "description": "Example Next.js application demonstrating various authentication flows using Immutable's Passport SDK, including wallet-based login, EthersJS integration, identity-only login, and different logout strategies.",
      "keywords": [
        "Passport",
        "authentication",
        "Next.js",
        "login",
        "logout",
        "EthersJS",
        "wallet",
        "identity"
      ],
      "tech_stack": [
        "Next.js",
        "React",
        "TypeScript",
        "Immutable SDK",
        "EthersJS"
      ],
      "product": "Passport",
      "programming_language": "TypeScript"
    }
  }
}