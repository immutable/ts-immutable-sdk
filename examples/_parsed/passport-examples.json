{
  "logged-in-user-with-nextjs": {
    "tutorial": "# Logged-in User with Next.js Tutorial\n\n## Introduction\n\nThis example application demonstrates how to access user information after a successful login with Immutable Passport in a Next.js application. The app showcases three key features:\n\n1. Retrieving user profile information\n2. Getting linked addresses\n3. Accessing and verifying tokens (ID token and access token)\n\nThis tutorial will walk you through the implementation details and show you how to integrate Immutable Passport authentication into your Next.js applications.\n\n## Prerequisites\n\nBefore you begin, make sure you have the following:\n\n- Node.js (v18 or later)\n- pnpm package manager\n- An Immutable Hub account with:\n  - A registered application\n  - A publishable API key\n  - A client ID\n  - Configured redirect URIs\n\n## Project Structure\n\nThe project follows a standard Next.js application structure:\n\n```\nlogged-in-user-with-nextjs/\n├── .env.example        # Example environment variables\n├── package.json        # Project dependencies and scripts\n├── src/\n│   ├── app/\n│   │   ├── globals.css                     # Global styles\n│   │   ├── layout.tsx                      # Root layout component\n│   │   ├── page.tsx                        # Home page with navigation\n│   │   ├── linked-addresses-with-passport/ # Linked addresses feature\n│   │   ├── user-info-with-passport/        # User info feature\n│   │   ├── verify-tokens-with-nextjs/      # Token verification feature\n│   │   ├── redirect/                       # OAuth redirect handler\n│   │   └── utils/\n│   │       ├── setupDefault.ts             # Passport SDK initialization\n│   │       └── wrapper.tsx                 # App wrapper component\n```\n\n## Code Walkthrough\n\n### SDK Integration Walkthrough\n\n#### Initializing the Passport SDK\n\nThe Passport SDK is initialized in the `src/app/utils/setupDefault.ts` file:\n\n```typescript\nimport { config, passport } from '@imtbl/sdk';\n\nexport const passportInstance = new passport.Passport({\n  baseConfig: {\n    environment: config.Environment.SANDBOX,\n    publishableKey: process.env.NEXT_PUBLIC_PUBLISHABLE_KEY || '<YOUR_PUBLISHABLE_KEY>',\n  },\n  clientId: process.env.NEXT_PUBLIC_CLIENT_ID || '<YOUR_CLIENT_ID>',\n  redirectUri: 'http://localhost:3000/redirect',\n  logoutRedirectUri: 'http://localhost:3000/logout',\n  audience: 'platform_api',\n  scope: 'openid offline_access email transact',\n});\n```\n\nThis code creates a new instance of the Passport SDK with the following configuration:\n- Environment: SANDBOX (for testing) or PRODUCTION (for live applications)\n- Publishable Key: Your API key from Immutable Hub\n- Client ID: Your application's client ID from Immutable Hub\n- Redirect URI: The URL where users will be redirected after login\n- Logout Redirect URI: The URL where users will be redirected after logout\n- Audience: The API audience (platform_api)\n- Scope: The requested permissions (openid, offline_access, email, transact)\n\n#### Handling OAuth Redirects\n\nAfter a user logs in with Passport, they are redirected to the specified redirect URI. The `src/app/redirect/page.tsx` component handles this redirect:\n\n```typescript\n'use client';\n\nimport { useEffect } from 'react';\nimport { passportInstance } from '../utils/setupDefault';\n\nexport default function Redirect() {\n  useEffect(() => {\n    if (passportInstance) {\n      passportInstance.loginCallback()\n        .then(() => {\n          console.log('Login callback successful');\n          if (window.opener) {\n            window.opener.postMessage('authComplete', window.origin);\n            window.close();\n          }\n        })\n        .catch((error) => {\n          console.error('Error in login callback:', error);\n        });\n    }\n  }, []); \n  \n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">Logged in</h1>\n    </div>\n  );\n}\n```\n\nThe `loginCallback()` method processes the authentication response and stores the necessary tokens. If the login is successful, it sends a message to the opener window and closes the popup.\n\n### Feature 1: User Information\n\nThe `src/app/user-info-with-passport/page.tsx` component demonstrates how to retrieve user profile information:\n\n```typescript\n// Login with Passport\nconst loginWithPassport = async () => {\n  if (!passportInstance) return;\n  try {\n    const provider = await passportInstance.connectEvm();\n    const accounts = await provider.request({ method: 'eth_requestAccounts' });\n    \n    // Get user information\n    const userProfileData = await passportInstance.getUserInfo();\n    \n    if (accounts) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null);\n      setUserProfile(userProfileData || null);\n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThe `getUserInfo()` method returns the user's profile information, including:\n- Email (if available)\n- Nickname (if available)\n- Sub (subject identifier)\n\n### Feature 2: Linked Addresses\n\nThe `src/app/linked-addresses-with-passport/page.tsx` component shows how to retrieve a user's linked addresses:\n\n```typescript\n// Login with Passport\nconst loginWithPassport = async () => {\n  if (!passportInstance) return;\n  try {\n    const provider = await passportInstance.connectEvm();\n    const accounts = await provider.request({ method: 'eth_requestAccounts' });\n    if (accounts) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null);\n      \n      // Get linked addresses\n      const addresses = await passportInstance.getLinkedAddresses();\n      \n      setLinkedAddresses(addresses || []);\n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThe `getLinkedAddresses()` method returns an array of blockchain addresses that are linked to the user's Passport account.\n\n### Feature 3: Token Verification\n\nThe `src/app/verify-tokens-with-nextjs/page.tsx` component demonstrates how to retrieve and display authentication tokens:\n\n```typescript\n// Login with Passport\nconst loginWithPassport = async () => {\n  if (!passportInstance) return;\n  try {\n    const provider = await passportInstance.connectEvm();\n    const accounts = await provider.request({ method: 'eth_requestAccounts' });\n    \n    // Get ID token\n    const idToken = await passportInstance.getIdToken();\n    \n    // Get access token\n    const accessToken = await passportInstance.getAccessToken();\n    \n    if (accounts) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null);\n      setIdToken(idToken || null);\n      setAccessToken(accessToken || null);\n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThe application retrieves two types of tokens:\n- ID Token: Contains user identity information\n- Access Token: Used to access protected resources\n\n## Running the App\n\nTo run the example app locally:\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n3. Copy `.env.example` to `.env` and fill in your Immutable Hub credentials:\n   ```\n   NEXT_PUBLIC_PUBLISHABLE_KEY=your_publishable_key\n   NEXT_PUBLIC_CLIENT_ID=your_client_id\n   ```\n4. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n5. Open [http://localhost:3000](http://localhost:3000) in your browser\n\n## Summary\n\nThis example application demonstrates how to integrate Immutable Passport authentication into a Next.js application and access user information after login. The key features include:\n\n1. Initializing the Passport SDK with your application credentials\n2. Handling OAuth redirects after login\n3. Retrieving user profile information\n4. Getting linked blockchain addresses\n5. Accessing and verifying authentication tokens\n\nBy following this tutorial, you can implement similar authentication flows in your own Next.js applications using Immutable Passport. ",
    "metadata": {
      "title": "Logged-in User with Next.js",
      "description": "A Next.js application demonstrating how to access user information after logging in with Immutable Passport",
      "keywords": [
        "Passport",
        "Next.js",
        "Authentication",
        "User Info",
        "Linked Addresses",
        "Tokens"
      ],
      "tech_stack": [
        "TypeScript",
        "Next.js",
        "React",
        "Biome UI"
      ],
      "category": "Passport",
      "programming_language": "TypeScript"
    }
  },
  "login-with-nextjs": {
    "tutorial": "# Login with Next.js Tutorial\n\n## Introduction\n\nThis example application demonstrates different ways to implement authentication with Immutable Passport in a Next.js application. The app showcases multiple authentication approaches:\n\n1. Login with Passport (standard EVM connection)\n2. Login with EtherJS (using Passport provider with EtherJS)\n3. Login with Identity Only (without wallet connection)\n4. Logout with Redirect Mode (redirects to a logout page)\n5. Logout with Silent Mode (logs out without page redirection)\n\nThis tutorial will walk you through the implementation details and show you how to integrate Immutable Passport authentication into your Next.js applications.\n\n## Prerequisites\n\nBefore you begin, make sure you have the following:\n\n- Node.js (v18 or later)\n- pnpm package manager\n- An Immutable Hub account with:\n  - A registered application\n  - A publishable API key\n  - A client ID\n  - Configured redirect URIs\n\n## Project Structure\n\nThe project follows a standard Next.js application structure:\n\n```\nlogin-with-nextjs/\n├── .env.example        # Example environment variables\n├── package.json        # Project dependencies and scripts\n├── src/\n│   ├── app/\n│   │   ├── globals.css                 # Global styles\n│   │   ├── layout.tsx                  # Root layout component\n│   │   ├── page.tsx                    # Home page with navigation\n│   │   ├── login-with-passport/        # Standard Passport login\n│   │   ├── login-with-etherjs/         # Login using EtherJS\n│   │   ├── login-with-identity-only/   # Login without wallet\n│   │   ├── logout-with-redirect-mode/  # Logout with redirect\n│   │   ├── logout-with-silent-mode/    # Logout without redirect\n│   │   ├── redirect/                   # OAuth redirect handler\n│   │   ├── logout/                     # Logout redirect page\n│   │   ├── silent-logout/              # Silent logout handler\n│   │   └── utils/\n│   │       ├── setupDefault.ts         # Default Passport setup\n│   │       ├── setupLogoutRedirect.ts  # Redirect logout setup\n│   │       ├── setupLogoutSilent.ts    # Silent logout setup\n│   │       └── wrapper.tsx             # App wrapper component\n```\n\n## Code Walkthrough\n\n### SDK Integration Walkthrough\n\n#### Initializing the Passport SDK\n\nThe Passport SDK is initialized in the `src/app/utils/setupDefault.ts` file:\n\n```typescript\nimport { config, passport } from '@imtbl/sdk';\n\nexport const passportInstance = new passport.Passport({\n  baseConfig: {\n    environment: config.Environment.SANDBOX,\n    publishableKey: process.env.NEXT_PUBLIC_PUBLISHABLE_KEY || '<YOUR_PUBLISHABLE_KEY>',\n  },\n  clientId: process.env.NEXT_PUBLIC_CLIENT_ID || '<YOUR_CLIENT_ID>',\n  redirectUri: 'http://localhost:3000/redirect',\n  logoutRedirectUri: 'http://localhost:3000/logout',\n  audience: 'platform_api',\n  scope: 'openid offline_access email transact',\n});\n```\n\nThis code creates a new instance of the Passport SDK with the following configuration:\n- Environment: SANDBOX (for testing) or PRODUCTION (for live applications)\n- Publishable Key: Your API key from Immutable Hub\n- Client ID: Your application's client ID from Immutable Hub\n- Redirect URI: The URL where users will be redirected after login\n- Logout Redirect URI: The URL where users will be redirected after logout\n- Audience: The API audience (platform_api)\n- Scope: The requested permissions (openid, offline_access, email, transact)\n\n#### Handling OAuth Redirects\n\nAfter a user logs in with Passport, they are redirected to the specified redirect URI. The `src/app/redirect/page.tsx` component handles this redirect:\n\n```typescript\n'use client';\n\nimport { useEffect } from 'react';\nimport { passportInstance } from '../utils/setupDefault';\n\nexport default function Redirect() {\n  useEffect(() => {\n    if (passportInstance) {\n      passportInstance.loginCallback()\n        .then(() => {\n          console.log('Login callback successful');\n          if (window.opener) {\n            window.opener.postMessage('authComplete', window.origin);\n            window.close();\n          }\n        })\n        .catch((error) => {\n          console.error('Error in login callback:', error);\n        });\n    }\n  }, []);\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen p-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">Logged in</h1>\n    </div>\n  );\n}\n```\n\nThe `loginCallback()` method processes the authentication response and stores the necessary tokens. If the login is successful, it sends a message to the opener window and closes the popup.\n\n### Feature 1: Login with Passport\n\nThe `src/app/login-with-passport/page.tsx` component demonstrates the standard way to login with Passport:\n\n```typescript\nconst loginWithPassport = async () => {\n  if (!passportInstance) return;\n  try {\n    const provider = await passportInstance.connectEvm();\n    const accounts = await provider.request({ method: 'eth_requestAccounts' });\n    if (accounts) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null);\n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport:', error);\n    setIsLoggedIn(false);\n  }\n};\n```\n\nThis approach:\n1. Calls `connectEvm()` to get a provider\n2. Requests accounts using the provider\n3. Updates the UI state based on the login result\n\n### Feature 2: Login with EtherJS\n\nThe `src/app/login-with-etherjs/page.tsx` component shows how to use Passport with EtherJS:\n\n```typescript\nconst loginWithEthersjs = useCallback(async () => {\n  if (!passportInstance) return;\n\n  try {\n    const passportProvider = await passportInstance.connectEvm();\n    const web3Provider = new BrowserProvider(passportProvider);\n    const accounts = await web3Provider.send('eth_requestAccounts', []);\n    if (accounts && accounts.length > 0) {\n      setIsLoggedIn(true);\n      setAccountAddress(accounts[0] || null);\n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport with Ethers.js:', error);\n    setIsLoggedIn(false);\n  }\n}, []);\n```\n\nThis approach:\n1. Gets the Passport provider\n2. Wraps it with EtherJS's BrowserProvider\n3. Uses EtherJS to request accounts\n4. Updates the UI state based on the login result\n\n### Feature 3: Login with Identity Only\n\nThe `src/app/login-with-identity-only/page.tsx` component demonstrates how to login without connecting a wallet:\n\n```typescript\nconst loginWithIdentiy = useCallback(async () => {\n  if (!passportInstance) return;\n  try {\n    const profile: passport.UserProfile | null = await passportInstance.login();\n    if (profile) {\n      console.log(profile.email);\n      console.log(profile.sub);\n      setIsLoggedIn(true);\n      setEmail(profile.email || 'No Email');\n      setSub(profile.sub || 'No Subject');\n    } else {\n      setIsLoggedIn(false);\n    }\n  } catch (error) {\n    console.error('Error connecting to Passport', error);\n    setIsLoggedIn(false);\n  }\n}, []);\n```\n\nThis approach:\n1. Calls `login()` instead of `connectEvm()`\n2. Receives a UserProfile object with user information\n3. Updates the UI with the user's email and subject identifier\n\n### Feature 4: Logout with Redirect Mode\n\nThe `src/app/logout-with-redirect-mode/page.tsx` component shows how to implement logout with redirection:\n\n```typescript\n// In setupLogoutRedirect.ts\nexport const passportInstance = new passport.Passport({\n  // ... other config\n  logoutMode: 'redirect',\n  logoutRedirectUri: 'http://localhost:3000/logout',\n  // ... other config\n});\n\n// In the component\nconst logout = async () => {\n  if (!passportInstance || !isLoggedIn) return;\n  try {\n    await passportInstance.logout();\n    setIsLoggedIn(false);\n    setAccountAddress(null);\n  } catch (error) {\n    console.error('Error disconnecting:', error);\n  }\n};\n```\n\nThis approach:\n1. Configures Passport with `logoutMode: 'redirect'`\n2. Specifies a `logoutRedirectUri` where the user will be redirected after logout\n3. Calls `logout()` to initiate the logout process\n4. Updates the UI state\n\n### Feature 5: Logout with Silent Mode\n\nThe `src/app/logout-with-silent-mode/page.tsx` component demonstrates how to implement silent logout:\n\n```typescript\n// In setupLogoutSilent.ts\nexport const passportInstance = new passport.Passport({\n  // ... other config\n  logoutMode: 'silent',\n  logoutRedirectUri: 'http://localhost:3000/silent-logout',\n  // ... other config\n});\n\n// In the component\nconst logout = async () => {\n  if (!passportInstance || !isLoggedIn) return;\n  setIsLoggingOut(true);\n  try {\n    await passportInstance.logout();\n    setIsLoggedIn(false);\n    setAccountAddress(null);\n  } catch (error) {\n    console.error('Error disconnecting:', error);\n  } finally {\n    setIsLoggingOut(false);\n  }\n};\n```\n\nThis approach:\n1. Configures Passport with `logoutMode: 'silent'`\n2. Specifies a `logoutRedirectUri` for the silent logout process\n3. Calls `logout()` to initiate the logout process\n4. Updates the UI state without redirecting the user\n\nThe silent logout process is handled in `src/app/silent-logout/page.tsx`:\n\n```typescript\nexport default function SilentLogout() {\n  useEffect(() => {\n    (async () => {\n      try {\n        await passportInstance.logoutSilentCallback(SILENT_LOGOUT_INITIATOR_URL);\n      } catch (error) {\n        console.error('Silent logout error:', error);\n      }\n    })();\n  }, []);\n\n  return (\n    <div>\n      <p>Logging out...</p>\n    </div>\n  );\n}\n```\n\n## Running the App\n\nTo run the example app locally:\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n3. Copy `.env.example` to `.env` and fill in your Immutable Hub credentials:\n   ```\n   NEXT_PUBLIC_PUBLISHABLE_KEY=your_publishable_key\n   NEXT_PUBLIC_CLIENT_ID=your_client_id\n   ```\n4. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n5. Open [http://localhost:3000](http://localhost:3000) in your browser\n\n## Summary\n\nThis example application demonstrates multiple ways to implement authentication with Immutable Passport in a Next.js application. The key features include:\n\n1. Standard login with Passport's EVM connection\n2. Integration with EtherJS for more advanced blockchain interactions\n3. Identity-only login without wallet connection\n4. Two logout modes: redirect and silent\n5. Proper handling of OAuth redirects and callbacks\n\nBy following this tutorial, you can implement similar authentication flows in your own Next.js applications using Immutable Passport, choosing the approach that best fits your application's needs. ",
    "metadata": {
      "title": "Login with Next.js",
      "description": "A Next.js application demonstrating different ways to login and logout with Immutable Passport",
      "keywords": [
        "Passport",
        "Next.js",
        "Authentication",
        "Login",
        "Logout",
        "EtherJS",
        "Identity"
      ],
      "tech_stack": [
        "TypeScript",
        "Next.js",
        "React",
        "Biome UI",
        "EtherJS"
      ],
      "category": "Passport",
      "programming_language": "TypeScript"
    }
  }
}