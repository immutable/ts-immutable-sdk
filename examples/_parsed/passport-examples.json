{
  "logged-in-user-with-nextjs": {
    "tutorial": "# User Information After Logging In with Passport and Next.js\n\n## Introduction\nThis example app demonstrates how to access user information after a user has logged in using Immutable's Passport service in a Next.js application. It showcases how to retrieve various user details like profile information, linked addresses, and authentication tokens after authentication.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/logged-in-user-with-nextjs)\n\n## Features Overview\n- Retrieving user profile information after authentication\n- Obtaining linked blockchain addresses for a logged-in user\n- Fetching and using authentication tokens (ID token and access token)\n\n## SDK Integration Details\n\n### **Retrieve User Profile Information**\n[Retrieve a user's profile data from Passport](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/logged-in-user-with-nextjs/src/app/user-info-with-passport/page.tsx)\n\nImplementation:\n```typescript\nconst userProfileData = await passportInstance.getUserInfo();\n```\n\nExplanation: After a successful login, this feature retrieves the user's profile information including email, nickname, and subject identifier using the `getUserInfo()` method from the Passport SDK. This data can be used to display personalized content to the user or for user identification purposes.\n\n### **Get Linked Blockchain Addresses**\n[Fetch a user's linked blockchain addresses](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/logged-in-user-with-nextjs/src/app/linked-addresses-with-passport/page.tsx)\n\nImplementation:\n```typescript\nconst addresses = await passportInstance.getLinkedAddresses();\n```\n\nExplanation: This feature retrieves all blockchain addresses linked to the user's Passport account using the `getLinkedAddresses()` method. This is particularly useful when building applications that need to interact with multiple blockchain networks or when users have multiple addresses on the same network.\n\n### **Access Authentication Tokens**\n[Retrieve authentication tokens for backend verification](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/logged-in-user-with-nextjs/src/app/verify-tokens-with-nextjs/page.tsx)\n\nImplementation:\n```typescript\n// Get ID token\nconst idToken = await passportInstance.getIdToken();\n\n// Get access token\nconst accessToken = await passportInstance.getAccessToken();\n```\n\nExplanation: This feature demonstrates how to obtain both ID and access tokens from Passport. The ID token contains claims about the user's identity, while the access token grants permissions to access protected resources. These tokens can be used for authenticating API requests and verifying user identity on the backend.\n\n## Running the App\n\n### Prerequisites\n- Node.js 18 or newer\n- pnpm\n- Immutable Hub account for API keys ([Set up in Immutable Hub](https://hub.immutable.com))\n\n### Steps to Run Locally\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/immutable/ts-immutable-sdk.git\ncd ts-immutable-sdk/examples/passport/logged-in-user-with-nextjs\n```\n\n2. Install dependencies:\n```bash\npnpm install\n```\n\n3. Create a `.env` file by copying the example:\n```bash\ncp .env.example .env\n```\n\n4. Configure your environment variables in the `.env` file:\n```\nNEXT_PUBLIC_PUBLISHABLE_KEY=<YOUR_PUBLISHABLE_KEY>\nNEXT_PUBLIC_CLIENT_ID=<YOUR_CLIENT_ID>\n```\n\n5. Start the development server:\n```bash\npnpm dev\n```\n\n6. Open [http://localhost:3000](http://localhost:3000) in your browser.\n\n## Summary\nThis example demonstrates key features of the Passport SDK for retrieving user information after authentication in a Next.js application. By implementing these features, developers can create personalized experiences for their users, interact with blockchain addresses, and secure their applications with proper authentication token handling.\n\nThe example showcases a clean integration pattern that separates concerns and maintains a clear user interface, making it easy to understand and implement in your own applications. ",
    "metadata": {
      "title": "User Information After Logging In with Next.js",
      "description": "Example app demonstrating how to retrieve user information, linked addresses, and authentication tokens after login with Passport SDK in a Next.js application",
      "keywords": [
        "Immutable",
        "SDK",
        "Passport",
        "Next.js",
        "Authentication",
        "User Profile",
        "Linked Addresses",
        "Tokens"
      ],
      "tech_stack": [
        "Next.js",
        "TypeScript",
        "React",
        "Biome UI"
      ],
      "product": "Passport",
      "programming_language": "TypeScript"
    }
  },
  "login-with-nextjs": {
    "tutorial": "# Login with NextJS Example\n\n## Introduction\nThis example app demonstrates how to implement Immutable Passport authentication in a Next.js application. It showcases different authentication methods and logout flows using the Immutable Passport SDK, providing a comprehensive guide to integrate user authentication into your Next.js dApps.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/login-with-nextjs)\n\n## Features Overview\n- Login with Passport (EVM wallet connection)\n- Login with Identity only (without wallet)\n- Login with EtherJS integration\n- Logout with redirect mode\n- Logout with silent mode\n- Login callback handling\n\n## SDK Integration Details\n\n### Login with Passport (EVM wallet connection)\n[Implementation in login-with-passport/page.tsx](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/login-with-nextjs/src/app/login-with-passport/page.tsx)\n\n```typescript\nconst provider = await passportInstance.connectEvm();\nconst accounts = await provider.request({ method: 'eth_requestAccounts' });\n```\n\n**Explanation**: This implementation connects to the user's EVM wallet through Passport. The `connectEvm()` method returns a provider that can be used to interact with the blockchain. The `eth_requestAccounts` method prompts the user to connect their wallet and returns the connected accounts.\n\n### Login with Identity only (without wallet)\n[Implementation in login-with-identity-only/page.tsx](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/login-with-nextjs/src/app/login-with-identity-only/page.tsx)\n\n```typescript\nconst profile: passport.UserProfile | null = await passportInstance.login();\n```\n\n**Explanation**: This implementation demonstrates how to authenticate a user with just their Immutable identity, without requiring wallet connection. The `login()` method returns the user's profile information including email and subject ID. This is useful for applications that need user authentication but don't require blockchain transactions.\n\n### Login with EtherJS integration\n[Implementation in login-with-etherjs/page.tsx](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/login-with-nextjs/src/app/login-with-etherjs/page.tsx)\n\n```typescript\nconst passportProvider = await passportInstance.connectEvm();\nconst web3Provider = new BrowserProvider(passportProvider);\nconst accounts = await web3Provider.send('eth_requestAccounts', []);\n```\n\n**Explanation**: This implementation shows how to integrate Passport with the popular Ethers.js library. It connects to the EVM wallet through Passport and then wraps the provider with Ethers.js's BrowserProvider, enabling you to use all of Ethers.js's functionality with Passport.\n\n### Logout with redirect mode\n[Implementation in logout-with-redirect-mode/page.tsx](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/login-with-nextjs/src/app/logout-with-redirect-mode/page.tsx)\n\n```typescript\nawait passportInstance.logout();\n```\n\n**Explanation**: This demonstrates how to implement a logout flow that redirects the user to a specified page after logout. The Passport instance is configured with `logoutMode: 'redirect'` and a `logoutRedirectUri`, causing the browser to navigate to the specified URI after successful logout.\n\n### Logout with silent mode\n[Implementation in logout-with-silent-mode/page.tsx](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/login-with-nextjs/src/app/logout-with-silent-mode/page.tsx)\n\n```typescript\nawait passportInstance.logout();\n```\n\n**Explanation**: This shows how to implement a logout flow that doesn't redirect the user away from the current page. The Passport instance is configured with `logoutMode: 'silent'`, allowing the logout process to happen in the background without disrupting the user experience.\n\n### Login callback handling\n[Implementation in redirect/page.tsx](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/login-with-nextjs/src/app/redirect/page.tsx)\n\n```typescript\npassportInstance.loginCallback()\n```\n\n**Explanation**: This handles the OAuth2 redirect that occurs after a user authenticates with Immutable Passport. The `loginCallback()` method processes the authentication response and completes the login flow. This is essential for the authentication flow to work properly.\n\n## Running the App\n\n### Prerequisites\n- Node.js (v16 or later)\n- pnpm\n- Immutable Hub account for environment setup. [Create an account here](https://hub.immutable.com/)\n\n### Setup Environment Variables\n1. Create a `.env` file in the root directory based on `.env.example`\n2. Add your Immutable Hub credentials:\n   ```\n   NEXT_PUBLIC_CLIENT_ID=<YOUR_CLIENT_ID>\n   NEXT_PUBLIC_PUBLISHABLE_KEY=<YOUR_PUBLISHABLE_KEY>\n   ```\n\n### Steps to Run\n1. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n2. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n3. Open your browser and navigate to `http://localhost:3000`\n\n## Summary\nThis example demonstrates various authentication flows using Immutable Passport in a Next.js application. You've learned how to implement login with EVM wallet connection, identity-only login, integration with Ethers.js, and different logout strategies. These patterns can be adapted to create a seamless authentication experience in your own dApps built on Immutable. ",
    "metadata": {
      "title": "Login with Next.js",
      "description": "A comprehensive demonstration of Immutable Passport authentication flows in a Next.js application, including various login methods and logout strategies.",
      "keywords": [
        "Immutable",
        "SDK",
        "Passport",
        "Authentication",
        "NextJS",
        "EVM",
        "Identity",
        "EtherJS",
        "Login",
        "Logout"
      ],
      "tech_stack": [
        "Next.js",
        "TypeScript",
        "React",
        "EtherJS",
        "Biom3 UI"
      ],
      "product": "Passport",
      "programming_language": "TypeScript"
    }
  },
  "telegram-mini-app": {
    "tutorial": "# Passport Telegram Mini App Tutorial\n\n## Introduction\n\nThis example app demonstrates how to integrate the Immutable Passport SDK within a Telegram Mini App environment. It showcases the authentication flow using Passport's device flow mechanism and basic transaction capabilities for transferring NFT assets, all within Telegram's Mini App context.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/telegram-mini-app)\n\n## Features Overview\n\n- **Device Flow Authentication** - Demonstrates how to authenticate users using Passport's device flow method, which is optimized for Telegram Mini Apps\n- **Wallet Integration** - Shows how to connect to a user's wallet and retrieve their wallet address\n- **NFT Transfers** - Demonstrates how to perform NFT transfers using the connected wallet\n\n## SDK Integration Details\n\n### Device Flow Authentication\n\n**[Device Flow Authentication](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/telegram-mini-app/app/components/Connect.tsx)**\n\nThe example implements a specialized authentication flow for Telegram Mini Apps using the device flow method:\n\n```typescript\n// Use loginWithDeviceFlow as the login method for Telegram Mini App to ensure support for all devices\nconst deviceFlowParams = await passportInstance.loginWithDeviceFlow();\n// Open the device flow url using the openLink function on the telegram sdk\nif (typeof window !== 'undefined') {\n  WebApp.openLink(deviceFlowParams.url);\n}\n// Wait for the user to complete the login before calling eth_requestAccounts\nawait passportInstance.loginWithDeviceFlowCallback(\n  deviceFlowParams.deviceCode,\n  deviceFlowParams.interval,\n);\n// Get the provider and call eth_requestAccounts to get the user's wallet address\nconst provider = await passportInstance.connectEvm();\nconst [userAddress] = await provider.request({\n  method: \"eth_requestAccounts\",\n});\nsetWalletAddress(userAddress);\n```\n\n**Explanation**: The code initiates a device flow authentication process using Passport's `loginWithDeviceFlow` method. It then utilizes Telegram's WebApp SDK to open the authentication URL. After the user completes the authentication in the external browser, the app uses the `loginWithDeviceFlowCallback` to wait for the authentication to complete, then connects to the EVM and retrieves the user's wallet address.\n\n### NFT Transfers\n\n**[NFT Transfer Implementation](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/telegram-mini-app/app/components/TransferAsset.tsx)**\n\nThe example shows how to transfer NFTs using the connected wallet:\n\n```typescript\n// Setup the contract ABI with the safeTransferFrom function for transferring assets\nconst abi = [\n  \"function safeTransferFrom(address from, address to, uint256 token_id)\",\n];\n\n// Get the signer from the provider that was initialised in the Connect flow and create a contract instance\nconst signer = await zkEvmProvider.getSigner();\nconst contract = new ethers.Contract(collectionAddress, abi, signer);\ntry {\n  // Call the transfer function on the contract\n  await contract.safeTransferFrom(walletAddress, toAddress, tokenId);\n  setTransferSuccess(true);\n} catch (error: any) {\n  setErrorMessage(error.message);\n}\n```\n\n**Explanation**: This code demonstrates how to perform an NFT transfer by using ethers.js to interact with the NFT contract. It creates a contract instance with the minimal ABI needed for the `safeTransferFrom` function, then calls this function with the user's wallet address, recipient address, and token ID to transfer the NFT.\n\n### Passport Configuration\n\n**[Passport SDK Configuration](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/telegram-mini-app/app/utils.ts)**\n\nThe example configures Passport for use in a Telegram Mini App:\n\n```typescript\nexport const passportInstance = new passport.Passport({\n  baseConfig: new ImmutableConfiguration({ environment: Environment.SANDBOX }),\n  // The client ID of the application created in Hub\n  clientId: process.env.NEXT_PUBLIC_CLIENT_ID || \"<CLIENT_ID>\",\n  // The redirect URI set in the application created in Hub\n  redirectUri: process.env.NEXT_PUBLIC_REDIRECT_URI || \"<REDIRECT_URI>\",\n  // The logout redirect URI set in the application created in Hub\n  logoutRedirectUri: process.env.NEXT_PUBLIC_LOGOUT_REDIRECT_URI || \"<LOGOUT_REDIRECT_URI>\",\n  audience: \"platform_api\",\n  scope: \"openid offline_access email transact\",\n  // Set crossSdkBridgeEnabled to enable pre-approved transactions\n  crossSdkBridgeEnabled: true,\n});\n```\n\n**Explanation**: This configuration sets up the Passport instance with the necessary parameters for operating within a Telegram Mini App environment. It includes client credentials, redirect URIs, and enables the cross-SDK bridge for pre-approved transactions.\n\n## Running the App\n\n### Prerequisites\n\n- Node.js and pnpm installed on your machine\n- An Immutable Hub account and application set up (for client credentials)\n- Basic understanding of Next.js and React\n- [Immutable Hub](https://hub.immutable.com/) account for environment setup\n\n### Steps to Run the App Locally\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/immutable/ts-immutable-sdk.git\n   cd ts-immutable-sdk/examples/passport/telegram-mini-app\n   ```\n\n2. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n\n3. Copy the environment file and fill in your credentials:\n   ```bash\n   cp .env.example .env\n   ```\n   \n4. Update the .env file with your Immutable Hub application credentials:\n   ```\n   NEXT_PUBLIC_CLIENT_ID=your_client_id\n   NEXT_PUBLIC_REDIRECT_URI=your_redirect_uri\n   NEXT_PUBLIC_LOGOUT_REDIRECT_URI=your_logout_redirect_uri\n   ```\n\n5. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n\n6. The app will be available at http://localhost:3000\n\n## Summary\n\nThis example demonstrates how to integrate Immutable Passport into a Telegram Mini App, enabling users to authenticate using the device flow method and perform NFT transfers. The integration showcases how blockchain functionality can be brought to Telegram's Mini App platform, combining the reach of Telegram with the power of Immutable's blockchain infrastructure.\n\nKey takeaways for developers:\n- Use the device flow authentication method for the best compatibility with Telegram Mini Apps\n- Leverage Telegram's WebApp SDK to handle authentication redirects\n- Configure Passport with appropriate credentials and scopes for your application\n- Implement NFT transfers using ethers.js and the connected wallet provider ",
    "metadata": {
      "title": "Passport Telegram Mini App Integration",
      "description": "A sample Telegram Mini App that demonstrates how to integrate Immutable Passport for authentication and NFT transfers within the Telegram ecosystem",
      "keywords": [
        "Immutable",
        "SDK",
        "Passport",
        "Telegram",
        "Mini App",
        "Device Flow",
        "Authentication",
        "NFT Transfer"
      ],
      "tech_stack": [
        "Next.js",
        "TypeScript",
        "React",
        "Telegram Web App SDK",
        "ethers.js",
        "Biome UI"
      ],
      "product": "Passport",
      "programming_language": "TypeScript"
    }
  },
  "wallets-connect-with-nextjs": {
    "tutorial": "# Connect Wallets with Immutable Passport in Next.js\n\n## Introduction\n\nThis example app demonstrates how to connect wallets to your application using Immutable Passport in a Next.js environment. It showcases three different approaches to wallet connection:\n\n1. Using the EIP-1193 standard\n2. Using EtherJS (ethers.js v6)\n3. Using Wagmi (v2)\n\nThese approaches show the flexibility of Immutable Passport for integrating with popular Ethereum development tools and libraries.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/wallets-connect-with-nextjs)\n\n## Features Overview\n\n- **Wallet Connection with EIP-1193**: Connect wallets using the standard Ethereum Provider API\n- **Wallet Connection with EtherJS**: Connect wallets using ethers.js BrowserProvider\n- **Wallet Connection with Wagmi**: Connect wallets using Wagmi's connector system\n- **Account Management**: Display connected account information\n- **Wallet Logout**: Properly disconnect from wallets\n\n## SDK Integration Details\n\n### Wallet Connection with EIP-1193\n\n[**EIP-1193 Provider Creation**](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-connect-with-nextjs/app/connect-with-eip1193/page.tsx#L17-L27): Initialize the Passport provider to enable EIP-1193 compatibility.\n\n**Implementation**:\n```typescript\n// fetch the Passport provider from the Passport instance\nconst [passportProvider, setPassportProvider] = useState<Provider>();\n\nuseEffect(() => {\n  const fetchPassportProvider = async () => {\n    const passportProvider = await passportInstance.connectEvm();\n    setPassportProvider(passportProvider);\n  };\n  fetchPassportProvider();\n}, []);\n```\n\n**Explanation**: This code initializes the Passport EVM provider, which implements the standard EIP-1193 interface that most Ethereum applications use. The provider is stored in component state and fetched during component initialization.\n\n[**Connecting with EIP-1193**](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-connect-with-nextjs/app/connect-with-eip1193/page.tsx#L33-L36): Request accounts to initiate wallet connection.\n\n**Implementation**:\n```typescript\n// calling eth_requestAccounts triggers the Passport login flow\nconst accounts = await passportProvider?.request({ method: 'eth_requestAccounts' });\n```\n\n**Explanation**: Using the standard EIP-1193 `request` method with `eth_requestAccounts` initiates the Passport login flow and connects the user's wallet to your application. This returns the user's Ethereum addresses.\n\n[**Event Handling**](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-connect-with-nextjs/app/connect-with-eip1193/page.tsx#L42-L45): Listen for account changes.\n\n**Implementation**:\n```typescript\n// listen to the ACCOUNTS_CHANGED event and update the accounts state when it changes\npassportProvider?.on(ProviderEvent.ACCOUNTS_CHANGED, (accounts: string[]) => {\n  setAccountsState(accounts);\n});\n```\n\n**Explanation**: This code sets up an event listener for the `ACCOUNTS_CHANGED` event, which is triggered when the user switches accounts in their wallet or disconnects. The application updates its state accordingly.\n\n### Wallet Connection with EtherJS\n\n[**EtherJS Provider Setup**](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-connect-with-nextjs/app/connect-with-etherjs/page.tsx#L17-L31): Initialize both Passport provider and EtherJS BrowserProvider.\n\n**Implementation**:\n```typescript\n// fetch the Passport provider from the Passport instance\nconst [passportProvider, setPassportProvider] = useState<Provider>();\n\nuseEffect(() => {\n  const fetchPassportProvider = async () => {\n    const passportProvider = await passportInstance.connectEvm();\n    setPassportProvider(passportProvider);\n  };\n  fetchPassportProvider();\n}, []);\n\n// create the BrowserProvider using the Passport provider\nconst browserProvider = useMemo(() => passportProvider ? new BrowserProvider(passportProvider) : undefined, [passportProvider]);\n```\n\n**Explanation**: This code initializes the Passport provider and then wraps it in ethers.js' BrowserProvider. This allows applications to use ethers.js methods and utilities with Immutable Passport.\n\n[**Connecting with EtherJS**](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-connect-with-nextjs/app/connect-with-etherjs/page.tsx#L39-L41): Request accounts through the BrowserProvider.\n\n**Implementation**:\n```typescript\n// calling eth_requestAccounts triggers the Passport login flow\nconst accounts = await browserProvider.send('eth_requestAccounts', []);\n```\n\n**Explanation**: Similar to the EIP-1193 approach, this uses the ethers.js BrowserProvider's `send` method to request accounts and trigger the Passport login flow.\n\n### Wallet Connection with Wagmi\n\n[**Wagmi Integration**](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-connect-with-nextjs/app/connect-with-wagmi/page.tsx#L17-L21): Initialize Passport for use with Wagmi.\n\n**Implementation**:\n```typescript\nconst init = async () => {\n  // calling connectEVM() makes Passport available as an option to Wagmi\n  await passportInstance.connectEvm();\n}\n```\n\n**Explanation**: This initializes the Passport provider before setting up Wagmi. Calling `connectEvm()` ensures that Passport can be used as a connector option in Wagmi.\n\n[**Wagmi Configuration**](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-connect-with-nextjs/app/connect-with-wagmi/config.ts#L5-L12): Configure Wagmi to work with Immutable's zkEVM chain.\n\n**Implementation**:\n```typescript\n// create the Wagmi config for Immutable zkEVM Testnet\nexport const config = createConfig({\n  chains: [immutableZkEvmTestnet],\n  connectors: [injected()],\n  transports: {\n    [immutableZkEvmTestnet.id]: http(),\n  },\n});\n```\n\n**Explanation**: This configures Wagmi to work with Immutable's zkEVM Testnet chain and sets up the injected connector, which will detect Passport as an available provider.\n\n[**Connecting with Wagmi**](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-connect-with-nextjs/app/connect-with-wagmi/wallet-options.tsx#L23-L28): Using Wagmi's connect function with Passport.\n\n**Implementation**:\n```typescript\nfunction passportLogin(connector:Connector) {\n  // disable button while loading\n  setLoadingState(true);\n  // connect Wagmi to Passport\n  connect({ connector });\n}\n```\n\n**Explanation**: This function connects Wagmi to the Passport connector when a user clicks the login button. Wagmi handles the connection process behind the scenes, simplifying the integration.\n\n## Running the App\n\n### Prerequisites\n\n- Node.js 18 or later\n- pnpm installed globally\n- [Immutable Hub Account](https://hub.immutable.com/) for API keys\n\n### Setup Instructions\n\n1. Clone the repository and navigate to the example app:\n   ```bash\n   git clone https://github.com/immutable/ts-immutable-sdk.git\n   cd ts-immutable-sdk/examples/passport/wallets-connect-with-nextjs\n   ```\n\n2. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n\n3. Create a `.env` file in the root directory with your Immutable credentials:\n   ```\n   NEXT_PUBLIC_PUBLISHABLE_KEY=your_publishable_key\n   NEXT_PUBLIC_CLIENT_ID=your_client_id\n   ```\n\n4. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n\n5. Navigate to `http://localhost:3000` in your browser to view the app.\n\n## Summary\n\nThis example demonstrates three different approaches to wallet connectivity using Immutable Passport in a Next.js application. It showcases the flexibility of Passport by integrating with standard Ethereum libraries and tools like EIP-1193, ethers.js, and Wagmi.\n\nBy following this example, developers can implement wallet connectivity in their applications using the method that best fits their existing technology stack or preferences. The example provides clean implementations for each method, handling login, account display, and logout functionality. ",
    "metadata": {
      "title": "Connect Wallets with Immutable Passport in Next.js",
      "description": "Demonstrates three different approaches to connecting wallets using Immutable Passport in a Next.js application: EIP-1193, EtherJS, and Wagmi.",
      "keywords": [
        "Immutable",
        "SDK",
        "Passport",
        "Wallet",
        "EIP-1193",
        "EtherJS",
        "Wagmi",
        "Web3",
        "Next.js"
      ],
      "tech_stack": [
        "Next.js",
        "TypeScript",
        "EtherJS",
        "Wagmi",
        "Tailwind CSS",
        "React"
      ],
      "product": "Passport",
      "programming_language": "TypeScript"
    }
  },
  "wallets-signing-with-nextjs": {
    "tutorial": "# Passport Message Signing Example App\n\n## Introduction\nThis example app demonstrates how to implement message signing and verification using Immutable Passport in a Next.js application. It showcases two different signing methods: EIP-712 typed data signing and ERC-191 personal message signing. The app lets users connect their wallet, sign messages, and verify the signatures on-chain, demonstrating the security and verification capabilities of Immutable Passport.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/wallets-signing-with-nextjs)\n\n## Features Overview\n- **Message Signing with EIP-712**: Sign structured typed data messages following the EIP-712 standard\n- **Message Signing with ERC-191**: Sign personal messages following the ERC-191 standard\n- **Signature Verification**: On-chain verification of signed messages using ERC-1271 standard\n\n## SDK Integration Details\n\n### Message Signing with EIP-712\n\n**Feature Name**: [Creating a Provider for EIP-712 Signing](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-signing-with-nextjs/app/sign-with-eip712/page.tsx#L39-L46)\n\n**Implementation**:\n```typescript\n// fetch the Passport provider from the Passport instance\nconst [passportProvider, setPassportProvider] = useState<Provider>();\n\nuseEffect(() => {\n  const fetchPassportProvider = async () => {\n    const passportProvider = await passportInstance.connectEvm();\n    setPassportProvider(passportProvider);\n  };\n  fetchPassportProvider();\n}, []);\n\n// create the BrowserProvider using the Passport provider\nconst browserProvider = useMemo(() => passportProvider ? new BrowserProvider(passportProvider) : undefined, [passportProvider]);\n```\n\n**Explanation**: This code initializes the Passport provider, which is essential for EIP-712 message signing. It creates a connection to the Ethereum environment using `connectEvm()` and then wraps the Passport provider with Ethers.js `BrowserProvider` to enable easy interaction with the blockchain.\n\n**Feature Name**: [Requesting User Accounts](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-signing-with-nextjs/app/sign-with-eip712/page.tsx#L55-L57)\n\n**Implementation**:\n```typescript\n// calling eth_requestAccounts triggers the Passport login flow\nconst accounts = await browserProvider.send('eth_requestAccounts', []);\n```\n\n**Explanation**: This triggers the Passport login flow, allowing users to connect their wallet. Upon successful authentication, the user's wallet address is returned, which is necessary for signing messages.\n\n**Feature Name**: [Signing a Typed Message with EIP-712](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-signing-with-nextjs/app/sign-with-eip712/page.tsx#L86-L125)\n\n**Implementation**:\n```typescript\nconst signMessage = async () => {\n  if (!browserProvider) return;\n\n  // set signed state message to pending in the view\n  setSignedMessageState('pending signature');\n\n  // fetch the signer from the BrowserProvider\n  const signer = await browserProvider.getSigner();\n\n  // set the chainId\n  const chainId = 13473; // zkEVM testnet\n\n  // set the sender address\n  const address = await signer.getAddress();\n\n  // get our message payload - including domain, message and types\n  const etherMailTypedPayload = getEtherMailTypedPayload(chainId, address)\n\n  setParams([\n    address,\n    etherMailTypedPayload\n  ])\n\n  try {\n    // attempt to sign the message, this brings up the passport popup\n    const signature = await passportProvider?.request({\n      method: 'eth_signTypedData_v4',\n      params: [address, etherMailTypedPayload],\n    })\n    \n    setSignature(signature)\n    setSignedMessageState('user successfully signed message');\n\n  } catch (error: any) {\n    // Handle user denying signature\n    if (error.code === 4001) {\n      setSignedMessageState('user declined to sign');\n    } else {\n      setSignedMessageState(`something went wrong - ${error.message}`);\n      console.log(error);\n    }\n  }\n};\n```\n\n**Explanation**: This function handles the EIP-712 typed data signing process. It creates a structured typed data payload following the EIP-712 standard, which includes domain data, message data, and type definitions. When invoked, it opens the Passport signing popup for the user to approve, and upon approval, returns a cryptographic signature that can be verified on-chain.\n\n**Feature Name**: [Verifying EIP-712 Signatures](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-signing-with-nextjs/app/sign-with-eip712/page.tsx#L136-L154)\n\n**Implementation**:\n```typescript\nconst isValidTypedDataSignature = async (\n  address: string, //The Passport wallet address returned from eth_requestAccounts\n  payload: string, //The stringified payload\n  signature: string, //The signature\n  zkEvmProvider: passport.Provider, // can be any provider, Passport or not\n) => {\n  const typedPayload: passport.TypedDataPayload = JSON.parse(payload);\n  const types = { ...typedPayload.types };\n  // @ts-ignore\n  // Ethers auto-generates the EIP712Domain type in the TypedDataEncoder, and so it needs to be removed\n  delete types.EIP712Domain;\n\n  //The hashed string\n  const digest = TypedDataEncoder.hash(\n    typedPayload.domain,\n    types,\n    typedPayload.message,\n  );\n  return isValidSignature(address, digest, signature, zkEvmProvider);\n};\n```\n\n**Explanation**: This function verifies EIP-712 signatures by computing the hash of the typed data payload using `TypedDataEncoder.hash()` and then checking if the signature is valid by calling the `isValidSignature` helper function. The verification happens on-chain using the ERC-1271 standard, which is implemented in Immutable's smart contract wallets.\n\n### Message Signing with ERC-191\n\n**Feature Name**: [Creating a Provider for ERC-191 Signing](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-signing-with-nextjs/app/sign-with-erc191/page.tsx#L36-L43)\n\n**Implementation**:\n```typescript\n// fetch the Passport provider from the Passport instance\nconst [passportProvider, setPassportProvider] = useState<Provider>();\n\nuseEffect(() => {\n  const fetchPassportProvider = async () => {\n    const passportProvider = await passportInstance.connectEvm();\n    setPassportProvider(passportProvider);\n  };\n  fetchPassportProvider();\n}, []);\n```\n\n**Explanation**: Similar to the EIP-712 implementation, this code establishes a connection to the Ethereum environment through Passport, which is necessary for ERC-191 personal message signing.\n\n**Feature Name**: [Signing a Personal Message with ERC-191](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-signing-with-nextjs/app/sign-with-erc191/page.tsx#L80-L117)\n\n**Implementation**:\n```typescript\nconst signMessage = async () => {\n  if (!browserProvider) return;\n\n  // set signed state message to pending in the view\n  setSignedMessageState('pending signature');\n\n  // fetch the signer from the BrowserProvider\n  const signer = await browserProvider.getSigner();\n\n  const address = await signer.getAddress();\n  setAddress(address);\n\n  // Create the message to be signed\n  // Please note there is a 500 character limit for the message\n  const message = 'this is a personal sign message';\n\n  setPersonalMessage(message);\n\n  try {\n    if (!signer) {\n      throw new Error('No signer found');\n    }\n\n    // attempt to sign the message, this brings up the passport popup\n    const signature = await signer.signMessage(message);\n    setSignature(signature);\n    // if successful update the signed message to successful in the view\n    setSignedMessageState('user successfully signed message');\n\n  } catch (error: any) {\n    // Handle user denying signature\n    if (error.code === -32003) {\n      setSignedMessageState('user declined to sign');\n    } else {\n      setSignedMessageState(`something went wrong - ${error.message}`);\n      console.log(error)\n    }\n  }\n};\n```\n\n**Explanation**: This function handles personal message signing using the ERC-191 standard. Unlike EIP-712, this method signs a simple text message. When invoked, it opens the Passport signing popup for the user to approve, and upon approval, returns a cryptographic signature that can be verified on-chain.\n\n**Feature Name**: [Verifying ERC-191 Signatures](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-signing-with-nextjs/app/sign-with-erc191/page.tsx#L124-L132)\n\n**Implementation**:\n```typescript\nconst isValidERC191Signature = async (\n  address: string, // The wallet address returned from eth_requestAccounts\n  payload: string, // The message string\n  signature: string, // The signature\n  zkEvmProvider: passport.Provider, // Can be any provider, Passport or not\n) => {\n  const digest = hashMessage(payload);\n\n  return isValidSignature(address, digest, signature, zkEvmProvider);\n};\n```\n\n**Explanation**: This function verifies ERC-191 signatures by hashing the message using `hashMessage()` from ethers.js and then checking if the signature is valid by calling the `isValidSignature` helper function. As with EIP-712, the verification happens on-chain using the ERC-1271 standard.\n\n### Signature Verification Helper\n\n**Feature Name**: [On-Chain Signature Verification](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-signing-with-nextjs/app/utils/isValidSignature.ts#L10-L24)\n\n**Implementation**:\n```typescript\nexport const isValidSignature = async (\n  address: string, // The Passport wallet address returned from eth_requestAccounts\n  digest: string | Uint8Array,\n  signature: string,\n  zkEvmProvider: Provider, // can be any provider, Passport or not\n) => {\n  const contract = new Contract(\n    address,\n    ['function isValidSignature(bytes32, bytes) public view returns (bytes4)'],\n    new BrowserProvider(zkEvmProvider),\n  );\n\n  const isValidSignatureHex = await contract.isValidSignature(digest, signature);\n  return isValidSignatureHex === ERC_1271_MAGIC_VALUE;\n};\n```\n\n**Explanation**: This helper function is used by both EIP-712 and ERC-191 verification to validate signatures on-chain. It uses the ERC-1271 standard interface implemented on Immutable smart contract wallets to verify if a signature is valid for a given message digest. The function returns true if the signature is valid, as indicated by the wallet returning the `ERC_1271_MAGIC_VALUE` constant.\n\n## Running the App\n\n### Prerequisites\n- Node.js v16 or later\n- pnpm v8 or later\n- Immutable Hub account for API keys ([Get started with Immutable Hub](https://hub.immutable.com/))\n- A modern web browser\n\n### Setup and Installation\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/immutable/ts-immutable-sdk.git\n   cd ts-immutable-sdk/examples/passport/wallets-signing-with-nextjs\n   ```\n\n2. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n\n3. Create a `.env` file in the project root by copying `.env.example`:\n   ```bash\n   cp .env.example .env\n   ```\n\n4. Add your Immutable API keys to the `.env` file:\n   ```\n   NEXT_PUBLIC_PUBLISHABLE_KEY=your_publishable_key\n   NEXT_PUBLIC_CLIENT_ID=your_client_id\n   ```\n\n5. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n\n6. Open [http://localhost:3000](http://localhost:3000) in your browser to see the app in action.\n\n### Using the App\n\n1. Click the \"Passport Login\" button to connect your wallet through Passport.\n2. Once connected, choose either \"Sign message with EIP-712\" or \"Sign message with ERC-191\".\n3. Click the \"Sign Message\" button to initiate the signing process.\n4. Approve the signature request in the Passport popup.\n5. After signing, click \"Verify Signature\" to validate that the signature is legitimate.\n6. Use the \"Passport Logout\" button to disconnect your wallet when finished.\n\n## Summary\n\nThis example app demonstrates how to implement secure message signing and verification using Immutable Passport in a Next.js application. It showcases two different signing standards (EIP-712 and ERC-191) and demonstrates how to verify signatures on-chain using the ERC-1271 standard.\n\nThe key takeaways from this example are:\n- Passport provides a secure and user-friendly way to handle message signing\n- Both structured data (EIP-712) and simple text (ERC-191) messages can be signed\n- Signatures can be cryptographically verified on-chain\n- Smart contract wallets used by Passport implement the ERC-1271 interface for signature verification\n\nThese features provide a foundation for implementing secure, non-custodial authentication, authorizations, and user interactions in your decentralized applications. ",
    "metadata": {
      "title": "Passport Message Signing with Next.js",
      "description": "Example demonstrating how to implement and verify message signing using EIP-712 and ERC-191 standards with Immutable Passport in a Next.js application",
      "keywords": [
        "Immutable",
        "SDK",
        "Passport",
        "Message Signing",
        "EIP-712",
        "ERC-191",
        "ERC-1271",
        "Next.js",
        "TypeScript"
      ],
      "tech_stack": [
        "Next.js",
        "React",
        "TypeScript",
        "ethers.js",
        "Biom3 UI",
        "Tailwind CSS"
      ],
      "product": "Passport",
      "programming_language": "TypeScript"
    }
  },
  "wallets-transactions-with-nextjs": {
    "tutorial": "# Wallet Transactions with Next.js\n\n## Introduction\nThis example app demonstrates how to send transactions using Immutable Passport with a Next.js application. It shows how to connect to a user's wallet and send NFT transfers on the Immutable zkEVM network.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/passport/wallets-transactions-with-nextjs)\n\n## Features Overview\n- **Connecting to Ethereum wallets** - Establishing a connection to a user's Ethereum wallet using Passport\n- **Sending NFT transactions** - Transferring NFT ownership using smart contract interactions\n- **Transaction feedback** - Handling transaction responses and errors\n\n## SDK Integration Details\n\n### **Connecting to Ethereum wallets**: A feature that allows users to connect their wallet through Passport.\n[Source Code](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-transactions-with-nextjs/src/transaction.ts#L4-L7)\n\n**Implementation:**\n```typescript\nconst provider = await passportInstance.connectEvm();\n```\n\n**Explanation:**\nThe application uses the `connectEvm()` method from the Passport SDK to establish a connection to the user's Ethereum wallet. This method returns a provider that adheres to the EIP-1193 standard, which can be used to interact with the Ethereum blockchain.\n\n### **Sending NFT transactions**: A feature that demonstrates how to transfer an NFT using a smart contract.\n[Source Code](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-transactions-with-nextjs/src/transaction.ts#L8-L40)\n\n**Implementation:**\n```typescript\nconst browserProvider = new BrowserProvider(provider);\nconst signer = await browserProvider.getSigner();\n\nconst [userAddress] = await provider.request({ method: 'eth_requestAccounts' });\nconst toAddress = process.env.NEXT_PUBLIC_TO_ADDRESS ?? '0x000';\nconst erc721Address = process.env.NEXT_PUBLIC_ERC721_ADDRESS ?? '0x000';\nconst tokenId = process.env.NEXT_PUBLIC_TOKEN_ID ?? '0';\n\n// The Application Binary Interface (ABI) of a contract\nconst abi = ['function safeTransferFrom(address from, address to, uint256 tokenId)'];\n\n// Create contract instance\nconst contract = new ethers.Contract(erc721Address, abi, signer);\nlet tx;\n// Send the transaction\ntry {\n  tx = await contract.safeTransferFrom(userAddress, toAddress, tokenId);\n} catch (error: any) {\n  // Handle user denying signature\n  if (error.code === 4001) {\n    console.error('user denied signature');\n  } else {\n    console.error('something went wrong: ', error.message);\n  }\n}\n```\n\n**Explanation:**\nAfter connecting to the user's wallet, the application:\n1. Creates an ethers.js BrowserProvider from the EIP-1193 provider\n2. Gets a signer from the provider to create signed transactions\n3. Retrieves the user's Ethereum address\n4. Defines the contract ABI (function interface) for the ERC-721 NFT standard\n5. Creates a contract instance using ethers.js\n6. Calls the `safeTransferFrom` function to transfer the NFT from the user's address to the destination address\n7. Implements error handling for user rejection and other potential issues\n\n### **Transaction feedback**: A feature that handles transaction completion and status.\n[Source Code](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/passport/wallets-transactions-with-nextjs/src/transaction.ts#L42-L52)\n\n**Implementation:**\n```typescript\n// Wait for the transaction to complete\n// On Immutable zkEVM, this takes 1-8 seconds in 99.9% of cases\nconst receipt = await tx.wait();\n\nswitch (receipt.status) {\n  // Failure\n  case 0:\n    break;\n  // Success\n  case 1:\n    break;\n  default:\n    break;\n}\n```\n\n**Explanation:**\nThe application waits for the transaction to be mined using the `wait()` method, which returns a transaction receipt. It then checks the status of the transaction (0 for failure, 1 for success) and can perform different actions based on the outcome. This pattern allows developers to provide feedback to users about their transaction status.\n\n## Running the App\n\n### Prerequisites\n- Node.js 18.x or later\n- An Immutable Hub account for obtaining your API keys\n- Set up your environment variables (see below)\n- A testnet NFT collection created on [Immutable Hub](https://hub.immutable.com)\n\n### Environment Setup\n1. Copy `.env.example` to `.env.local` and fill in the following details:\n   ```\n   NEXT_PUBLIC_PUBLISHABLE_KEY=<your publishable key from Hub>\n   NEXT_PUBLIC_CLIENT_ID=<your client ID from Hub>\n   NEXT_PUBLIC_TO_ADDRESS=<recipient address for the NFT>\n   NEXT_PUBLIC_ERC721_ADDRESS=<your ERC721 contract address>\n   NEXT_PUBLIC_TOKEN_ID=<token ID to transfer>\n   ```\n\n### Running Locally\n1. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n\n2. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n\n3. Open your browser and navigate to [http://localhost:3000](http://localhost:3000)\n\n4. Click the \"Send Transaction\" button to initiate an NFT transfer\n\n## Summary\nThis example demonstrates how to integrate Immutable Passport's wallet connection and transaction capabilities in a Next.js application. You've learned how to:\n\n- Connect to a user's Ethereum wallet using Passport\n- Create and send NFT transfer transactions using ethers.js and the Passport provider\n- Handle transaction responses and error conditions\n- Wait for transactions to complete and process their status\n\nThis pattern can be extended to support various other transaction types on Immutable zkEVM, such as minting NFTs, trading assets, or interacting with any smart contract. ",
    "metadata": {
      "title": "Wallet Transactions with Next.js",
      "description": "A Next.js application demonstrating how to connect to wallets and send NFT transactions using Immutable Passport",
      "keywords": [
        "Immutable",
        "SDK",
        "Passport",
        "Wallet",
        "Transactions",
        "NFT",
        "Transfer",
        "Next.js"
      ],
      "tech_stack": [
        "Next.js",
        "TypeScript",
        "Ethers.js",
        "TailwindCSS"
      ],
      "product": "Passport",
      "programming_language": "TypeScript"
    }
  }
}