{
  "sdk-connect-with-nextjs": {
    "tutorial": "# Connecting to MetaMask with Checkout SDK in Next.js\n\n## Introduction\nThis example app demonstrates how to connect your Next.js application to MetaMask using the Immutable Checkout SDK. It showcases how to initialize the SDK, create a provider for MetaMask, and establish a wallet connection with or without requesting permissions.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/checkout/sdk-connect-with-nextjs)\n\n## Features Overview\n- Get list of supported wallets\n- Create a MetaMask provider using Checkout SDK\n- Connect to MetaMask with permission requests\n- Connect to MetaMask without permission requests\n- Validate provider and connection status\n- Get connection status\n\n## SDK Integration Details\n\n### **Get Wallet Allow List**: [Retrieve supported wallets](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-connect-with-nextjs/src/app/connect-with-metamask/page.tsx#L28-L31)\n```typescript\n// Get the list of default supported providers\nconst type = checkout.WalletFilterTypes.ALL;\nconst allowListRes = await checkoutSDK.getWalletAllowList({ type });\n```\n**Explanation**: This code retrieves a list of all wallets supported by the Checkout SDK. The `WalletFilterTypes.ALL` parameter ensures all available wallet providers are returned in the response.\n\n### **Create MetaMask Provider**: [Initialize wallet provider](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-connect-with-nextjs/src/app/connect-with-metamask/page.tsx#L35-L38)\n```typescript\n// Create a provider given one of the default wallet provider names\nconst walletProviderName = checkout.WalletProviderName.METAMASK;\nconst providerRes = await checkoutSDK.createProvider({ walletProviderName });\n```\n**Explanation**: This code creates a provider specifically for MetaMask. The SDK handles the interaction with the browser extension and returns a provider object that can be used for subsequent operations.\n\n### **Validate Provider**: [Check provider validity](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-connect-with-nextjs/src/app/connect-with-metamask/page.tsx#L43-L45)\n```typescript\n// Check if the provider if a BrowserProvider\nconst isProviderRes = checkout.Checkout.isWrappedBrowserProvider(providerRes.provider);\n```\n**Explanation**: This function validates that the provider returned by the SDK is a proper BrowserProvider that can be used for blockchain interactions. This validation is essential before attempting to connect to a network.\n\n### **Connect with Permissions**: [Connect with wallet permissions](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-connect-with-nextjs/src/app/connect-with-metamask/page.tsx#L50-L55)\n```typescript\n// Get the current network information\n// Pass through requestWalletPermissions to request the user's wallet permissions\nconst connectRes = await checkoutSDK.connect({ \n  provider: providerRes.provider,\n  requestWalletPermissions: true,\n});\n```\n**Explanation**: This code establishes a connection to the wallet while explicitly requesting permissions from the user. This approach is useful when your application needs specific permissions to interact with the user's wallet.\n\n### **Connect without Permissions**: [Connect without additional permissions](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-connect-with-nextjs/src/app/connect-with-metamask/page.tsx#L59-L63)\n```typescript\n// Get the current network information\nconst connectRes = await checkoutSDK.connect({\n  provider: providerRes.provider\n});\n```\n**Explanation**: This code connects to the wallet without explicitly requesting permissions. This is suitable for applications that only need basic wallet interactions.\n\n### **Check Connection Status**: [Verify connection status](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-connect-with-nextjs/src/app/connect-with-metamask/page.tsx#L67-L70)\n```typescript\n// Check if the provider if a BrowserProvider\nconst isConnectedRes = await checkoutSDK.checkIsWalletConnected({\n  provider: providerRes.provider\n});\n```\n**Explanation**: This function verifies if the wallet is connected and returns the connection status along with the wallet address. This is useful for displaying the user's wallet status in the UI.\n\n## Running the App\n\n### Prerequisites\n- Node.js 18.x or higher\n- PNPM package manager\n- MetaMask browser extension installed\n- [Immutable Hub](https://hub.immutable.com/) account for obtaining a publishable API key\n\n### Setup Instructions\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/immutable/ts-immutable-sdk.git\n   cd ts-immutable-sdk/examples/checkout/sdk-connect-with-nextjs\n   ```\n\n2. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n\n3. Create environment file:\n   ```bash\n   cp .env.example .env\n   ```\n\n4. Add your Immutable Hub publishable key to the `.env` file:\n   ```\n   NEXT_PUBLIC_PUBLISHABLE_KEY=your_publishable_key_here\n   ```\n\n5. Run the development server:\n   ```bash\n   pnpm dev\n   ```\n\n6. Open [http://localhost:3000](http://localhost:3000) in your browser to view the app.\n\n## Summary\nThis example demonstrates how to integrate Immutable's Checkout SDK with a Next.js application to connect to MetaMask. The app showcases different connection methods (with and without permissions), provider validation, and retrieving wallet information. It provides a foundation for building more complex blockchain applications that require wallet connectivity.\n\nKey takeaways:\n- The Checkout SDK simplifies wallet connection in Next.js applications\n- You can choose different connection approaches based on your permission requirements\n- The SDK provides helpful utilities for validating connections and retrieving wallet information\n- The integration works seamlessly with React's state management for displaying connection status ",
    "metadata": {
      "title": "Connect with MetaMask in Next.js",
      "description": "A Next.js example showing how to connect to MetaMask using the Immutable Checkout SDK with and without permission requests",
      "keywords": [
        "Immutable",
        "SDK",
        "Checkout",
        "MetaMask",
        "Wallet Connect",
        "Next.js",
        "Web3"
      ],
      "tech_stack": [
        "Next.js",
        "TypeScript",
        "MetaMask",
        "Biome UI",
        "Ethers.js"
      ],
      "product": "Checkout",
      "programming_language": "TypeScript"
    }
  },
  "sdk-gas-estimation-with-nextjs": {
    "tutorial": "# Gas Estimation with Checkout SDK\n\n## Introduction\nThis example app demonstrates how to use the Immutable Checkout SDK to estimate gas fees for different transaction types. It shows how to connect to MetaMask and use the SDK's gas estimation features to display estimated costs for swap and bridge-to-L2 transactions in a user-friendly Next.js application.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/checkout/sdk-gas-estimation-with-nextjs)\n\n## Features Overview\n- Gas estimation for Swap transactions\n- Gas estimation for Bridge-to-L2 transactions\n- MetaMask wallet connection\n\n## SDK Integration Details\n\n### **Gas Estimation**: [Estimating gas fees for different transaction types](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-gas-estimation-with-nextjs/src/app/gas-estimation-with-metamask/page.tsx#L31-L36)\n#### Implementation\n```typescript\n// Get gas estimate for Swap type of transaction\nconst swapEstimate = await checkoutSDK.gasEstimate({ gasEstimateType: checkout.GasEstimateType.SWAP });\n// Get gas estimate for Bridge type of transaction\nconst bridgeEstimate = await checkoutSDK.gasEstimate({ gasEstimateType: checkout.GasEstimateType.BRIDGE_TO_L2 });\n```\n\n#### Explanation\nThe Checkout SDK provides a `gasEstimate` method that allows you to estimate gas fees for different transaction types. In this example, the app estimates fees for both Swap and Bridge-to-L2 transactions by specifying the transaction type using the `GasEstimateType` enum. The results provide detailed fee breakdowns including total fees, approval fees, bridge fees, and more, all denominated in the appropriate token.\n\n### **Wallet Connection**: [Connecting to MetaMask wallet](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-gas-estimation-with-nextjs/src/app/gas-estimation-with-metamask/page.tsx#L21-L31)\n#### Implementation\n```typescript\n// Create a provider given one of the default wallet provider names\nconst walletProviderName = checkout.WalletProviderName.METAMASK;\nconst providerRes = await checkoutSDK.createProvider({\n  walletProviderName,\n});\n\n// Pass through requestWalletPermissions to request the user's wallet permissions\nawait checkoutSDK.connect({\n  provider: providerRes.provider,\n  requestWalletPermissions: true,\n});\n```\n\n#### Explanation\nThe app demonstrates connecting to MetaMask by first creating a provider using the `createProvider` method with the `METAMASK` wallet provider name. It then establishes a connection using the `connect` method, requesting wallet permissions from the user. This process is required before interacting with the wallet and performing gas estimations.\n\n### **Displaying Gas Estimates**: [Rendering fee details in a user-friendly format](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-gas-estimation-with-nextjs/src/app/gas-estimation-with-metamask/page.tsx#L69-L96)\n#### Implementation\n```typescript\n<Table.Row>\n  <Table.Cell><b>Swap Gas Estimate</b></Table.Cell>\n  <Table.Cell>\n    {swapGasEstimate ? (\n      <>\n        <div><b>Total Fees:</b> {swapGasEstimate.fees.totalFees ? hexToDecimal(toBeHex(swapGasEstimate.fees.totalFees)) : 'N/A'}</div>\n        <div><b>Token:</b> {swapGasEstimate.fees.token?.name} ({swapGasEstimate.fees.token?.symbol})</div>\n      </>\n    ) : ' (not estimated)'}\n  </Table.Cell>\n</Table.Row>\n<Table.Row>\n  <Table.Cell><b>Bridge to L2 Gas Estimate</b></Table.Cell>\n  <Table.Cell>\n    {bridgeGasEstimate ? (\n      <>\n        <div><b>Source Chain Gas:</b> {hexToDecimal(toBeHex(bridgeGasEstimate.fees.sourceChainGas))}</div>\n        <div><b>Approval Fee:</b> {hexToDecimal(toBeHex(bridgeGasEstimate.fees.approvalFee))}</div>\n        <div><b>Bridge Fee:</b> {hexToDecimal(toBeHex(bridgeGasEstimate.fees.bridgeFee))}</div>\n        <div><b>IMTBL Fee:</b> {hexToDecimal(toBeHex(bridgeGasEstimate.fees.imtblFee))}</div>\n        <div><b>Total Fees:</b> {hexToDecimal(toBeHex(bridgeGasEstimate.fees.totalFees))}</div>\n        <div><b>Token:</b> {bridgeGasEstimate.token?.name} ({bridgeGasEstimate.token?.symbol})</div>\n      </>\n    ) : ' (not estimated)'}\n  </Table.Cell>\n</Table.Row>\n```\n\n#### Explanation\nThe app presents the gas estimation results in a well-structured table, formatting the numeric values and providing a clear breakdown of the different fee components. The implementation uses a utility function `hexToDecimal` to convert hexadecimal values to decimal format for better readability. The display adapts to show different information based on the type of transaction estimated.\n\n## Running the App\n\n### Prerequisites\n- Node.js 16 or higher\n- pnpm\n- [Immutable Hub account](https://hub.immutable.com/) for environment setup\n\n### Steps to Run Locally\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/immutable/ts-immutable-sdk.git\n   cd ts-immutable-sdk\n   ```\n\n2. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n\n3. Navigate to the example app directory:\n   ```bash\n   cd examples/checkout/sdk-gas-estimation-with-nextjs\n   ```\n\n4. Copy the environment file and configure it (if required):\n   ```bash\n   cp .env.example .env\n   ```\n\n5. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n\n6. Open your browser and navigate to http://localhost:3000\n\n## Summary\nThis example demonstrates how to use the Immutable Checkout SDK's gas estimation capabilities to provide users with transparent fee information before completing transactions. The app shows how to estimate fees for both Swap and Bridge-to-L2 transaction types and presents the information in a user-friendly format. This functionality is crucial for improving user experience by allowing users to understand transaction costs before proceeding.\n\nKey takeaways include:\n- How to connect to MetaMask using the Checkout SDK\n- How to request gas estimates for different transaction types\n- How to parse and display gas estimation data in a user interface ",
    "metadata": {
      "title": "Gas Estimation with Next.js",
      "description": "A Next.js application demonstrating how to use the Immutable Checkout SDK to estimate gas fees for swap and bridge-to-L2 transactions",
      "keywords": [
        "Immutable",
        "SDK",
        "Gas Estimation",
        "MetaMask",
        "Checkout",
        "Next.js",
        "Swap",
        "Bridge"
      ],
      "tech_stack": [
        "Next.js",
        "React",
        "TypeScript",
        "ethers.js",
        "Biom3 Design System"
      ],
      "product": "Checkout",
      "programming_language": "TypeScript"
    }
  },
  "sdk-switch-network-with-nextjs": {
    "tutorial": "# Switch Network with Next.js\n\n## Introduction\nThis example app demonstrates how to use the Immutable Checkout SDK to connect to a wallet provider (MetaMask) and switch between different blockchain networks. It showcases the network switching capabilities of the SDK in a simple Next.js application.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/checkout/sdk-switch-network-with-nextjs)\n\n## Features Overview\n- Connect to a wallet using MetaMask\n- Get network information\n- Get supported networks list\n- Switch between different blockchain networks (Sepolia, Immutable zkEVM Testnet)\n\n## SDK Integration Details\n\n### **Get Network Information**: [Get information about the currently connected network](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-switch-network-with-nextjs/src/app/switch-with-metamask/page.tsx#L20-L37)\n#### Implementation\n```typescript\n// Get the network details\nconst info = await checkoutSDK.getNetworkInfo({ provider });\n```\n#### Explanation\nThe `getNetworkInfo` method is used to retrieve details about the currently connected network, including the chain name, chain ID, and native currency. This information is then displayed in the UI to give users visibility into which network they are currently connected to.\n\n### **Create and Connect MetaMask Provider**: [Connect to MetaMask wallet with permissions](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-switch-network-with-nextjs/src/app/switch-with-metamask/page.tsx#L39-L62)\n#### Implementation\n```typescript\n// Create a provider given one of the default wallet provider names\nconst walletProviderName = checkout.WalletProviderName.METAMASK;\nconst providerRes = await checkoutSDK.createProvider({\n  walletProviderName,\n});\n\n// Get the current network information\n// Pass through requestWalletPermissions to request the user's wallet permissions\nconst connectRes = await checkoutSDK.connect({\n  provider: providerRes.provider,\n  requestWalletPermissions: true,\n});\n```\n#### Explanation\nThis code creates a MetaMask provider using the Checkout SDK and then connects to it with permission requests. The `requestWalletPermissions` flag ensures the user is prompted to grant the necessary permissions for the application to interact with their wallet.\n\n### **Check Wallet Connection**: [Verify if the wallet is connected](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-switch-network-with-nextjs/src/app/switch-with-metamask/page.tsx#L64-L68)\n#### Implementation\n```typescript\n// Check if the provider if a BrowserProvider\nconst isConnectedRes = await checkoutSDK.checkIsWalletConnected({\n  provider: providerRes.provider,\n});\n```\n#### Explanation\nThe `checkIsWalletConnected` method checks if the wallet is connected to the application. This is useful for determining whether to show the connection UI or the network switching UI.\n\n### **Get Supported Networks**: [Retrieve all supported networks](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-switch-network-with-nextjs/src/app/switch-with-metamask/page.tsx#L70-L74)\n#### Implementation\n```typescript\n// Get the list of default supported networks\nconst type = checkout.NetworkFilterTypes.ALL;\nconst supportedNetworks = await checkoutSDK.getNetworkAllowList({ type });\n```\n#### Explanation\nThis code retrieves a list of all networks supported by the Immutable SDK. The `NetworkFilterTypes.ALL` parameter ensures that all networks (both mainnet and testnet) are included in the results.\n\n### **Switch Network**: [Change to a different blockchain network](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-switch-network-with-nextjs/src/app/switch-with-metamask/page.tsx#L82-L93)\n#### Implementation\n```typescript\n// Switch to Immutable zkEVM Testnet and update the provider\nconst chainId = checkout.ChainId.IMTBL_ZKEVM_TESTNET;\nconst switchResponse = await checkoutSDK.switchNetwork({ provider: connectedProvider, chainId });\n\n// Update the provider\nsetConnectedProvider(switchResponse.provider);\n```\n#### Explanation\nThe `switchNetwork` method is used to change the connected network to a different blockchain. In this example, it's switching to the Immutable zkEVM Testnet. After switching, it's important to update the provider reference as returned by the switchNetwork method.\n\n## Running the App\n\n### Prerequisites\n- Node.js (v16 or later)\n- pnpm installed\n- MetaMask browser extension\n- [Immutable Hub account](https://hub.immutable.com/) for environment setup\n\n### Steps to Run Locally\n1. Clone the repository\n   ```bash\n   git clone https://github.com/immutable/ts-immutable-sdk.git\n   cd ts-immutable-sdk\n   ```\n\n2. Install dependencies\n   ```bash\n   pnpm install\n   ```\n\n3. Navigate to the example directory\n   ```bash\n   cd examples/checkout/sdk-switch-network-with-nextjs\n   ```\n\n4. Start the development server\n   ```bash\n   pnpm dev\n   ```\n\n5. Open [http://localhost:3000](http://localhost:3000) in your browser\n\n6. Click \"Connect MetaMask\" to connect your wallet\n\n7. After connecting, you can use the buttons to switch between Sepolia and Immutable zkEVM Testnet networks\n\n## Summary\nThis example demonstrates how to integrate the Immutable Checkout SDK into a Next.js application to connect to MetaMask and switch between different blockchain networks. It shows how to get network information, check connection status, list supported networks, and switch between networks using the SDK's methods. This functionality is essential for dApps that need to ensure users are on the correct network for their application's functionality. ",
    "metadata": {
      "title": "Switch Network with Next.js",
      "description": "A Next.js application that demonstrates how to use the Immutable Checkout SDK to connect to MetaMask and switch between different blockchain networks.",
      "keywords": [
        "Immutable",
        "SDK",
        "Checkout",
        "MetaMask",
        "Network Switching",
        "Next.js",
        "Browser Provider"
      ],
      "tech_stack": [
        "Next.js",
        "React",
        "TypeScript",
        "Biom3",
        "Ethers"
      ],
      "product": "Checkout",
      "programming_language": "TypeScript"
    }
  },
  "sdk-wallet-balance-with-nextjs": {
    "tutorial": "# Wallet Balance with Next.js Tutorial\n\n## Introduction\nThis example app demonstrates how to retrieve and display token balances using the Immutable Checkout SDK integrated with a Next.js application. The app showcases how to connect to MetaMask, view token balances, and retrieve token details such as name, symbol, and decimals.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/checkout/sdk-wallet-balance-with-nextjs)\n\n## Features Overview\n- Token balance retrieval (both native and ERC-20 tokens)\n- Getting all balances for a connected wallet\n- Retrieving token information (name, symbol, decimals)\n- Getting the list of supported tokens\n- Connecting with MetaMask\n\n## SDK Integration Details\n\n### **Token Allow List**: [Retrieving the list of supported tokens](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-wallet-balance-with-nextjs/src/app/wallet-balance-with-metamask/page.tsx#L56-L60)\nThe application retrieves the list of supported tokens on the current network:\n\n```typescript\nconst tokenType = await checkout.TokenFilterTypes.ALL;\nconst chainId = Number((await connectRes.provider.getNetwork()).chainId) as checkout.ChainId ?? checkout.ChainId.IMTBL_ZKEVM_TESTNET\nconst tokenAllowList = await checkoutSDK.getTokenAllowList({ type: tokenType, chainId });\n```\n\nThis code retrieves all supported tokens for the connected chain, allowing the app to display them in a dropdown selector where users can view token details.\n\n### **Retrieving All Balances**: [Getting all token balances for a wallet](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-wallet-balance-with-nextjs/src/app/wallet-balance-with-metamask/page.tsx#L76-L79)\nOnce connected to a wallet, the app can retrieve all balances at once:\n\n```typescript\nconst chainId = Number((await connectedProvider.provider.getNetwork()).chainId) as checkout.ChainId ?? checkout.ChainId.IMTBL_ZKEVM_TESTNET\nconst allBalancesResponse = await checkoutSDK.getAllBalances({ provider: connectedProvider, walletAddress, chainId });\n```\n\nThis returns an array of token balances that can be displayed in the UI. The app shows both the raw balance (in hex) and the formatted balance with the correct number of decimals.\n\n### **Token Information Retrieval**: [Getting token details](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-wallet-balance-with-nextjs/src/app/wallet-balance-with-metamask/page.tsx#L92-L95)\nThe app demonstrates how to get detailed information about a specific token:\n\n```typescript\nconst tokenAddress = \"0xD61ffaece032CA6E0C469820707d677Feb4BEDD5\";\nconst tokenInfo = await checkoutSDK.getTokenInfo({ provider: connectedProvider, tokenAddress });\n```\n\nThis retrieves the token's name, symbol, decimals, and icon URL, which are essential for properly displaying token information.\n\n### **Specific Token Balance**: [Getting balance of a particular token](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-wallet-balance-with-nextjs/src/app/wallet-balance-with-metamask/page.tsx#L105-L108)\nThe app shows how to get the balance for a specific token:\n\n```typescript\nconst tokenAddress = '0xD61ffaece032CA6E0C469820707d677Feb4BEDD5'\nconst balanceResponse = await checkoutSDK.getBalance({ provider: connectedProvider, walletAddress, tokenAddress });\n```\n\nThis returns the balance along with the token information for a specific ERC-20 token.\n\n### **Native Token Balance**: [Getting the native token balance](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/checkout/sdk-wallet-balance-with-nextjs/src/app/wallet-balance-with-metamask/page.tsx#L118-L120)\nThe app also demonstrates how to retrieve the native token (ETH) balance:\n\n```typescript\nconst balanceResponse = await checkoutSDK.getBalance({ provider: connectedProvider, walletAddress });\n```\n\nWhen no token address is provided, the SDK automatically returns the native token balance.\n\n## Running the App\n\n### Prerequisites\n- Node.js v18 or later\n- pnpm installed ([Installation guide](https://pnpm.io/installation))\n- Setup an Immutable API key from [Immutable Hub](https://hub.immutable.com/)\n\n### Steps to Run the App\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/immutable/ts-immutable-sdk.git\n   cd ts-immutable-sdk/examples/checkout/sdk-wallet-balance-with-nextjs\n   ```\n\n2. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n\n3. Copy the environment example file and add your API key:\n   ```bash\n   cp .env.example .env\n   ```\n   Edit the `.env` file and add your publishable API key from Immutable Hub:\n   ```\n   NEXT_PUBLIC_PUBLISHABLE_KEY=your_publishable_key_here\n   ```\n\n4. Start the development server:\n   ```bash\n   pnpm dev\n   ```\n\n5. Open [http://localhost:3000](http://localhost:3000) in your browser\n   \n6. Click on \"Wallet Balance with MetaMask\" and then connect your MetaMask wallet\n\n## Summary\nThis example demonstrates how the Immutable Checkout SDK makes it simple to retrieve and display token balances in a Next.js application. By using the SDK's methods for connecting to wallets, fetching token information, and retrieving balances, developers can quickly build interfaces that display users' token holdings on Immutable zkEVM chains.\n\nKey takeaways include:\n- Simple wallet connection with MetaMask\n- Straightforward retrieval of both native and ERC-20 token balances\n- Easy access to token metadata including name, symbol, and decimals\n- Support for retrieving all balances at once or querying specific tokens ",
    "metadata": {
      "title": "Wallet Balance with Next.js",
      "description": "A Next.js application that demonstrates how to retrieve and display wallet token balances using the Immutable Checkout SDK",
      "keywords": [
        "Immutable",
        "SDK",
        "Checkout",
        "Wallet Balance",
        "Next.js",
        "Token Information",
        "MetaMask"
      ],
      "tech_stack": [
        "Next.js",
        "TypeScript",
        "Biom3",
        "Ethers.js"
      ],
      "product": "Checkout",
      "programming_language": "TypeScript"
    }
  }
}