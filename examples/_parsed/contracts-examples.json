{
  "contract-interaction-with-viem": {
    "tutorial": "# Contract Interaction with Viem\n\n## Introduction\nThis example application demonstrates how to interact with Immutable ERC721 smart contracts using Viem, a TypeScript library for Ethereum. The app showcases batch minting functionality for ERC721 tokens using two different approaches: minting by specific token IDs and minting by quantity.\n\n[View app on Github](https://github.com/immutable/ts-immutable-sdk/tree/main/examples/contracts/contract-interaction-with-viem)\n\n## Features Overview\n- Batch mint ERC721 tokens by specifying token IDs\n- Batch mint ERC721 tokens by specifying quantity\n- Role-based permission verification before minting\n- Integration with Immutable zkEVM network\n\n## SDK Integration Details\n\n### Role Verification\n**[Permission Checking](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/contracts/contract-interaction-with-viem/batch-mint-erc721-by-id.ts#L52-L63)**: The example demonstrates how to verify if an account has the required minter role before attempting to mint tokens.\n\n```typescript\n// We can use the read function hasRole to check if the intended signer\n// has sufficient permissions to mint before we send the transaction\nconst minterRole = await contract.read.MINTER_ROLE();\n\nconst hasMinterRole = await contract.read.hasRole([\n  minterRole,\n  walletClient.account.address,\n]);\n\nif (!hasMinterRole) {\n  // Handle scenario without permissions...\n  console.log('Account doesnt have permissions to mint.');\n  return Promise.reject(\n    new Error('Account doesnt have permissions to mint.'),\n  );\n}\n```\n\n### Batch Minting by Token ID\n**[Batch Mint By ID](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/contracts/contract-interaction-with-viem/batch-mint-erc721-by-id.ts#L24-L73)**: This functionality allows minting multiple tokens with specific token IDs to different recipients in a single transaction.\n\n```typescript\nexport const batchMintERC721ByID = async (\n  privateKey: `0x${string}`,\n  contractAddress: `0x${string}`,\n  requests: {\n    to: `0x${string}`;\n    tokenIds: bigint[];\n  }[],\n): Promise<string> => {\n  const immutableTestnet = defineChain({\n    id: 13473,\n    name: 'imtbl-zkevm-testnet',\n    nativeCurrency: { name: 'IMX', symbol: 'IMX', decimals: 18 },\n    rpcUrls: {\n      default: {\n        http: ['https://rpc.testnet.immutable.com'],\n      },\n    },\n  });\n\n  const walletClient = createWalletClient({\n    chain: immutableTestnet,\n    transport: http(),\n    account: privateKeyToAccount(privateKey),\n  });\n\n  // Bound contract instance\n  const contract = getContract({\n    address: contractAddress,\n    abi: ImmutableERC721Abi,\n    client: walletClient,\n  });\n\n  // Permission verification code...\n\n  const txHash = await contract.write.mintBatch([requests]);\n\n  console.log(`txHash: ${txHash}`);\n  return txHash;\n};\n```\n\n### Batch Minting by Quantity\n**[Batch Mint By Quantity](https://github.com/immutable/ts-immutable-sdk/blob/main/examples/contracts/contract-interaction-with-viem/batch-mint-erc721-by-quantity.ts#L20-L70)**: This functionality enables minting a specified quantity of tokens to different recipients in a single transaction, with the contract automatically assigning token IDs.\n\n```typescript\nexport const batchMintERC721ByQuantity = async (\n  privateKey: `0x${string}`,\n  contractAddress: `0x${string}`,\n  mints: {\n    to: `0x${string}`;\n    quantity: bigint;\n  }[],\n): Promise<string> => {\n  const immutableTestnet = defineChain({\n    id: 13473,\n    name: 'imtbl-zkevm-testnet',\n    nativeCurrency: { name: 'IMX', symbol: 'IMX', decimals: 18 },\n    rpcUrls: {\n      default: {\n        http: ['https://rpc.testnet.immutable.com'],\n      },\n    },\n  });\n\n  const walletClient = createWalletClient({\n    chain: immutableTestnet,\n    transport: http(),\n    account: privateKeyToAccount(privateKey),\n  });\n\n  // Bound contract instance\n  const contract = getContract({\n    address: contractAddress,\n    abi: ImmutableERC721Abi,\n    client: walletClient,\n  });\n\n  // Permission verification code...\n\n  const txHash = await contract.write.mintBatchByQuantity([mints]);\n\n  console.log(`txHash: ${txHash}`);\n  return txHash;\n};\n```\n\n## Running the App\n\n### Prerequisites\n- Node.js installed on your machine\n- A private key with minter role permissions\n- An ERC721 contract deployed on Immutable zkEVM\n- [Immutable Hub account](https://hub.immutable.com/) for environment setup\n\n### Setup Instructions\n1. Clone the repository and navigate to the example app directory:\n   ```bash\n   git clone https://github.com/immutable/ts-immutable-sdk.git\n   cd ts-immutable-sdk/examples/contracts/contract-interaction-with-viem\n   ```\n\n2. Install the dependencies:\n   ```bash\n   pnpm i\n   ```\n\n3. Modify the example code to include your own private key and contract address:\n   - Replace `PRIVATE_KEY` with your wallet's private key\n   - Replace `CONTRACT_ADDRESS` with your deployed ERC721 contract address\n   - Replace `ACCOUNT_ADDRESS_1` and `ACCOUNT_ADDRESS_2` with recipient addresses\n\n4. Create a simple test script (e.g., `test.ts`) to run one of the minting functions:\n   ```typescript\n   import { batchMintERC721ByID, batchMintERC721ByQuantity } from './index';\n\n   const main = async () => {\n     try {\n       // Example of minting by ID\n       const result = await batchMintERC721ByID(\n         '0xYOUR_PRIVATE_KEY',\n         '0xYOUR_CONTRACT_ADDRESS',\n         [\n           {\n             to: '0xRECIPIENT_ADDRESS_1',\n             tokenIds: [BigInt(1), BigInt(2)],\n           },\n           {\n             to: '0xRECIPIENT_ADDRESS_2',\n             tokenIds: [BigInt(3), BigInt(4)],\n           },\n         ]\n       );\n       console.log('Transaction hash:', result);\n     } catch (error) {\n       console.error('Error:', error);\n     }\n   };\n\n   main();\n   ```\n\n5. Compile and run the test script:\n   ```bash\n   npx ts-node test.ts\n   ```\n\n## Summary\nThis example demonstrates how to interact with Immutable ERC721 contracts using Viem, focusing on batch minting capabilities. The application showcases two different approaches to minting multiple tokens: by specifying exact token IDs or by quantity. It also demonstrates the importance of verifying role-based permissions before attempting to execute contract functions. Developers can use this example as a foundation to build more complex minting functionality for their NFT projects on Immutable zkEVM. ",
    "metadata": {
      "title": "Contract Interaction with Viem",
      "description": "Example demonstrating how to interact with Immutable ERC721 contracts using Viem, focusing on batch minting capabilities by token ID and quantity.",
      "keywords": [
        "Immutable",
        "SDK",
        "Contracts",
        "ERC721",
        "Batch Minting",
        "Viem",
        "zkEVM"
      ],
      "tech_stack": [
        "TypeScript",
        "Viem",
        "Immutable Contracts"
      ],
      "product": "Contracts",
      "programming_language": "TypeScript"
    }
  }
}