## Immutable Checkout SDK Example App Generator - Part 2: Adding or Updating {feature name}

### Usage Instructions
This prompt helps you:
1. Add a new feature implementation to an existing example app
2. Update an existing feature implementation
3. Safely handle manually edited code

Make sure to always write tests first. You must do Test Driven Development. Go over the test file and check if the test exist for {feature name}. If not, make the tests, then proceed with the feature page implementation.
If the tests aren't passing, fix the feature page until all of the tests are passing.
**IMPORTANT**: Before running this prompt:
- If the {feature name} in the features.json file has the field of 'manually-edited' as true, the prompt will alert you before making changes
- To add a new feature, specify the feature name that doesn't exist yet
- To update a feature, specify the existing feature name to be updated

### Initial Analysis
1. Check if `src/app/{feature name}/page.tsx` already exists:
   - If it exists, in the features.json file, check if it has the field of 'manually-edited' as true
   - If manually edited, alert the engineer and request confirmation before proceeding
   - If not manually edited or if confirmation received, proceed with update
   - If it doesn't exist, prepare to create a new implementation

2. Identify integration points with the existing app:
   - Check for navigation components that need updating
   - Verify any shared state or context requirements
   - Identify any dependencies in the existing codebase

3. Read the complete Checkout SDK documentation for the {feature name} feature at https://docs.immutable.com/docs/zkEVM/products/checkout.

IMPORTANT: We have an internal UI Library called Biom3. Make sure that you thoroughly understand all of the components. DON'T ASSUME that a component exists. ALWAYS DOUBLE CHECK BEFORE YOU IMPORT OR USE ANYTHING
IF THE COMPONENT THAT YOU WANT DOESN'T EXIST IN BIOM3, ALWAYS USE NORMAL CSS/HTML AND NEVER ASSUME. (https://github.com/immutable/biom3 | https://immutable.atlassian.net/wiki/spaces/DS/pages/2335965298/BIOME+Docs)

### Implementation Strategy
1. For NEW feature implementation:
   - Create `src/app/{feature name}/page.tsx` with the 'use client' directive
   - Import all necessary components and SDK elements
   - Implement the feature with proper error handling, loading states, and UI
   - Update any navigation components to include the new feature (if applicable)
   - Listen to additional {feature name} specific requirements given by the user via the chat window
   - Ensure that Checkout login/wallet connect is implemented properly. If not sure, refer to other Checkout example apps for reference.

## Silent Login mode (If Applicable)
- Go to the features.json file and check for the silent login field.
- If {feature name} has the silent login field as true, go through all of the pages in the app and change all login modes to silent login.

2. For UPDATING existing implementation:
   - Preserve any custom imports or components specific to the app
   - Update SDK-related code with the latest implementation
   - Maintain the existing UI structure while updating functionality
   - Preserve any custom logic that extends beyond the standard implementation

3. For any implementation:
   - Verify all SDK objects before use: `if (!CheckoutInstance) return;`
   - Use optional chaining: `instance?.method?.()`
   - Wrap SDK calls in try/catch with appropriate error handling
   - Display meaningful error messages to users
   - Track and display loading states

### Feature Implementation Requirements
1. Use only documented methods and properties that exist on the SDK
2. Follow exact method signatures for all calls
3. Type all variables properly with TypeScript
4. Properly handle component lifecycle and cleanup
5. Implement event listeners with proper typing and cleanup (when applicable)
6. Structure UI with semantic HTML and Biom3 components
7. Implement clear loading, success, and error states

IF the requested {feature name} is related to event handling (IGNORE THIS IF {feature name} IS UNRELATED TO EVENT HANDLING):
- Include examples of handling these events:
 - connect
 - disconnect
 - chainChanged
 - accountsChanged
 - any other relevant Checkout events

 ## Event Handling Best Practices
 - Demonstrate proper event listener setup and cleanup
 - Show different types of events (connect, disconnect, chainChanged, etc.)
 - Display event data in UI for user feedback
 - Include comprehensive error handling
 - ALWAYS check if the provider exists before adding event listeners
 - Use try/catch blocks around all event handler operations
 - Implement robust cleanup of all event listeners in useEffect return functions
 - Verify connection state changes are properly tracked and displayed

### Code Quality Checklist 
- [ ] All SDK objects checked for existence before use
- [ ] All async operations wrapped in try/catch
- [ ] Event listeners properly removed in cleanup functions
- [ ] No references to unmounted components
- [ ] Integration with existing app navigation/state (if applicable)
- [ ] Proper TypeScript typing on all variables and functions
- [ ] React State hooks must be used appropriately, e.g. state updates must be handled correctly. e.g. on successful logins, loading must be set to false.

### Readme Instructions
Add the following to the project README.md under a "Feature Management" section:

```markdown
## Feature Management

### Adding New Features
To add a new feature implementation to this example app:
1. Run the {feature name} generator prompt
2. Specify the new feature name when prompted
3. The generator will create a new feature implementation at `src/app/{feature name}/page.tsx`
4. Update any navigation components to include the new feature

### Updating Features
To update an existing feature implementation:
1. Run the {feature name} generator prompt
2. Specify the existing feature name to update
3. The generator will update the implementation while preserving app-specific customizations


This comprehensive guide will help you safely add or update feature implementations while respecting existing code and manual edits.