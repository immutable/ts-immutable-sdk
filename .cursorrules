# Cursor Rules for Immutable SDK

## Conventional Commits

Always use conventional commit format for all commits and PR titles:

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Types
- **feat**: A new feature
- **fix**: A bug fix
- **docs**: Documentation only changes
- **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **perf**: A code change that improves performance
- **test**: Adding missing tests or correcting existing tests
- **build**: Changes that affect the build system or external dependencies
- **ci**: Changes to CI configuration files and scripts
- **chore**: Other changes that don't modify src or test files
- **revert**: Reverts a previous commit

### Examples
- `feat(swap): update price impact warning message`
- `fix(auth): resolve token validation error`
- `docs(readme): add installation instructions`
- `refactor(utils): simplify token formatting logic`

### PR Title Guidelines
- Use the same conventional commit format for PR titles
- Keep titles under 50 characters when possible
- Use lowercase for the description
- Be descriptive but concise
- Include the scope (component/module) when relevant

### Commit Message Guidelines
- Use imperative mood in the subject line ("add" not "added" or "adding")
- Capitalize the first letter of the description
- Do not end the subject line with a period
- Limit the subject line to 50 characters
- Separate subject from body with a blank line
- Use the body to explain what and why vs. how
- Wrap the body at 72 characters

When creating PRs, always follow this conventional commit style for both the commit messages and PR titles.